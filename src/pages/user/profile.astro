---
import MainLayout from "../../layouts/MainLayout.astro";
import { supabase } from "../../utils/supabase";
import { auth, profile } from "../../utils/auth";

// Add a class to the body to indicate this is an auth-required page
const authRequiredClass = 'auth-required';

// Authentication check
const authenticated = await auth.isAuthenticated();
const user = await auth.getCurrentUser();

// For server-side rendering, we'll set a flag but not redirect immediately
// Client-side JS will handle the redirect if needed
let authFailed = false;

if (!authenticated || !user) {
    authFailed = true;
    // We'll add a special class that client-side JS can detect
    // But we won't redirect immediately to allow client-side auth to take precedence
}

// Initialize variables
let userProfile = null;
let userPianos = [];
let userEvents = [];

// Only fetch data if user is authenticated
if (user && !authFailed) {
    // Get user profile
    console.log('Profile page: Getting user profile for ID:', user.id);
    userProfile = await profile.getUserProfile(user.id);
    console.log('Profile page: Profile retrieved:', userProfile ? 'Success' : 'Not found');
    
    // Create profile if it doesn't exist
    if (!userProfile) {
        console.log('Profile page: Creating profile for user:', user.id);
        const displayName = user.user_metadata?.display_name || user.email?.split('@')[0] || 'User';
        const { data, error } = await profile.createUserProfile(user.id, displayName);
        
        if (error) {
            console.error('Profile page: Error creating profile:', error);
        } else if (data) {
            console.log('Profile page: Profile created successfully');
            userProfile = Array.isArray(data) ? data[0] : data;
        }
    }
    
    // Get user's pianos with error handling
    console.log('Profile page: Fetching user pianos...');
    try {
        const { data: pianos, error: pianosError } = await supabase
            .from('pianos')
            .select('*')
            .eq('created_by', user.id)
            .order('created_at', { ascending: false });
            
        if (pianosError) {
            console.error('Error fetching pianos:', pianosError);
        } else {
            userPianos = pianos || [];
            console.log(`Profile page: Retrieved ${userPianos.length} pianos`);
        }
    } catch (err) {
        console.error('Exception fetching pianos:', err);
    }
    
    // Get user's events with error handling
    console.log('Profile page: Fetching user events...');
    try {
        const { data: events, error: eventsError } = await supabase
            .from('events')
            .select('*')
            .eq('created_by', user.id)
            .order('created_at', { ascending: false });
            
        if (eventsError) {
            console.error('Error fetching events:', eventsError);
        } else {
            userEvents = events || [];
            console.log(`Profile page: Retrieved ${userEvents.length} events`);
        }
    } catch (err) {
        console.error('Exception fetching events:', err);
    }
    
    console.log('Profile page: Rendering profile for user:', user.id);
}
// Define body classes for authentication state
const bodyClasses = [
    authRequiredClass,
    authFailed ? 'auth-required-not-authenticated' : 'auth-required-authenticated'
].join(' ');
---
<MainLayout bodyClasses={bodyClasses}>
    <div class="container mx-auto px-4 py-8">
        <div class="text-sm breadcrumbs mb-6">
            <ul>
                <li><a href="/">Home</a></li>
                <li><a href="/user/dashboard">User Dashboard</a></li>
                <li>Edit Profile</li>
            </ul>
        </div>
        
        <!-- Loading state that will be hidden when auth check completes -->
        <div id="loading-state" class="flex flex-col items-center justify-center py-12">
            <div class="loading loading-spinner loading-lg"></div>
            <p class="mt-4 text-lg">Loading your profile...</p>
        </div>
        
        <!-- Profile content that will be shown when auth check completes -->
        <div id="profile-content" class="hidden">
            <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
                <!-- Sidebar -->
                <div class="lg:col-span-1">
                    <div class="card bg-base-100 shadow-xl">
                        <div class="card-body">
                            <div class="flex flex-col items-center mb-6">
                                <div class="avatar mb-4">
                                    <div class="w-24 rounded-full">
                                        <img id="sidebar-avatar" src={userProfile?.avatar_url || `https://ui-avatars.com/api/?name=${userProfile?.display_name || 'User'}`} alt="User avatar" />
                                    </div>
                                </div>
                                <h2 id="sidebar-name" class="text-xl font-bold">{userProfile?.display_name || user?.email?.split('@')[0] || 'User'}</h2>
                                <p id="sidebar-email" class="text-base-content/70">{user?.email || 'No email available'}</p>
                            </div>
                            
                            <div class="divider"></div>
                            
                            <ul class="menu bg-base-100 w-full">
                                <li>
                                    <a href="/user/dashboard">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                                        </svg>
                                        Dashboard
                                    </a>
                                </li>
                                <li>
                                    <a href="/user/profile" class="active">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                        </svg>
                                        Edit Profile
                                    </a>
                                </li>
                                <li>
                                    <a href="/user/pianos">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2h-2a2 2 0 00-2 2" />
                                        </svg>
                                        My Pianos
                                    </a>
                                </li>
                                <li>
                                    <a href="/user/events">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                        </svg>
                                        My Events
                                    </a>
                                </li>
                                <li>
                                    <a href="/user/passport">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 6l3 1m0 0l-3 9a5.002 5.002 0 006.001 0M6 7l3 9M6 7l6-2m6 2l3-1m-3 1l-3 9a5.002 5.002 0 006.001 0M18 7l3 9m-3-9l-6-2m0-2v2m0 16V5m0 16H9m3 0h3" />
                                        </svg>
                                        Piano Passport
                                    </a>
                                </li>
                                <li>
                                    <a href="/user/settings">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                        </svg>
                                        Settings
                                    </a>
                                </li>
                            </ul>
                            
                            <div class="divider"></div>
                            
                            <button id="logout-btn" class="btn btn-outline btn-error w-full">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                                </svg>
                                Logout
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Main Content -->
                <div class="lg:col-span-3">
                    <h1 class="text-3xl font-bold mb-8">Edit Your Profile</h1>
                    
                    <div class="card bg-base-100 shadow-xl">
                        <div class="card-body">
                            <form id="profile-form" class="space-y-4">
                                <div class="form-control">
                                    <label class="label">
                                        <span class="label-text">Display Name</span>
                                    </label>
                                    <input
                                        type="text"
                                        id="display-name"
                                        name="display_name"
                                        class="input input-bordered"
                                        value={userProfile?.display_name || ''}
                                    />
                                </div>
                                
                                <div class="form-control">
                                    <label class="label">
                                        <span class="label-text">Bio</span>
                                    </label>
                                    <textarea
                                        id="bio"
                                        name="bio"
                                        class="textarea textarea-bordered h-24"
                                    >{userProfile?.bio || ''}</textarea>
                                </div>
                                
                                <div class="form-control">
                                    <label class="label">
                                        <span class="label-text">Avatar URL</span>
                                    </label>
                                    <input
                                        type="text"
                                        id="avatar-url"
                                        name="avatar_url"
                                        class="input input-bordered"
                                        value={userProfile?.avatar_url || ''}
                                    />
                                    <label class="label">
                                        <span class="label-text-alt">Enter a URL to an image</span>
                                    </label>
                                </div>
                                
                                <div id="status-message" class="mt-4 text-sm hidden"></div>
                                
                                <div class="form-control mt-6">
                                    <button type="submit" id="save-profile" class="btn btn-primary">Save Profile</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>
</MainLayout>

<script>
    import { auth, profile } from '../../utils/auth';
    
    document.addEventListener('DOMContentLoaded', async () => {
        // Get loading and content elements
        const loadingState = document.getElementById('loading-state');
        const profileContent = document.getElementById('profile-content');
        
        // Check if user is authenticated on client-side
        const authenticated = await auth.isAuthenticated();
        const user = await auth.getCurrentUser();
        
        // Redirect if not authenticated
        if (!authenticated || !user) {
            // Store the current URL to redirect back after login
            auth.setReturnUrl(window.location.pathname);
            window.location.href = '/auth?error=You must be logged in to view your profile';
            return;
        }
        
        // Check if profile exists and create if needed
        let userProfile = await profile.getUserProfile(user.id);
        
        if (!userProfile) {
            const displayName = user.user_metadata?.display_name || user.email?.split('@')[0] || 'User';
            const { data, error } = await profile.createUserProfile(user.id, displayName);
            
            if (error) {
                // Handle error silently
            } else if (data) {
                userProfile = Array.isArray(data) ? data[0] : data;
                // Reload the page to show the new profile
                window.location.reload();
            }
        } else {
            
            // Update the UI with the user's data
            const nameElement = document.getElementById('sidebar-name');
            const emailElement = document.getElementById('sidebar-email');
            const avatarImg = document.getElementById('sidebar-avatar') as HTMLImageElement;
            
            if (nameElement) {
                nameElement.textContent = userProfile.display_name || user.email?.split('@')[0] || 'User';
            }
            
            if (emailElement) {
                emailElement.textContent = user.email || 'No email available';
            }
            
            // Update form fields
            const displayNameInput = document.getElementById('display-name') as HTMLInputElement;
            const bioTextarea = document.getElementById('bio') as HTMLTextAreaElement;
            const avatarUrlInput = document.getElementById('avatar-url') as HTMLInputElement;
            
            if (displayNameInput) displayNameInput.value = userProfile.display_name || '';
            if (bioTextarea) bioTextarea.value = userProfile.bio || '';
            if (avatarUrlInput) avatarUrlInput.value = userProfile.avatar_url || '';
            
            // Update avatar
            if (avatarImg && userProfile.avatar_url) {
                avatarImg.src = userProfile.avatar_url;
            }
            
            // Hide loading state and show profile content
            if (loadingState) loadingState.classList.add('hidden');
            if (profileContent) profileContent.classList.remove('hidden');
        }
        
        // Profile form submission
        const profileForm = document.getElementById('profile-form') as HTMLFormElement;
        const saveProfileBtn = document.getElementById('save-profile') as HTMLButtonElement;
        
        if (profileForm && saveProfileBtn) {
            profileForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                saveProfileBtn.disabled = true;
                saveProfileBtn.textContent = 'Saving...';
                
                const formData = new FormData(profileForm);
                const profileData = {
                    display_name: formData.get('display_name'),
                    bio: formData.get('bio'),
                    avatar_url: formData.get('avatar_url')
                };
                
                try {
                    // Get current user
                    const currentUser = await auth.getCurrentUser();
                    if (!currentUser) {
                        throw new Error('Not authenticated');
                    }
                    
                    // Update profile
                    const { error } = await profile.updateUserProfile(currentUser.id, profileData);
                    
                    if (error) {
                        throw error;
                    }
                    
                    showStatus('success', 'Profile updated successfully!');
                    
                    // Reload page after a short delay
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } catch (error: any) {
                    console.error('Error updating profile:', error);
                    showStatus('error', 'Error updating profile: ' + (error.message || 'Unknown error'));
                    saveProfileBtn.disabled = false;
                    saveProfileBtn.textContent = 'Save Profile';
                }
            });
        }
        
        // Setup logout button
        const logoutBtn = document.getElementById('logout-btn');
        if (logoutBtn) {
            logoutBtn.addEventListener('click', async (e) => {
                e.preventDefault();
                const { error } = await auth.signOut();
                if (error) {
                    console.error('Error signing out:', error);
                }
                window.location.href = '/';
            });
        }
        
        // Function to show status messages
        function showStatus(type: 'error' | 'success', message: string) {
            const statusEl = document.getElementById('status-message');
            if (statusEl) {
                statusEl.textContent = message;
                statusEl.className = `mt-4 text-sm ${type === 'error' ? 'text-error' : 'text-success'}`;
                statusEl.classList.remove('hidden');
            }
        }
    });
</script>
