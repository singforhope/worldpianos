---
import MainLayout from "../../layouts/MainLayout.astro";
import { supabase } from "../../utils/supabase";
import { auth, profile } from "../../utils/auth";

// Add a class to the body to indicate this is an auth-required page
const authRequiredClass = 'auth-required';

// Enhanced authentication check with detailed logging
console.log('Profile page: Checking authentication...');
const authenticated = await auth.isAuthenticated();
console.log('Profile page: Authentication result:', authenticated);

// Get current user with detailed logging
console.log('Profile page: Getting current user...');
const user = await auth.getCurrentUser();
console.log('Profile page: User retrieved:', user ? `ID: ${user.id}` : 'No user found');

// For server-side rendering, we'll set a flag but not redirect immediately
// Client-side JS will handle the redirect if needed
let authFailed = false;

if (!authenticated || !user) {
    console.log('Profile page: Not authenticated on server-side');
    authFailed = true;
    // We'll add a special class that client-side JS can detect
    // But we won't redirect immediately to allow client-side auth to take precedence
}

// Initialize variables
let userProfile = null;
let userPianos = [];
let userEvents = [];

// Only fetch data if user is authenticated
if (user && !authFailed) {
    // Get user profile
    console.log('Profile page: Getting user profile for ID:', user.id);
    userProfile = await profile.getUserProfile(user.id);
    console.log('Profile page: Profile retrieved:', userProfile ? 'Success' : 'Not found');
    
    // Create profile if it doesn't exist
    if (!userProfile) {
        console.log('Profile page: Creating profile for user:', user.id);
        const displayName = user.user_metadata?.display_name || user.email?.split('@')[0] || 'User';
        const { data, error } = await profile.createUserProfile(user.id, displayName);
        
        if (error) {
            console.error('Profile page: Error creating profile:', error);
        } else if (data) {
            console.log('Profile page: Profile created successfully');
            userProfile = Array.isArray(data) ? data[0] : data;
        }
    }
    
    // Get user's pianos with error handling
    console.log('Profile page: Fetching user pianos...');
    try {
        const { data: pianos, error: pianosError } = await supabase
            .from('pianos')
            .select('*')
            .eq('created_by', user.id)
            .order('created_at', { ascending: false });
            
        if (pianosError) {
            console.error('Error fetching pianos:', pianosError);
        } else {
            userPianos = pianos || [];
            console.log(`Profile page: Retrieved ${userPianos.length} pianos`);
        }
    } catch (err) {
        console.error('Exception fetching pianos:', err);
    }
    
    // Get user's events with error handling
    console.log('Profile page: Fetching user events...');
    try {
        const { data: events, error: eventsError } = await supabase
            .from('events')
            .select('*')
            .eq('created_by', user.id)
            .order('created_at', { ascending: false });
            
        if (eventsError) {
            console.error('Error fetching events:', eventsError);
        } else {
            userEvents = events || [];
            console.log(`Profile page: Retrieved ${userEvents.length} events`);
        }
    } catch (err) {
        console.error('Exception fetching events:', err);
    }
    
    console.log('Profile page: Rendering profile for user:', user.id);
}
// Define body classes for authentication state
const bodyClasses = [
    authRequiredClass,
    authFailed ? 'auth-required-not-authenticated' : 'auth-required-authenticated'
].join(' ');
---

<MainLayout bodyClasses={bodyClasses}>
    <div class="container mx-auto px-4 py-8">
            <h1 class="text-3xl font-bold mb-8">Your Profile</h1>
            
            <!-- Loading state that will be hidden when auth check completes -->
            <div id="loading-state" class="flex flex-col items-center justify-center py-12">
                <div class="loading loading-spinner loading-lg"></div>
                <p class="mt-4 text-lg">Loading your profile...</p>
            </div>
            
            <!-- Profile content that will be shown when auth check completes -->
            <div id="profile-content" class="grid grid-cols-1 lg:grid-cols-3 gap-8 hidden">
            <!-- Profile Information -->
            <div class="lg:col-span-1">
                <div class="card bg-base-100 shadow-xl">
                    <div class="card-body">
                        <div class="flex flex-col items-center mb-6">
                            <div class="avatar mb-4">
                                <div class="w-24 rounded-full">
                                    <img src={userProfile?.avatar_url || `https://ui-avatars.com/api/?name=${userProfile?.display_name || 'User'}`} alt="User avatar" />
                                </div>
                            </div>
                            <h2 class="card-title text-2xl">{userProfile?.display_name || user?.email?.split('@')[0] || 'User'}</h2>
                            <p class="text-base-content/70">{user?.email || 'No email available'}</p>
                            {userProfile?.role === 'admin' && (
                                <div class="badge badge-primary mt-2">Admin</div>
                            )}
                        </div>
                        
                        <div class="divider"></div>
                        
                        <form id="profile-form" class="space-y-4">
                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">Display Name</span>
                                </label>
                                <input
                                    type="text"
                                    id="display-name"
                                    name="display_name"
                                    class="input input-bordered"
                                    value={userProfile?.display_name || ''}
                                />
                            </div>
                            
                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">Bio</span>
                                </label>
                                <textarea
                                    id="bio"
                                    name="bio"
                                    class="textarea textarea-bordered h-24"
                                >{userProfile?.bio || ''}</textarea>
                            </div>
                            
                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">Avatar URL</span>
                                </label>
                                <input
                                    type="text"
                                    id="avatar-url"
                                    name="avatar_url"
                                    class="input input-bordered"
                                    value={userProfile?.avatar_url || ''}
                                />
                                <label class="label">
                                    <span class="label-text-alt">Enter a URL to an image</span>
                                </label>
                            </div>
                            
                            <div id="status-message" class="mt-4 text-sm hidden"></div>
                            
                            <div class="form-control mt-6">
                                <button type="submit" id="save-profile" class="btn btn-primary">Save Profile</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            
            <!-- User Content -->
            <div class="lg:col-span-2">
                <div class="tabs tabs-boxed mb-6">
                    <a class="tab tab-active" id="pianos-tab">Your Pianos</a>
                    <a class="tab" id="events-tab">Your Events</a>
                </div>
                
                <!-- Pianos Tab -->
                <div id="pianos-content" class="space-y-4">
                    {userPianos && userPianos.length > 0 ? (
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            {userPianos.map((piano) => (
                                <div class="card bg-base-100 shadow-lg">
                                    <div class="card-body">
                                        <h3 class="card-title">{piano.name}</h3>
                                        <p class="text-sm text-base-content/70">{piano.location}</p>
                                        <p class="mt-2">{piano.description?.substring(0, 100)}...</p>
                                        <div class="card-actions justify-end mt-4">
                                            <a href={`/pianos/${piano.id}`} class="btn btn-primary btn-sm">View Details</a>
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    ) : (
                        <div class="alert">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                            <span>You haven't added any pianos yet.</span>
                            <div>
                                <button class="btn btn-sm open-piano-modal">Add Piano</button>
                            </div>
                        </div>
                    )}
                </div>
                
                <!-- Events Tab -->
                <div id="events-content" class="space-y-4 hidden">
                    {userEvents && userEvents.length > 0 ? (
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            {userEvents.map((event) => (
                                <div class="card bg-base-100 shadow-lg">
                                    <div class="card-body">
                                        <h3 class="card-title">{event.name}</h3>
                                        <p class="text-sm text-base-content/70">{event.location}</p>
                                        <p class="mt-2">{event.description?.substring(0, 100)}...</p>
                                        <div class="card-actions justify-end mt-4">
                                            <a href={`/events/${event.id}`} class="btn btn-primary btn-sm">View Details</a>
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    ) : (
                        <div class="alert">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                            <span>You haven't added any events yet.</span>
                            <div>
                                <button class="btn btn-sm open-event-modal">Add Event</button>
                            </div>
                        </div>
                    )}
                </div>
            </div>
        </div>
    </div>
</MainLayout>

<script>
    import { auth, profile } from '../../utils/auth';
    
    document.addEventListener('DOMContentLoaded', async () => {
        // Get loading and content elements
        const loadingState = document.getElementById('loading-state');
        const profileContent = document.getElementById('profile-content');
        
        // Check if user is authenticated on client-side
        const authenticated = await auth.isAuthenticated();
        const user = await auth.getCurrentUser();
        
        // Redirect if not authenticated
        if (!authenticated || !user) {
            console.log('Profile page: Not authenticated on client-side, redirecting to login');
            // Store the current URL to redirect back after login
            auth.setReturnUrl(window.location.pathname);
            window.location.href = '/auth?error=You must be logged in to view your profile';
            return;
        }
        
        console.log('Profile page (client): User authenticated:', user.id);
        
        // Check if profile exists and create if needed
        let userProfile = await profile.getUserProfile(user.id);
        
        if (!userProfile) {
            console.log('Profile page (client): Creating profile for user:', user.id);
            const displayName = user.user_metadata?.display_name || user.email?.split('@')[0] || 'User';
            const { data, error } = await profile.createUserProfile(user.id, displayName);
            
            if (error) {
                console.error('Profile page (client): Error creating profile:', error);
            } else if (data) {
                console.log('Profile page (client): Profile created successfully');
                userProfile = Array.isArray(data) ? data[0] : data;
                // Reload the page to show the new profile
                window.location.reload();
            }
        } else {
            console.log('Profile page (client): User profile found:', userProfile.display_name);
            
            // Update the UI with the user's data since server-side rendering might show placeholder data
            const titleElement = document.querySelector('.card-title.text-2xl');
            const emailElement = document.querySelector('.text-base-content\\/70');
            
            if (titleElement) {
                titleElement.textContent = userProfile.display_name || user.email?.split('@')[0] || 'User';
            }
            
            if (emailElement) {
                emailElement.textContent = user.email || 'No email available';
            }
            
            // Update form fields
            const displayNameInput = document.getElementById('display-name') as HTMLInputElement;
            const bioTextarea = document.getElementById('bio') as HTMLTextAreaElement;
            const avatarUrlInput = document.getElementById('avatar-url') as HTMLInputElement;
            
            if (displayNameInput) displayNameInput.value = userProfile.display_name || '';
            if (bioTextarea) bioTextarea.value = userProfile.bio || '';
            if (avatarUrlInput) avatarUrlInput.value = userProfile.avatar_url || '';
            
            // Update avatar
            const avatarImg = document.querySelector('.avatar img') as HTMLImageElement;
            if (avatarImg && userProfile.avatar_url) {
                avatarImg.src = userProfile.avatar_url;
            }
            
            // Hide loading state and show profile content
            if (loadingState) loadingState.classList.add('hidden');
            if (profileContent) profileContent.classList.remove('hidden');
        }
        
        // Tab switching
        const pianosTab = document.getElementById('pianos-tab') as HTMLElement;
        const eventsTab = document.getElementById('events-tab') as HTMLElement;
        const pianosContent = document.getElementById('pianos-content') as HTMLElement;
        const eventsContent = document.getElementById('events-content') as HTMLElement;
        
        if (pianosTab && eventsTab && pianosContent && eventsContent) {
            pianosTab.addEventListener('click', () => {
                pianosTab.classList.add('tab-active');
                eventsTab.classList.remove('tab-active');
                pianosContent.classList.remove('hidden');
                eventsContent.classList.add('hidden');
            });
            
            eventsTab.addEventListener('click', () => {
                eventsTab.classList.add('tab-active');
                pianosTab.classList.remove('tab-active');
                eventsContent.classList.remove('hidden');
                pianosContent.classList.add('hidden');
            });
        }
        
        // Profile form submission
        const profileForm = document.getElementById('profile-form') as HTMLFormElement;
        const saveProfileBtn = document.getElementById('save-profile') as HTMLButtonElement;
        
        if (profileForm && saveProfileBtn) {
            profileForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                saveProfileBtn.disabled = true;
                saveProfileBtn.textContent = 'Saving...';
                
                const formData = new FormData(profileForm);
                const profileData = {
                    display_name: formData.get('display_name'),
                    bio: formData.get('bio'),
                    avatar_url: formData.get('avatar_url')
                };
                
                try {
                    // Get current user
                    const currentUser = await auth.getCurrentUser();
                    if (!currentUser) {
                        throw new Error('Not authenticated');
                    }
                    
                    // Update profile
                    const { error } = await profile.updateUserProfile(currentUser.id, profileData);
                    
                    if (error) {
                        throw error;
                    }
                    
                    showStatus('success', 'Profile updated successfully!');
                    
                    // Reload page after a short delay
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } catch (error: any) {
                    console.error('Error updating profile:', error);
                    showStatus('error', 'Error updating profile: ' + (error.message || 'Unknown error'));
                    saveProfileBtn.disabled = false;
                    saveProfileBtn.textContent = 'Save Profile';
                }
            });
        }
        
        // Function to show status messages
        function showStatus(type: 'error' | 'success', message: string) {
            const statusEl = document.getElementById('status-message');
            if (statusEl) {
                statusEl.textContent = message;
                statusEl.className = `mt-4 text-sm ${type === 'error' ? 'text-error' : 'text-success'}`;
                statusEl.classList.remove('hidden');
            }
        }
    });
</script>
