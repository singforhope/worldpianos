---
import MainLayout from "../../layouts/MainLayout.astro";
import { supabase } from "../../utils/supabase";
import { auth, profile } from "../../utils/auth";

// Add a class to the body to indicate this is an auth-required page
const authRequiredClass = 'auth-required';

// Authentication check
const authenticated = await auth.isAuthenticated();
const user = await auth.getCurrentUser();

// For server-side rendering, we'll set a flag but not redirect immediately
// Client-side JS will handle the redirect if needed
let authFailed = false;

if (!authenticated || !user) {
    authFailed = true;
    // We'll add a special class that client-side JS can detect
    // But we won't redirect immediately to allow client-side auth to take precedence
}

// Initialize variables
let userProfile = null;
let userPianos = [];
let userEvents = [];

// Only fetch data if user is authenticated
if (user && !authFailed) {
    // Get user profile
    userProfile = await profile.getUserProfile(user.id);
    
    // Create profile if it doesn't exist
    if (!userProfile) {
        const displayName = user.user_metadata?.display_name || user.email?.split('@')[0] || 'User';
        const { data, error } = await profile.createUserProfile(user.id, displayName);
        
        if (data) {
            userProfile = Array.isArray(data) ? data[0] : data;
        }
    }
    
    // Get user's pianos with error handling
    try {
        const { data: pianos, error: pianosError } = await supabase
            .from('pianos')
            .select('*')
            .eq('created_by', user.id)
            .order('created_at', { ascending: false });
            
        if (!pianosError) {
            userPianos = pianos || [];
        } else {
            // Set empty array on error
            userPianos = [];
        }
    } catch (err) {
        // Set empty array on exception
        userPianos = [];
    }
    
    // Get user's events with error handling
    try {
        const { data: events, error: eventsError } = await supabase
            .from('events')
            .select('*')
            .eq('created_by', user.id)
            .order('created_at', { ascending: false });
            
        if (!eventsError) {
            userEvents = events || [];
        } else {
            // Set empty array on error
            userEvents = [];
        }
    } catch (err) {
        // Set empty array on exception
        userEvents = [];
    }
}

// Define body classes for authentication state
const bodyClasses = [
    authRequiredClass,
    authFailed ? 'auth-required-not-authenticated' : 'auth-required-authenticated'
].join(' ');
---

<MainLayout bodyClasses={bodyClasses}>
    <div class="container mx-auto px-4 py-8">
        <div class="text-sm breadcrumbs mb-6">
            <ul>
                <li><a href="/">Home</a></li>
                <li>User Dashboard</li>
            </ul>
        </div>
        
        <!-- Loading state that will be hidden when auth check completes -->
        <div id="loading-state" class="flex flex-col items-center justify-center py-12">
            <div class="loading loading-spinner loading-lg"></div>
            <p class="mt-4 text-lg">Loading your dashboard...</p>
        </div>
        
        <!-- Dashboard content that will be shown when auth check completes -->
        <div id="dashboard-content" class="hidden">
            <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
                <!-- Sidebar -->
                <div class="lg:col-span-1">
                    <div class="card bg-base-100 shadow-xl">
                        <div class="card-body">
                            <div class="flex flex-col items-center mb-6">
                                <div class="avatar mb-4">
                                    <div class="w-24 rounded-full">
                                        <img id="sidebar-avatar" src={userProfile?.avatar_url || `https://ui-avatars.com/api/?name=${userProfile?.display_name || 'User'}`} alt="User avatar" />
                                    </div>
                                </div>
                                <h2 id="sidebar-name" class="text-xl font-bold">{userProfile?.display_name || user?.email?.split('@')[0] || 'User'}</h2>
                                <p id="sidebar-email" class="text-base-content/70">{user?.email || 'No email available'}</p>
                            </div>
                            
                            <div class="divider"></div>
                            
                            <ul class="menu bg-base-100 w-full">
                                <li>
                                    <a href="/user/dashboard" class="active">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                                        </svg>
                                        Dashboard
                                    </a>
                                </li>
                                <li>
                                    <a href="/user/profile">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                        </svg>
                                        Edit Profile
                                    </a>
                                </li>
                                <li>
                                    <a href="/user/pianos">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2h-2a2 2 0 00-2 2" />
                                        </svg>
                                        My Pianos
                                    </a>
                                </li>
                                <li>
                                    <a href="/user/events">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                        </svg>
                                        My Events
                                    </a>
                                </li>
                                <li>
                                    <a href="/user/passport">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 6l3 1m0 0l-3 9a5.002 5.002 0 006.001 0M6 7l3 9M6 7l6-2m6 2l3-1m-3 1l-3 9a5.002 5.002 0 006.001 0M18 7l3 9m-3-9l-6-2m0-2v2m0 16V5m0 16H9m3 0h3" />
                                        </svg>
                                        Piano Passport
                                    </a>
                                </li>
                                <li>
                                    <a href="/user/settings">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                        </svg>
                                        Settings
                                    </a>
                                </li>
                            </ul>
                            
                            <div class="divider"></div>
                            
                            <button id="logout-btn" class="btn btn-outline btn-error w-full">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                                </svg>
                                Logout
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Main Content -->
                <div class="lg:col-span-3">
                    <h1 class="text-3xl font-bold mb-8">Your Dashboard</h1>
                    
                    <!-- Stats -->
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                        <div class="stat bg-base-100 shadow rounded-lg">
                            <div class="stat-figure text-primary">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2h-2a2 2 0 00-2 2" />
                                </svg>
                            </div>
                            <div class="stat-title">Your Pianos</div>
                            <div class="stat-value text-primary">{userPianos.length}</div>
                            <div class="stat-desc">Pianos you've added</div>
                        </div>
                        
                        <div class="stat bg-base-100 shadow rounded-lg">
                            <div class="stat-figure text-secondary">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                </svg>
                            </div>
                            <div class="stat-title">Your Events</div>
                            <div class="stat-value text-secondary">{userEvents.length}</div>
                            <div class="stat-desc">Events you've created</div>
                        </div>
                        
                        <div class="stat bg-base-100 shadow rounded-lg">
                            <div class="stat-figure text-accent">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 6l3 1m0 0l-3 9a5.002 5.002 0 006.001 0M6 7l3 9M6 7l6-2m6 2l3-1m-3 1l-3 9a5.002 5.002 0 006.001 0M18 7l3 9m-3-9l-6-2m0-2v2m0 16V5m0 16H9m3 0h3" />
                                </svg>
                            </div>
                            <div class="stat-title">Piano Passport</div>
                            <div class="stat-value text-accent">0</div>
                            <div class="stat-desc">Pianos you've visited</div>
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-1 gap-8">
                        <!-- Recent Pianos -->
                        <div class="card bg-base-100 shadow-xl">
                            <div class="card-body">
                                <div class="flex justify-between items-center w-full mb-4">
                                    <h2 class="card-title">Your Recent Pianos</h2>
                                    <a href="/user/pianos" class="btn btn-primary btn-sm">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                                        </svg>
                                        Add Piano
                                    </a>
                                </div>
                                
                                {userPianos && userPianos.length > 0 ? (
                                    <div>
                                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                                            {userPianos.slice(0, 3).map((piano) => (
                                                <div class="card bg-base-100 border border-base-200 hover:shadow-md transition-shadow">
                                                    <div class="card-body p-4">
                                                        <div class="flex justify-between items-start">
                                                            <h2 class="card-title text-base font-medium">{piano.name}</h2>
                                                            <div class="flex gap-1">
                                                                <span class={`badge badge-sm ${piano.verified ? 'badge-success' : 'badge-warning'}`}>
                                                                    {piano.verified ? 'Verified' : 'Pending'}
                                                                </span>
                                                                {piano.public && (
                                                                    <span class="badge badge-sm badge-info">Public</span>
                                                                )}
                                                            </div>
                                                        </div>
                                                        <div class="text-xs text-base-content/70 flex items-center gap-1 mt-1">
                                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                                                            </svg>
                                                            {piano.location || 'No location specified'}
                                                        </div>
                                                        <p class="text-sm mt-2 line-clamp-2">{piano.description || 'No description provided'}</p>
                                                        <div class="card-actions justify-end mt-3 pt-2 border-t border-base-200">
                                                            <a href={`/pianos/${piano.id}`} class="btn btn-primary btn-xs">View</a>
                                                            <a href={`/pianos/edit/${piano.id}`} class="btn btn-ghost btn-xs">Edit</a>
                                                        </div>
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                        <div class="flex justify-center mt-4">
                                            <a href="/user/pianos" class="btn btn-outline btn-sm">View All Pianos</a>
                                        </div>
                                    </div>
                                ) : (
                                    <div class="alert flex items-center justify-between">
                                        <div class="flex items-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                                        <span>You haven't added any pianos yet.</span>
                                        </div>
                                        <a href="/user/pianos" class="btn btn-sm btn-primary">Add Piano</a>
                                    </div>
                                )}
                            </div>
                        </div>
                        
                        <!-- Recent Events -->
                        <div class="card bg-base-100 shadow-xl">
                            <div class="card-body">
                                <div class="flex justify-between items-center w-full mb-4">
                                    <h2 class="card-title">Your Recent Events</h2>
                                    <a href="/user/events" class="btn btn-primary btn-sm">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                                        </svg>
                                        Add Event
                                    </a>
                                </div>
                                
                                {userEvents && userEvents.length > 0 ? (
                                    <div>
                                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                                            {userEvents.slice(0, 3).map((event) => (
                                                <div class="card bg-base-100 border border-base-200 hover:shadow-md transition-shadow">
                                                    <div class="card-body p-4">
                                                        <div class="flex justify-between items-start">
                                                            <h2 class="card-title text-base font-medium">{event.name}</h2>
                                                            <span class={`badge badge-sm ${event.status === 'upcoming' ? 'badge-primary' : event.status === 'ongoing' ? 'badge-success' : 'badge-secondary'}`}>
                                                                {event.status || 'unknown'}
                                                            </span>
                                                        </div>
                                                        <div class="flex flex-col sm:flex-row sm:gap-4 gap-1 my-2">
                                                            <div class="flex items-center gap-1">
                                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 text-base-content/60" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                                                </svg>
                                                                <span class="text-xs text-base-content/70">{event.date || 'Date not specified'}</span>
                                                            </div>
                                                            <div class="flex items-center gap-1">
                                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 text-base-content/60" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                                                                </svg>
                                                                <span class="text-xs text-base-content/70">{event.location || 'Location not specified'}</span>
                                                            </div>
                                                        </div>
                                                        <p class="text-sm line-clamp-2">{event.description || 'No description provided'}</p>
                                                        <div class="card-actions justify-end mt-3 pt-2 border-t border-base-200">
                                                            <a href={`/events/${event.id}`} class="btn btn-primary btn-xs">View</a>
                                                            <a href={`/events/edit/${event.id}`} class="btn btn-ghost btn-xs">Edit</a>
                                                        </div>
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                        <div class="flex justify-center mt-4">
                                            <a href="/user/events" class="btn btn-outline btn-sm">View All Events</a>
                                        </div>
                                    </div>
                                ) : (
                                    <div class="alert flex items-center justify-between">
                                        <div class="flex items-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                                        <span>You haven't added any events yet.</span>
                                        </div>
                                        <a href="/user/events" class="btn btn-sm btn-primary">Add Event</a>
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- No modals needed since we're redirecting to separate pages -->
</MainLayout>

<script>
    document.addEventListener('DOMContentLoaded', async () => {
        console.log('Dashboard script loaded, checking auth state');
        
        // Get loading and content elements
        const loadingState = document.getElementById('loading-state');
        const dashboardContent = document.getElementById('dashboard-content');
        
        // Track if we've shown the dashboard to prevent redundant operations
        let dashboardShown = false;
        
        // Function to update the dashboard stats with fresh data
        const updateDashboardStats = (pianos: any[], events: any[]) => {
            // Update counts in the stats cards
            const pianosCountElement = document.querySelector('.stat-value.text-primary');
            if (pianosCountElement) pianosCountElement.textContent = pianos.length.toString();
            
            const eventsCountElement = document.querySelector('.stat-value.text-secondary');
            if (eventsCountElement) eventsCountElement.textContent = events.length.toString();
        };
        
        // Helper function to find elements by text content
        const findElementByTextContent = (selector: string, text: string) => {
            const elements = document.querySelectorAll(selector);
            for (const el of elements) {
                if (el.textContent?.includes(text)) {
                    return el;
                }
            }
            return null;
        };
        
        // Function to update the pianos section
        const updatePianosSection = (pianos: any[]) => {
            const pianosTitle = findElementByTextContent('.card-title', 'Your Recent Pianos');
            const cardBody = pianosTitle?.closest('.card-body');
            
            if (!cardBody) {
                console.error('Could not find pianos card body');
                return;
            }
            
            if (pianos.length > 0) {
                // Remove any existing alert
                const existingAlert = cardBody.querySelector('.alert');
                if (existingAlert) existingAlert.remove();
                
                // Create the grid container
                let gridContainer = cardBody.querySelector('.grid.grid-cols-1.md\\:grid-cols-3');
                if (!gridContainer) {
                    // Clear previous content except the header
                    Array.from(cardBody.children).forEach(child => {
                        if (!child.classList.contains('flex')) {
                            child.remove();
                        }
                    });
                    
                    // Create new container
                    const container = document.createElement('div');
                    gridContainer = document.createElement('div');
                    gridContainer.className = 'grid grid-cols-1 md:grid-cols-3 gap-4';
                    container.appendChild(gridContainer);
                    
                    // Add "View All" button
                    const viewAllContainer = document.createElement('div');
                    viewAllContainer.className = 'flex justify-center mt-4';
                    viewAllContainer.innerHTML = `
                        <a href="/user/pianos" class="btn btn-outline btn-sm">View All Pianos</a>
                    `;
                    container.appendChild(viewAllContainer);
                    
                    cardBody.appendChild(container);
                } else {
                    // Clear existing grid
                    gridContainer.innerHTML = '';
                }
                
                // Add piano cards (up to 3)
                pianos.slice(0, 3).forEach(piano => {
                    const card = document.createElement('div');
                    card.className = 'card bg-base-100 border border-base-200 hover:shadow-md transition-shadow';
                    
                    const description = piano.description ? 
                        (piano.description.length > 120 ? 
                            `${piano.description.substring(0, 120)}...` : 
                            piano.description) : 
                        'No description provided';
                    
                    card.innerHTML = `
                        <div class="card-body p-4">
                            <div class="flex justify-between items-start">
                                <h2 class="card-title text-base font-medium">${piano.name}</h2>
                                <div class="flex gap-1">
                                    <span class="badge badge-sm ${piano.verified ? 'badge-success' : 'badge-warning'}">
                                        ${piano.verified ? 'Verified' : 'Pending'}
                                    </span>
                                    ${piano.public ? '<span class="badge badge-sm badge-info">Public</span>' : ''}
                                </div>
                            </div>
                            <div class="text-xs text-base-content/70 flex items-center gap-1 mt-1">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                                </svg>
                                ${piano.location || 'No location specified'}
                            </div>
                            <p class="text-sm mt-2 line-clamp-2">${description}</p>
                            <div class="card-actions justify-end mt-3 pt-2 border-t border-base-200">
                                <a href="/pianos/${piano.id}" class="btn btn-primary btn-xs">View</a>
                                <a href="/pianos/edit/${piano.id}" class="btn btn-ghost btn-xs">Edit</a>
                            </div>
                        </div>
                    `;
                    
                    gridContainer.appendChild(card);
                });
            } else {
                // Show empty state
                cardBody.innerHTML = `
                    <div class="flex justify-between items-center w-full mb-4">
                        <h2 class="card-title">Your Recent Pianos</h2>
                        <a href="/user/pianos" class="btn btn-primary btn-sm">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                            </svg>
                            Add Piano
                        </a>
                    </div>
                    <div class="alert flex items-center justify-between">
                        <div class="flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                            <span>You haven't added any pianos yet.</span>
                        </div>
                        <a href="/user/pianos" class="btn btn-sm btn-primary">Add Piano</a>
                    </div>
                `;
            }
        };
        
        // Function to update the events section
        const updateEventsSection = (events: any[]) => {
            const eventsTitle = findElementByTextContent('.card-title', 'Your Recent Events');
            const cardBody = eventsTitle?.closest('.card-body');
            
            if (!cardBody) {
                console.error('Could not find events card body');
                return;
            }
            
            if (events.length > 0) {
                // Remove any existing alert
                const existingAlert = cardBody.querySelector('.alert');
                if (existingAlert) existingAlert.remove();
                
                // Create the grid container
                let gridContainer = cardBody.querySelector('.grid.grid-cols-1.md\\:grid-cols-3');
                if (!gridContainer) {
                    // Clear previous content except the header
                    Array.from(cardBody.children).forEach(child => {
                        if (!child.classList.contains('flex')) {
                            child.remove();
                        }
                    });
                    
                    // Create new container
                    const container = document.createElement('div');
                    gridContainer = document.createElement('div');
                    gridContainer.className = 'grid grid-cols-1 md:grid-cols-3 gap-4';
                    container.appendChild(gridContainer);
                    
                    // Add "View All" button
                    const viewAllContainer = document.createElement('div');
                    viewAllContainer.className = 'flex justify-center mt-4';
                    viewAllContainer.innerHTML = `
                        <a href="/user/events" class="btn btn-outline btn-sm">View All Events</a>
                    `;
                    container.appendChild(viewAllContainer);
                    
                    cardBody.appendChild(container);
                } else {
                    // Clear existing grid
                    gridContainer.innerHTML = '';
                }
                
                // Add event cards (up to 3)
                events.slice(0, 3).forEach(event => {
                    const card = document.createElement('div');
                    card.className = 'card bg-base-100 border border-base-200 hover:shadow-md transition-shadow';
                    
                    const description = event.description ? 
                        (event.description.length > 120 ? 
                            `${event.description.substring(0, 120)}...` : 
                            event.description) : 
                        'No description provided';
                    
                    const statusClass = event.status === 'upcoming' ? 'badge-primary' : 
                                      event.status === 'ongoing' ? 'badge-success' : 
                                      'badge-secondary';
                    
                    card.innerHTML = `
                        <div class="card-body p-4">
                            <div class="flex justify-between items-start">
                                <h2 class="card-title text-base font-medium">${event.name}</h2>
                                <span class="badge badge-sm ${statusClass}">
                                    ${event.status || 'unknown'}
                                </span>
                            </div>
                            <div class="flex flex-col sm:flex-row sm:gap-4 gap-1 my-2">
                                <div class="flex items-center gap-1">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 text-base-content/60" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                    </svg>
                                    <span class="text-xs text-base-content/70">${event.date || 'Date not specified'}</span>
                                </div>
                                <div class="flex items-center gap-1">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 text-base-content/60" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                                    </svg>
                                    <span class="text-xs text-base-content/70">${event.location || 'Location not specified'}</span>
                                </div>
                            </div>
                            <p class="text-sm line-clamp-2">${description}</p>
                            <div class="card-actions justify-end mt-3 pt-2 border-t border-base-200">
                                <a href="/events/${event.id}" class="btn btn-primary btn-xs">View</a>
                                <a href="/events/edit/${event.id}" class="btn btn-ghost btn-xs">Edit</a>
                            </div>
                        </div>
                    `;
                    
                    gridContainer.appendChild(card);
                });
            } else {
                // Show empty state
                cardBody.innerHTML = `
                    <div class="flex justify-between items-center w-full mb-4">
                        <h2 class="card-title">Your Recent Events</h2>
                        <a href="/user/events" class="btn btn-primary btn-sm">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                            </svg>
                            Add Event
                        </a>
                    </div>
                    <div class="alert flex items-center justify-between">
                        <div class="flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                            <span>You haven't added any events yet.</span>
                        </div>
                        <a href="/user/events" class="btn btn-sm btn-primary">Add Event</a>
                    </div>
                `;
            }
        };
        
        // Enhanced function to fetch and update dashboard data
        const fetchDashboardData = async (userId: string) => {
            try {
                // Import Supabase client
                const { supabase } = await import('../../utils/supabase');
                const { profile } = await import('../../utils/auth');
                
                // Get user profile
                const userProfile = await profile.getUserProfile(userId);
                
                // Update profile display
                const nameElement = document.getElementById('sidebar-name');
                const emailElement = document.getElementById('sidebar-email');
                const avatarElement = document.getElementById('sidebar-avatar') as HTMLImageElement | null;
                
                if (nameElement && userProfile?.display_name) {
                    nameElement.textContent = userProfile.display_name;
                }
                
                if (emailElement) {
                    const user = await supabase.auth.getUser();
                    if (user && user.data && user.data.user) {
                        emailElement.textContent = user.data.user.email || 'No email available';
                    }
                }
                
                if (avatarElement && userProfile?.avatar_url) {
                    avatarElement.src = userProfile.avatar_url;
                }
                
                // Fetch pianos for the user
                const { data: pianos, error: pianosError } = await supabase
                    .from('pianos')
                    .select('*')
                    .eq('created_by', userId)
                    .order('created_at', { ascending: false });
                
                if (pianosError) {
                    console.error('Error fetching pianos:', pianosError);
                }
                
                // Fetch events for the user
                const { data: events, error: eventsError } = await supabase
                    .from('events')
                    .select('*')
                    .eq('created_by', userId)
                    .order('created_at', { ascending: false });
                
                if (eventsError) {
                    console.error('Error fetching events:', eventsError);
                }
                
                // Update dashboard with fetched data
                updateDashboardStats(pianos || [], events || []);
                updatePianosSection(pianos || []);
                updateEventsSection(events || []);
                
                return { pianos: pianos || [], events: events || [] };
            } catch (error) {
                console.error('Error fetching dashboard data:', error);
                return { pianos: [], events: [] };
            }
        };
        
        // Enhanced showDashboard function with data fetching
        const showDashboard = async () => {
            if (dashboardShown) return; // Prevent multiple executions
            
            console.log('Showing dashboard content');
            dashboardShown = true;
            
            if (loadingState) loadingState.classList.add('hidden');
            if (dashboardContent) dashboardContent.classList.remove('hidden');
            
            try {
                // Import auth utility
                const { auth } = await import('../../utils/auth');
                
                // Get current user
                const user = await auth.getCurrentUser();
                
                if (user) {
                    console.log('Fetching dashboard data for user:', user.id);
                    await fetchDashboardData(user.id);
                } else {
                    console.warn('User authenticated but ID not available for data fetch');
                }
            } catch (error) {
                console.error('Error in client-side data fetching:', error);
            }
        };
        
        // Simple function to show an error
        const showError = (message: string) => {
            if (dashboardShown) return; // Prevent multiple executions
            
            console.log('Showing error message:', message);
            
            if (loadingState) {
                loadingState.innerHTML = `
                    <div class="alert alert-warning">
                        <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" /></svg>
                        <span>${message}</span>
                    </div>
                `;
            }
        };
        
        // Immediately show dashboard if server-side rendering authenticated the user
        if (document.body.classList.contains('auth-required-authenticated')) {
            console.log('Server-side authentication succeeded, showing dashboard immediately');
            showDashboard();
            // But still check localStorage to prevent any asynchronous issues
        }
        
        // Check for refresh loop
        const pageLoads = parseInt(sessionStorage.getItem('dashboard_page_loads') || '0');
        sessionStorage.setItem('dashboard_page_loads', (pageLoads + 1).toString());
        
        if (pageLoads > 3) {
            console.warn('Detected potential refresh loop, clearing session storage');
            sessionStorage.clear();
            
            // Still show the dashboard if server-side auth worked
            if (document.body.classList.contains('auth-required-authenticated')) {
                showDashboard();
            } else {
                showError(`
                    Detected a refresh loop. 
                    <a href="/auth" class="btn btn-sm btn-primary ml-2">Log in manually</a> 
                    or <button class="btn btn-sm btn-secondary ml-2" onclick="window.location.href='/'">Go to homepage</button>
                `);
            }
            return; // Exit early to break the loop
        }
        
        // Check if we have a token in localStorage first (most direct method)
        try {
            const storedSession = localStorage.getItem('worldpianos-auth');
            if (storedSession) {
                console.log('Found session in localStorage, showing dashboard');
                showDashboard();
                // Don't return early, continue with the rest of the checks
            }
        } catch (e) {
            console.warn('Error checking localStorage for session:', e);
        }
        
        // Only try the auth check if dashboard is not already shown
        if (!dashboardShown) {
            try {
                console.log('No valid session in localStorage, attempting auth check');
                
                // Import the auth utilities only if needed
                const { auth } = await import('../../utils/auth');
                
                // Simple timeout to prevent hanging
                const timeoutPromise = new Promise((_, reject) => 
                    setTimeout(() => reject(new Error('Auth check timeout')), 5000)
                );
                
                // Race the auth check against the timeout
                const authenticated = await Promise.race([
                    auth.isAuthenticated().catch(err => {
                        console.error('Error in isAuthenticated:', err);
                        return false;
                    }),
                    timeoutPromise
                ]);
                
                if (authenticated) {
                    console.log('Authentication successful, showing dashboard');
                    showDashboard();
                } else if (!dashboardShown) {
                    console.log('Not authenticated, showing login link');
                    showError(`
                        You need to be logged in to view this page.
                        <a href="/auth" class="btn btn-sm btn-primary ml-2">Log in</a>
                    `);
                    
                    // Don't redirect automatically, just show the login button
                    // This prevents potential redirect loops
                }
            } catch (error) {
                console.error('Error during authentication check:', error);
                
                // Show error if dashboard not already shown
                if (!dashboardShown) {
                    // Show a button to try again or go to login
                    showError(`
                        Authentication check failed. 
                        <a href="/auth" class="btn btn-sm btn-primary ml-2">Log in</a>
                        <button class="btn btn-sm btn-secondary ml-2" onclick="window.location.reload()">Try Again</button>
                    `);
                }
            }
        }
        
        // Setup logout button
        const logoutBtn = document.getElementById('logout-btn');
        if (logoutBtn) {
            logoutBtn.addEventListener('click', (e) => {
                e.preventDefault();
                try {
                    localStorage.removeItem('worldpianos-auth');
                    console.log('Logged out, redirecting to homepage');
                    window.location.href = '/';
                } catch (error) {
                    console.error('Error signing out:', error);
                    window.location.href = '/';  // Redirect anyway
                }
            });
        }
        
        // Reset page load counter after 5 minutes (normal usage shouldn't hit the loop detection)
        setTimeout(() => {
            sessionStorage.removeItem('dashboard_page_loads');
        }, 5 * 60 * 1000);
    });
</script>