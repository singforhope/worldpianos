---
import MainLayout from "../../layouts/MainLayout.astro";
import { supabase } from "../../utils/supabase";
import { auth, profile } from "../../utils/auth";
import EventForm from "../../components/community/EventForm.astro";

// Add a class to the body to indicate this is an auth-required page
const authRequiredClass = 'auth-required';

// Authentication check
const authenticated = await auth.isAuthenticated();

// Get current user
const user = await auth.getCurrentUser();

// For server-side rendering, we'll set a flag but not redirect immediately
// Client-side JS will handle the redirect if needed
let authFailed = false;

if (!authenticated || !user) {
    authFailed = true;
    // We'll add a special class that client-side JS can detect
    // But we won't redirect immediately to allow client-side auth to take precedence
}

// Initialize variables
let userProfile = null;
let userEvents = [];

// Only fetch data if user is authenticated
if (user && !authFailed) {
    // Get user profile
    userProfile = await profile.getUserProfile(user.id);
    
    // Create profile if it doesn't exist
    if (!userProfile) {
        const displayName = user.user_metadata?.display_name || user.email?.split('@')[0] || 'User';
        const { data, error } = await profile.createUserProfile(user.id, displayName);
        
        if (data) {
            userProfile = Array.isArray(data) ? data[0] : data;
        }
    }
    
    // Get user's events with error handling
    try {
        const { data: events, error: eventsError } = await supabase
            .from('events')
            .select('*')
            .eq('created_by', user.id)
            .order('created_at', { ascending: false });
            
        if (!eventsError) {
            userEvents = events || [];
        }
    } catch (err) {
        // Handle error silently
    }
}

// Define body classes for authentication state
const bodyClasses = [
    authRequiredClass,
    authFailed ? 'auth-required-not-authenticated' : 'auth-required-authenticated'
].join(' ');
---

<MainLayout bodyClasses={bodyClasses}>
    <div class="container mx-auto px-4 py-8">
        <div class="text-sm breadcrumbs mb-6">
            <ul>
                <li><a href="/">Home</a></li>
                <li><a href="/user/dashboard">User Dashboard</a></li>
                <li>My Events</li>
            </ul>
        </div>
        
        <!-- Loading state that will be hidden when auth check completes -->
        <div id="loading-state" class="flex flex-col items-center justify-center py-12">
            <div class="loading loading-spinner loading-lg"></div>
            <p class="mt-4 text-lg">Loading your events...</p>
        </div>
        
        <!-- Dashboard content that will be shown when auth check completes -->
        <div id="events-content" class="hidden">
            <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
                <!-- Sidebar -->
                <div class="lg:col-span-1">
                    <div class="card bg-base-100 shadow-xl">
                        <div class="card-body">
                            <div class="flex flex-col items-center mb-6">
                                <div class="avatar mb-4">
                                    <div class="w-24 rounded-full">
                                        <img id="sidebar-avatar" src={userProfile?.avatar_url || `https://ui-avatars.com/api/?name=${userProfile?.display_name || 'User'}`} alt="User avatar" />
                                    </div>
                                </div>
                                <h2 id="sidebar-name" class="text-xl font-bold">{userProfile?.display_name || user?.email?.split('@')[0] || 'User'}</h2>
                                <p id="sidebar-email" class="text-base-content/70">{user?.email || 'No email available'}</p>
                            </div>
                            
                            <div class="divider"></div>
                            
                            <ul class="menu bg-base-100 w-full">
                                <li>
                                    <a href="/user/dashboard">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                                        </svg>
                                        Dashboard
                                    </a>
                                </li>
                                <li>
                                    <a href="/user/profile">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                        </svg>
                                        Edit Profile
                                    </a>
                                </li>
                                <li>
                                    <a href="/user/pianos">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2h-2a2 2 0 00-2 2" />
                                        </svg>
                                        My Pianos
                                    </a>
                                </li>
                                <li>
                                    <a href="/user/events" class="active">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                        </svg>
                                        My Events
                                    </a>
                                </li>
                                <li>
                                    <a href="/user/passport">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 6l3 1m0 0l-3 9a5.002 5.002 0 006.001 0M6 7l3 9M6 7l6-2m6 2l3-1m-3 1l-3 9a5.002 5.002 0 006.001 0M18 7l3 9m-3-9l-6-2m0-2v2m0 16V5m0 16H9m3 0h3" />
                                        </svg>
                                        Piano Passport
                                    </a>
                                </li>
                                <li>
                                    <a href="/user/settings">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                        </svg>
                                        Settings
                                    </a>
                                </li>
                            </ul>
                            
                            <div class="divider"></div>
                            
                            <button id="logout-btn" class="btn btn-outline btn-error w-full">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                                </svg>
                                Logout
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Main Content -->
                <div class="lg:col-span-3">
                    <div class="flex justify-between items-center mb-6">
                        <h1 class="text-2xl font-bold">My Events</h1>
                        <button class="btn btn-primary btn-sm" onclick="document.getElementById('event-modal').showModal()">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                            </svg>
                            Add Event
                        </button>
                    </div>
                    
                    <!-- Search and filters -->
                    <div class="bg-base-100 rounded-lg mb-4">
                        <div class="flex flex-col gap-4">
                            <!-- Search bar -->
                            <div class="relative">
                                <input type="text" id="event-search" placeholder="Search by name, location, or description..." class="input input-bordered w-full pr-10" />
                                <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-base-content/60" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <circle cx="11" cy="11" r="8"></circle>
                                        <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                                    </svg>
                                </div>
                            </div>
                            
                            <!-- Filter buttons and sort -->
                            <div class="flex flex-wrap items-center justify-between gap-2">
                                <div class="flex flex-wrap gap-2">
                                    <div class="rounded-full px-4 py-1 bg-primary text-primary-content cursor-pointer" data-filter="all">All</div>
                                    <div class="rounded-full px-4 py-1 bg-base-300 text-base-content cursor-pointer" data-filter="upcoming">Upcoming</div>
                                    <div class="rounded-full px-4 py-1 bg-base-300 text-base-content cursor-pointer" data-filter="ongoing">Ongoing</div>
                                    <div class="rounded-full px-4 py-1 bg-base-300 text-base-content cursor-pointer" data-filter="past">Past</div>
                                </div>
                                
                                <div class="flex items-center">
                                    <select id="event-sort" class="select select-bordered">
                                        <option value="newest">Newest First</option>
                                        <option value="oldest">Oldest First</option>
                                        <option value="date">By Date</option>
                                        <option value="name">Name (A-Z)</option>
                                        <option value="name-desc">Name (Z-A)</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div id="events-list">
                        {userEvents && userEvents.length > 0 ? (
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
                                {userEvents.map((event) => (
                                    <div class="card bg-base-100 border border-base-200 hover:shadow-md transition-shadow">
                                        <div class="card-body p-4">
                                            <div class="flex justify-between items-start">
                                                <h2 class="card-title text-base font-medium">{event.name}</h2>
                                                <span class={`badge badge-sm ${event.status === 'upcoming' ? 'badge-primary' : event.status === 'ongoing' ? 'badge-success' : 'badge-secondary'}`}>
                                                    {event.status || 'unknown'}
                                                </span>
                                            </div>
                                            <div class="flex flex-col sm:flex-row sm:gap-4 gap-1 my-2">
                                                <div class="flex items-center gap-1">
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 text-base-content/60" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                                    </svg>
                                                    <span class="text-xs text-base-content/70">{event.date || 'Date not specified'}</span>
                                                </div>
                                                <div class="flex items-center gap-1">
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 text-base-content/60" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                                                    </svg>
                                                    <span class="text-xs text-base-content/70">{event.location || 'Location not specified'}</span>
                                                </div>
                                            </div>
                                            <p class="text-sm line-clamp-2">{event.description || 'No description provided'}</p>
                                            <div class="card-actions justify-end mt-3 pt-2 border-t border-base-200">
                                                <a href={`/events/${event.id}`} class="btn btn-primary btn-xs">View</a>
                                                <a href={`/events/edit/${event.id}`} class="btn btn-ghost btn-xs">Edit</a>
                                            </div>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        ) : (
                            <div class="card bg-base-100 shadow-sm">
                                <div class="card-body p-6">
                                    <div class="alert alert-info shadow-sm">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info shrink-0 w-5 h-5"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                                        <span>You haven't created any events yet.</span>
                                        <button class="btn btn-sm btn-primary" onclick="document.getElementById('event-modal').showModal()">
                                            Create Your First Event
                                        </button>
                                    </div>
                                </div>
                            </div>
                        )}
                    </div>
                    
                    <!-- Pagination for future use -->
                    <div class="flex justify-center mt-6">
                        <div class="join">
                            <button class="join-item btn btn-sm">Prev</button>
                            <button class="join-item btn btn-sm btn-primary">1</button>
                            <button class="join-item btn btn-sm">2</button>
                            <button class="join-item btn btn-sm">3</button>
                            <button class="join-item btn btn-sm">Next</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Event Modal -->
    <dialog id="event-modal" class="modal">
        <div class="modal-box w-11/12 max-w-6xl h-[90vh]">
            <div class="flex justify-between items-center mb-4">
                <h3 class="font-bold text-lg">Add a New Event</h3>
                <form method="dialog">
                    <button class="btn btn-sm btn-outline absolute right-4 top-4 shadow-md">Close(Esc)</button>
                </form>
            </div>
            <div class="divider mt-0 mb-4"></div>
            <div class="py-2">
                <div class="container mx-auto px-4">
                    <div class="mx-auto">
                        <EventForm isModal={true} />
                    </div>
                </div>
            </div>
        </div>
        <form method="dialog" class="modal-backdrop">
            <button>close</button>
        </form>
    </dialog>

    <script>
        // Add event listener for the close button
        document.addEventListener('DOMContentLoaded', () => {
            const closeButtons = document.querySelectorAll('.modal form[method="dialog"] button');
            closeButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const modal = document.getElementById('event-modal') as HTMLDialogElement;
                    if (modal) {
                        modal.close();
                    }
                });
            });
        });
    </script>
</MainLayout>

<script>
    import { auth, profile } from '../../utils/auth';
    import { supabase } from '../../utils/supabase';
    
    // Define Event interface
    interface Event {
        id: string;
        name: string;
        description?: string;
        date?: string;
        location?: string;
        status?: string;
        created_by: string;
        created_at: string;
    }
    
    // Global state to store all events
    let allEvents: Event[] = [];
    
    // Listen for messages from the iframe
    window.addEventListener('message', function(event) {
        // Handle event added message
        if (event.data && event.data.type === 'event-added') {
            // Close the modal
            const eventModal = document.getElementById('event-modal') as HTMLDialogElement;
            if (eventModal) eventModal.close();
            // Show a success message
            alert(`Event "${event.data.eventName}" added successfully!`);
            // Reload the page to show the new event
            window.location.reload();
        }
    });
    
    // Function to fetch user events
    const fetchUserEvents = async (userId: string): Promise<Event[]> => {
        try {
            const { data: events, error } = await supabase
                .from('events')
                .select('*')
                .eq('created_by', userId)
                .order('created_at', { ascending: false });
                
            if (error) {
                console.error('Error fetching events:', error);
                return [];
            }
            
            return events || [];
        } catch (err) {
            console.error('Exception when fetching events:', err);
            return [];
        }
    };
    
    // Function to filter events based on search and filter criteria
    const filterEvents = (events: Event[], searchTerm: string, filterValue: string, sortValue: string): Event[] => {
        // First apply the search filter
        let filteredEvents = searchTerm
            ? events.filter(event => 
                event.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                (event.location && event.location.toLowerCase().includes(searchTerm.toLowerCase())) ||
                (event.description && event.description.toLowerCase().includes(searchTerm.toLowerCase()))
              )
            : events;
            
        // Apply status filter
        if (filterValue === 'upcoming') {
            filteredEvents = filteredEvents.filter(event => event.status === 'upcoming');
        } else if (filterValue === 'ongoing') {
            filteredEvents = filteredEvents.filter(event => event.status === 'ongoing');
        } else if (filterValue === 'past') {
            filteredEvents = filteredEvents.filter(event => event.status === 'past');
        }
        
        // Apply sorting
        if (sortValue === 'newest') {
            filteredEvents.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());
        } else if (sortValue === 'oldest') {
            filteredEvents.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime());
        } else if (sortValue === 'date') {
            // Sort by event date if available, otherwise created_at
            filteredEvents.sort((a, b) => {
                if (a.date && b.date) {
                    return new Date(a.date).getTime() - new Date(b.date).getTime();
                } else if (a.date) {
                    return -1;
                } else if (b.date) {
                    return 1;
                } else {
                    return new Date(a.created_at).getTime() - new Date(b.created_at).getTime();
                }
            });
        } else if (sortValue === 'name') {
            filteredEvents.sort((a, b) => a.name.localeCompare(b.name));
        } else if (sortValue === 'name-desc') {
            filteredEvents.sort((a, b) => b.name.localeCompare(a.name));
        }
        
        return filteredEvents;
    };
    
    // Function to update the UI with the events
    const updateEventsList = (events: Event[]): void => {
        const eventsListElement = document.getElementById('events-list');
        if (!eventsListElement) return;
        
        if (events.length > 0) {
            // Create grid for event cards
            const grid = document.createElement('div');
            grid.className = 'grid grid-cols-1 md:grid-cols-2 gap-3';
            
            // Add event cards
            events.forEach(event => {
                const card = document.createElement('div');
                card.className = 'card bg-base-100 border border-base-200 hover:shadow-md transition-shadow';
                
                const description = event.description ? 
                    (event.description.length > 120 ? 
                        `${event.description.substring(0, 120)}...` : 
                        event.description) : 
                    'No description provided';
                
                const statusClass = event.status === 'upcoming' ? 'badge-primary' : 
                                  event.status === 'ongoing' ? 'badge-success' : 
                                  'badge-secondary';
                
                card.innerHTML = `
                    <div class="card-body p-4">
                        <div class="flex justify-between items-start">
                            <h2 class="card-title text-base font-medium">${event.name}</h2>
                            <span class="badge badge-sm ${statusClass}">
                                ${event.status || 'unknown'}
                            </span>
                        </div>
                        <div class="flex flex-col sm:flex-row sm:gap-4 gap-1 my-2">
                            <div class="flex items-center gap-1">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 text-base-content/60" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                </svg>
                                <span class="text-xs text-base-content/70">${event.date || 'Date not specified'}</span>
                            </div>
                            <div class="flex items-center gap-1">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 text-base-content/60" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                                </svg>
                                <span class="text-xs text-base-content/70">${event.location || 'Location not specified'}</span>
                            </div>
                        </div>
                        <p class="text-sm line-clamp-2">${description}</p>
                        <div class="card-actions justify-end mt-3 pt-2 border-t border-base-200">
                            <a href="/events/${event.id}" class="btn btn-primary btn-xs">View</a>
                            <a href="/events/edit/${event.id}" class="btn btn-ghost btn-xs">Edit</a>
                        </div>
                    </div>
                `;
                
                grid.appendChild(card);
            });
            
            // Clear the current content and add the grid
            eventsListElement.innerHTML = '';
            eventsListElement.appendChild(grid);
        } else {
            // Show empty state
            eventsListElement.innerHTML = `
                <div class="card bg-base-100 shadow-sm">
                    <div class="card-body p-6">
                        <div class="alert alert-info shadow-sm">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info shrink-0 w-5 h-5"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                            <span>No events found matching your criteria.</span>
                            <button class="btn btn-sm btn-primary" onclick="document.getElementById('event-modal').showModal()">
                                Create Event
                            </button>
                        </div>
                    </div>
                </div>
            `;
        }
        
        // Update the pagination visibility
        const paginationElement = document.querySelector('.join')?.parentElement;
        if (paginationElement) {
            paginationElement.style.display = events.length > 0 ? 'flex' : 'none';
        }
        
        // Update the result count badge
        const resultCountElement = document.getElementById('result-count');
        if (resultCountElement) {
            resultCountElement.textContent = `${events.length} ${events.length === 1 ? 'event' : 'events'}`;
            
            // Apply appropriate styling based on results count
            if (events.length === 0) {
                resultCountElement.className = 'badge badge-sm bg-error text-error-content self-center min-w-[60px] justify-center';
            } else if (events.length < 5) {
                resultCountElement.className = 'badge badge-sm bg-warning text-warning-content self-center min-w-[60px] justify-center';
            } else {
                resultCountElement.className = 'badge badge-sm bg-primary text-primary-content self-center min-w-[60px] justify-center';
            }
        }
    };
    
    // Setup search and filter event listeners with enhanced functionality
    const setupFilterListeners = () => {
        const searchInput = document.getElementById('event-search') as HTMLInputElement;
        const filterButtons = document.querySelectorAll('[data-filter]');
        const sortSelect = document.getElementById('event-sort') as HTMLSelectElement;
        
        if (!searchInput || !sortSelect) return;
        
        // Track active filter
        let activeFilter = 'all';
        
        // Function to apply all filters and update UI
        const applyFilters = () => {
            const searchTerm = searchInput.value;
            const filterValue = activeFilter;
            const sortValue = sortSelect.value;
            
            const filteredEvents = filterEvents(allEvents, searchTerm, filterValue, sortValue);
            updateEventsList(filteredEvents);
        };
        
        // Set up search input
        searchInput.addEventListener('input', applyFilters);
        
        // Set up filter buttons
        filterButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                const target = e.currentTarget as HTMLElement;
                const filterValue = target.getAttribute('data-filter');
                
                if (filterValue) {
                    // Update active filter
                    activeFilter = filterValue;
                    
                    // Update button styles
                    filterButtons.forEach(btn => {
                        btn.classList.remove('bg-primary', 'text-primary-content');
                        btn.classList.add('bg-base-300', 'text-base-content');
                    });
                    
                    // Apply style to active filter
                    target.classList.remove('bg-base-300', 'text-base-content');
                    target.classList.add('bg-primary', 'text-primary-content');
                    
                    // Apply filters
                    applyFilters();
                }
            });
        });
        
        // Set up sort select
        sortSelect.addEventListener('change', applyFilters);
        
        // Initialize with 'all' filter selected
        document.querySelector('[data-filter="all"]')?.classList.add('bg-primary', 'text-primary-content');
        document.querySelectorAll('[data-filter]:not([data-filter="all"])')?.forEach(btn => {
            btn.classList.add('bg-base-300', 'text-base-content');
        });
    };
    
    document.addEventListener('DOMContentLoaded', async () => {
        try {
            // Get loading and content elements
            const loadingState = document.getElementById('loading-state');
            const eventsContent = document.getElementById('events-content');
            
            // Check if user is authenticated on client-side
            const authenticated = await auth.isAuthenticated();
            const user = await auth.getCurrentUser();
            
            // Redirect if not authenticated
            if (!authenticated || !user) {
                // Store the current URL to redirect back after login
                auth.setReturnUrl(window.location.pathname);
                window.location.href = '/auth?error=You must be logged in to view your events';
                return;
            }
            
            try {
                // Check if profile exists and create if needed
                let userProfile = await profile.getUserProfile(user.id);
                
                if (!userProfile) {
                    // Creating profile for user
                    const displayName = user.user_metadata?.display_name || user.email?.split('@')[0] || 'User';
                    const { data, error } = await profile.createUserProfile(user.id, displayName);
                    
                    if (data) {
                        userProfile = Array.isArray(data) ? data[0] : data;
                    }
                }
                
                // Update the UI with the user's data
                const nameElement = document.getElementById('sidebar-name');
                const emailElement = document.getElementById('sidebar-email');
                const avatarImg = document.getElementById('sidebar-avatar') as HTMLImageElement;
                
                if (nameElement) {
                    nameElement.textContent = userProfile?.display_name || user.email?.split('@')[0] || 'User';
                }
                
                if (emailElement) {
                    emailElement.textContent = user.email || 'No email available';
                }
                
                if (avatarImg && userProfile?.avatar_url) {
                    avatarImg.src = userProfile.avatar_url;
                }
                
                // Fetch user's events and update the UI
                console.log('Fetching events for user:', user.id);
                allEvents = await fetchUserEvents(user.id);
                console.log(`Found ${allEvents.length} events for user`);
                updateEventsList(allEvents);
                
                // Set up filter listeners
                setupFilterListeners();
                
                // Hide loading state and show events content
                if (loadingState) loadingState.classList.add('hidden');
                if (eventsContent) eventsContent.classList.remove('hidden');
            } catch (profileError) {
                console.error('Error fetching profile:', profileError);
                
                // Try to fetch events even if profile fetch fails
                try {
                    allEvents = await fetchUserEvents(user.id);
                    updateEventsList(allEvents);
                    setupFilterListeners();
                } catch (eventsError) {
                    console.error('Error fetching events:', eventsError);
                }
                
                // Show events content even if profile fetch fails
                if (loadingState) loadingState.classList.add('hidden');
                if (eventsContent) eventsContent.classList.remove('hidden');
            }
            
            // Setup logout button
            const logoutBtn = document.getElementById('logout-btn');
            if (logoutBtn) {
                logoutBtn.addEventListener('click', async (e) => {
                    e.preventDefault();
                    try {
                        localStorage.removeItem('worldpianos-auth');
                        console.log('Logged out, redirecting to homepage');
                        window.location.href = '/';
                    } catch (error) {
                        console.error('Error signing out:', error);
                        window.location.href = '/';  // Redirect anyway
                    }
                });
            }
        } catch (error) {
            console.error('Unhandled error in events page:', error);
            // Fallback error handling - ensure UI is not stuck in loading state
            const loadingState = document.getElementById('loading-state');
            const eventsContent = document.getElementById('events-content');
            
            if (loadingState) loadingState.classList.add('hidden');
            if (eventsContent) eventsContent.classList.remove('hidden');
        }
    });
</script>
</script>