---
import AdminLayout from "../../../layouts/AdminLayout.astro";
import { supabase } from "../../../utils/supabase";

// Get query parameters
const { searchParams } = Astro.url;
const page = parseInt(searchParams.get('page') || '1');
const limit = 10;
const offset = (page - 1) * limit;
const search = searchParams.get('search') || '';
const filter = searchParams.get('filter') || 'all';
const type = searchParams.get('type') || 'piano';

// Build query for piano reports - use simpler query pattern
let pianosQuery = supabase
    .from('piano_reports')
    .select('*, piano_id, user_id', { count: 'exact' });

// Build query for event reports - use simpler query pattern
let eventsQuery = supabase
    .from('event_reports')
    .select('*, event_id, user_id', { count: 'exact' });

// Apply filter if provided
if (filter === 'pending') {
    pianosQuery = pianosQuery.eq('status', 'pending');
    eventsQuery = eventsQuery.eq('status', 'pending');
} else if (filter === 'resolved') {
    pianosQuery = pianosQuery.eq('status', 'resolved');
    eventsQuery = eventsQuery.eq('status', 'resolved');
}

// Get paginated results based on type
let pianoReports = [];
let eventReports = [];
let count = 0;
let error = null;

// Fetch piano reports if needed
if (type === 'piano' || type === 'all') {
    try {
        const pianoResult = await pianosQuery
            .order('created_at', { ascending: false })
            .range(offset, offset + limit - 1);
        
        pianoReports = pianoResult.data || [];
        count = pianoResult.count || 0;
        error = pianoResult.error;
        
        // If we have piano reports, fetch the related piano and user data
        if (pianoReports.length > 0) {
            // Get unique piano IDs
            const pianoIds = [...new Set(pianoReports.map(report => report.piano_id))].filter(Boolean);
            
            // Get unique user IDs
            const userIds = [...new Set(pianoReports.map(report => report.user_id))].filter(Boolean);
            
            // Fetch piano data
            if (pianoIds.length > 0) {
                const { data: pianos } = await supabase
                    .from('pianos')
                    .select('id, name')
                    .in('id', pianoIds);
                
                if (pianos) {
                    // Create lookup map for piano names
                    const pianoMap: Record<string, string> = pianos.reduce((acc: Record<string, string>, piano) => {
                        acc[piano.id] = piano.name;
                        return acc;
                    }, {});
                    
                    // Add piano_name to each report
                    pianoReports = pianoReports.map(report => ({
                        ...report,
                        piano_name: report.piano_id && pianoMap.hasOwnProperty(report.piano_id) 
                            ? pianoMap[report.piano_id] 
                            : 'Unknown Piano'
                    }));
                }
            }
            
            // Fetch user data
            if (userIds.length > 0) {
                const { data: users } = await supabase
                    .from('user_profiles')
                    .select('id, display_name')
                    .in('id', userIds);
                
                if (users) {
                    // Create lookup map for user display names
                    const userMap: Record<string, string> = users.reduce((acc: Record<string, string>, user) => {
                        acc[user.id] = user.display_name;
                        return acc;
                    }, {});
                    
                    // Add user_name to each report
                    pianoReports = pianoReports.map(report => ({
                        ...report,
                        user_name: report.user_id && userMap.hasOwnProperty(report.user_id) 
                            ? userMap[report.user_id] 
                            : 'Anonymous'
                    }));
                }
            }
        }
    } catch (err) {
        console.error('Error fetching piano reports:', err);
        error = err instanceof Error ? err : new Error('An unexpected error occurred');
    }
}

// Fetch event reports if needed
if (type === 'event' || type === 'all') {
    try {
        const eventResult = await eventsQuery
            .order('created_at', { ascending: false })
            .range(offset, offset + limit - 1);
        
        eventReports = eventResult.data || [];
        
        if (type === 'event') {
            count = eventResult.count || 0;
            error = eventResult.error;
        }
        
        // If we have event reports, fetch the related event and user data
        if (eventReports.length > 0) {
            // Get unique event IDs
            const eventIds = [...new Set(eventReports.map(report => report.event_id))].filter(Boolean);
            
            // Get unique user IDs
            const userIds = [...new Set(eventReports.map(report => report.user_id))].filter(Boolean);
            
            // Fetch event data
            if (eventIds.length > 0) {
                const { data: events } = await supabase
                    .from('events')
                    .select('id, name')
                    .in('id', eventIds);
                
                if (events) {
                    // Create lookup map for event names
                    const eventMap: Record<string, string> = events.reduce((acc: Record<string, string>, event) => {
                        acc[event.id] = event.name;
                        return acc;
                    }, {});
                    
                    // Add event_name to each report
                    eventReports = eventReports.map(report => ({
                        ...report,
                        event_name: report.event_id && eventMap.hasOwnProperty(report.event_id) 
                            ? eventMap[report.event_id] 
                            : 'Unknown Event'
                    }));
                }
            }
            
            // Fetch user data
            if (userIds.length > 0) {
                const { data: users } = await supabase
                    .from('user_profiles')
                    .select('id, display_name')
                    .in('id', userIds);
                
                if (users) {
                    // Create lookup map for user display names
                    const userMap: Record<string, string> = users.reduce((acc: Record<string, string>, user) => {
                        acc[user.id] = user.display_name;
                        return acc;
                    }, {});
                    
                    // Add user_name to each report
                    eventReports = eventReports.map(report => ({
                        ...report,
                        user_name: report.user_id && userMap.hasOwnProperty(report.user_id) 
                            ? userMap[report.user_id] 
                            : 'Anonymous'
                    }));
                }
            }
        }
    } catch (err) {
        console.error('Error fetching event reports:', err);
        if (type === 'event') {
            error = err instanceof Error ? err : new Error('An unexpected error occurred');
        }
    }
}

// Calculate pagination
const totalPages = count ? Math.ceil(count / limit) : 0;
const showPagination = totalPages > 1;
const prevPage = page > 1 ? page - 1 : null;
const nextPage = page < totalPages ? page + 1 : null;

// Build pagination URLs
const buildUrl = (newPage: number) => {
    const params = new URLSearchParams(searchParams);
    params.set('page', newPage.toString());
    return `?${params.toString()}`;
};

// Format date for display
const formatDate = (dateString: string) => {
    try {
        const date = new Date(dateString);
        
        // Check if date is valid
        if (isNaN(date.getTime())) {
            return 'Invalid date';
        }
        
        return date.toLocaleDateString(undefined, {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    } catch (err) {
        console.error(`Error formatting date: ${dateString}`, err);
        return dateString || 'Unknown date';
    }
};
---

<AdminLayout>
    <div class="text-sm breadcrumbs mb-6">
        <ul>
            <li><a href="/">Home</a></li>
            <li><a href="/admin/dashboard">Admin Dashboard</a></li>
            <li>Manage Reports</li>
        </ul>
    </div>
    
    <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
        <h1 class="text-3xl font-bold">Manage Reports</h1>
    </div>
    
    <!-- Search and Filter -->
    <div class="bg-base-100 shadow-lg rounded-lg p-4 mb-8">
        <form class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <!-- Report Type -->
            <div class="form-control">
                <select name="type" class="select select-bordered w-full" onchange="this.form.submit()">
                    <option value="piano" selected={type === 'piano'}>Piano Reports</option>
                    <option value="event" selected={type === 'event'}>Event Reports</option>
                </select>
            </div>
            
            <!-- Filter -->
            <div class="form-control">
                <select name="filter" class="select select-bordered w-full" onchange="this.form.submit()">
                    <option value="all" selected={filter === 'all'}>All Reports</option>
                    <option value="pending" selected={filter === 'pending'}>Pending Reports</option>
                    <option value="resolved" selected={filter === 'resolved'}>Resolved Reports</option>
                </select>
            </div>
            
            <!-- Reset -->
            <div class="form-control">
                <a href="/admin/reports" class="btn btn-outline w-full">Reset Filters</a>
            </div>
        </form>
    </div>
    
    <!-- Reports Table -->
    <div class="bg-base-100 shadow-lg rounded-lg overflow-hidden">
        {error && (
            <div class="alert alert-error">
                <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                <span>Error loading reports: {error.message}</span>
            </div>
        )}
        
        {!error && type === 'piano' && pianoReports.length === 0 && (
            <div class="alert">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                <span>No piano reports found matching your criteria.</span>
            </div>
        )}
        
        {!error && type === 'event' && eventReports.length === 0 && (
            <div class="alert">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                <span>No event reports found matching your criteria.</span>
            </div>
        )}
        
        {!error && type === 'piano' && pianoReports.length > 0 && (
            <div class="overflow-x-auto">
                <table class="table table-zebra w-full">
                    <thead>
                        <tr>
                            <th>Piano</th>
                            <th>Issue Type</th>
                            <th>Reported By</th>
                            <th>Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {pianoReports.map((report) => (
                            <tr>
                                <td>
                                    <a href={`/pianos/${report.piano_id}`} class="link link-hover">
                                        {report.piano_name}
                                    </a>
                                </td>
                                <td>{report.issue_type}</td>
                                <td>{report.user_name}</td>
                                <td>{formatDate(report.created_at)}</td>
                                <td>
                                    <span class={`badge ${report.status === 'pending' ? 'badge-warning' : 'badge-success'}`}>
                                        {report.status}
                                    </span>
                                </td>
                                <td>
                                    <div class="flex gap-2">
                                        <button 
                                            class="btn btn-xs btn-primary view-report-btn"
                                            data-report-id={report.id}
                                            data-report-type="piano"
                                        >
                                            View
                                        </button>
                                        {report.status === 'pending' && (
                                            <button 
                                                class="btn btn-xs btn-success resolve-report-btn"
                                                data-report-id={report.id}
                                                data-report-type="piano"
                                            >
                                                Resolve
                                            </button>
                                        )}
                                        <button 
                                            class="btn btn-xs btn-error delete-report-btn"
                                            data-report-id={report.id}
                                            data-report-type="piano"
                                        >
                                            Delete
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        )}
        
        {!error && type === 'event' && eventReports.length > 0 && (
            <div class="overflow-x-auto">
                <table class="table table-zebra w-full">
                    <thead>
                        <tr>
                            <th>Event</th>
                            <th>Issue Type</th>
                            <th>Reported By</th>
                            <th>Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {eventReports.map((report) => (
                            <tr>
                                <td>
                                    <a href={`/events/${report.event_id}`} class="link link-hover">
                                        {report.event_name}
                                    </a>
                                </td>
                                <td>{report.issue_type}</td>
                                <td>{report.user_name}</td>
                                <td>{formatDate(report.created_at)}</td>
                                <td>
                                    <span class={`badge ${report.status === 'pending' ? 'badge-warning' : 'badge-success'}`}>
                                        {report.status}
                                    </span>
                                </td>
                                <td>
                                    <div class="flex gap-2">
                                        <button 
                                            class="btn btn-xs btn-primary view-report-btn"
                                            data-report-id={report.id}
                                            data-report-type="event"
                                        >
                                            View
                                        </button>
                                        {report.status === 'pending' && (
                                            <button 
                                                class="btn btn-xs btn-success resolve-report-btn"
                                                data-report-id={report.id}
                                                data-report-type="event"
                                            >
                                                Resolve
                                            </button>
                                        )}
                                        <button 
                                            class="btn btn-xs btn-error delete-report-btn"
                                            data-report-id={report.id}
                                            data-report-type="event"
                                        >
                                            Delete
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        )}
        
        <!-- Pagination -->
        {showPagination && (
            <div class="flex justify-center py-4">
                <div class="join">
                    {prevPage && (
                        <a href={buildUrl(prevPage)} class="join-item btn">«</a>
                    )}
                    
                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((pageNum) => (
                        <a 
                            href={buildUrl(pageNum)} 
                            class={`join-item btn ${pageNum === page ? 'btn-active' : ''}`}
                        >
                            {pageNum}
                        </a>
                    ))}
                    
                    {nextPage && (
                        <a href={buildUrl(nextPage)} class="join-item btn">»</a>
                    )}
                </div>
            </div>
        )}
    </div>
    
    <!-- Report View Modal -->
    <dialog id="report-modal" class="modal">
        <div class="modal-box">
            <h3 class="font-bold text-lg" id="report-modal-title">Report Details</h3>
            <div class="py-4" id="report-modal-content">
                <!-- Content will be populated by JavaScript -->
                <div class="skeleton h-32 w-full"></div>
            </div>
            <div class="modal-action">
                <form method="dialog">
                    <button class="btn">Close</button>
                </form>
            </div>
        </div>
    </dialog>
</AdminLayout>

<!-- Notification Modal -->
<dialog id="notification-modal" class="modal">
    <div class="modal-box">
        <h3 id="notification-title" class="font-bold text-lg"></h3>
        <p id="notification-message" class="py-4"></p>
        <div class="modal-action">
            <button id="notification-ok-btn" class="btn">OK</button>
        </div>
    </div>
</dialog>

<!-- Confirm Delete Modal -->
<dialog id="confirm-delete-modal" class="modal">
    <div class="modal-box">
        <h3 class="font-bold text-lg text-error">Delete Report</h3>
        <p class="py-4">Are you sure you want to delete this report? This action cannot be undone.</p>
        <div class="modal-action">
            <button id="cancel-delete-btn" class="btn">Cancel</button>
            <button id="confirm-delete-btn" class="btn btn-error">Delete Report</button>
        </div>
    </div>
</dialog>

<script>
    // Import types
    import type { SupabaseClient } from '@supabase/supabase-js';
    
    // Safer import pattern
    let supabaseClient: SupabaseClient | null = null;
    
    // Safe import function
    async function getSupabaseClient(): Promise<SupabaseClient> {
        if (supabaseClient) return supabaseClient;
        
        try {
            const { supabase } = await import('../../../utils/supabase');
            if (!supabase) {
                throw new Error('Failed to initialize Supabase client');
            }
            supabaseClient = supabase;
            return supabaseClient;
        } catch (error) {
            console.error('Error importing Supabase client:', error);
            throw new Error('Database connection failed. Please try again later.');
        }
    }
    
    document.addEventListener('DOMContentLoaded', () => {
        const reportModal = document.getElementById('report-modal') as HTMLDialogElement;
        const reportModalTitle = document.getElementById('report-modal-title');
        const reportModalContent = document.getElementById('report-modal-content');
        
        // View report buttons
        const viewReportBtns = document.querySelectorAll('.view-report-btn');
        viewReportBtns.forEach(btn => {
            btn.addEventListener('click', async () => {
                const reportId = btn.getAttribute('data-report-id');
                const reportType = btn.getAttribute('data-report-type');
                
                if (!reportId || !reportType || !reportModal || !reportModalContent) return;
                
                try {
                    // Show loading state
                    reportModalContent.innerHTML = '<div class="skeleton h-32 w-full"></div>';
                    reportModal.showModal();
                    
                    // Get Supabase client
                    const supabase = await getSupabaseClient();
                    
                    // Fetch report details
                    let report;
                    if (reportType === 'piano') {
                        // First, get the basic report details
                        const { data, error } = await supabase
                            .from('piano_reports')
                            .select('*')
                            .eq('id', reportId)
                            .single();
                        
                        if (error) throw error;
                        report = data;
                        
                        // Then get the piano and user details separately
                        if (report.piano_id) {
                            const { data: piano } = await supabase
                                .from('pianos')
                                .select('name')
                                .eq('id', report.piano_id)
                                .single();
                                
                            if (piano) {
                                report.piano_name = piano.name;
                            }
                        }
                        
                        if (report.user_id) {
                            const { data: user } = await supabase
                                .from('user_profiles')
                                .select('display_name')
                                .eq('id', report.user_id)
                                .single();
                                
                            if (user) {
                                report.user_name = user.display_name;
                            }
                        }
                        
                        if (reportModalTitle) {
                            reportModalTitle.textContent = `Piano Report: ${report.piano_name || 'Unknown Piano'}`;
                        }
                    } else {
                        // First, get the basic report details
                        const { data, error } = await supabase
                            .from('event_reports')
                            .select('*')
                            .eq('id', reportId)
                            .single();
                        
                        if (error) throw error;
                        report = data;
                        
                        // Then get the event and user details separately
                        if (report.event_id) {
                            const { data: event } = await supabase
                                .from('events')
                                .select('name')
                                .eq('id', report.event_id)
                                .single();
                                
                            if (event) {
                                report.event_name = event.name;
                            }
                        }
                        
                        if (report.user_id) {
                            const { data: user } = await supabase
                                .from('user_profiles')
                                .select('display_name')
                                .eq('id', report.user_id)
                                .single();
                                
                            if (user) {
                                report.user_name = user.display_name;
                            }
                        }
                        
                        if (reportModalTitle) {
                            reportModalTitle.textContent = `Event Report: ${report.event_name || 'Unknown Event'}`;
                        }
                    }
                    
                    // Format date
                    let reportDate;
                    try {
                        reportDate = new Date(report.created_at).toLocaleDateString(undefined, {
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                        });
                    } catch (err) {
                        console.error('Error formatting date:', err);
                        reportDate = 'Unknown date';
                    }
                    
                    // Build report content
                    reportModalContent.innerHTML = `
                        <div class="space-y-4">
                            <div class="flex justify-between">
                                <div>
                                    <span class="font-semibold">Issue Type:</span> ${report.issue_type || 'Unknown issue'}
                                </div>
                                <div>
                                    <span class="badge ${report.status === 'pending' ? 'badge-warning' : 'badge-success'}">
                                        ${report.status || 'unknown'}
                                    </span>
                                </div>
                            </div>
                            
                            <div>
                                <span class="font-semibold">Reported By:</span> 
                                ${report.user_name || 'Anonymous'} 
                                on ${reportDate}
                            </div>
                            
                            <div class="divider my-2"></div>
                            
                            <div>
                                <span class="font-semibold">Description:</span>
                                <p class="mt-2 p-4 bg-base-200 rounded-lg">${report.description || 'No description provided'}</p>
                            </div>
                            
                            <div class="divider my-2"></div>
                            
                            <div class="flex justify-end gap-2">
                                ${report.status === 'pending' ? `
                                    <button 
                                        class="btn btn-sm btn-success modal-resolve-btn"
                                        data-report-id="${report.id}"
                                        data-report-type="${reportType}"
                                    >
                                        Mark as Resolved
                                    </button>
                                ` : ''}
                                <button 
                                    class="btn btn-sm btn-error modal-delete-btn"
                                    data-report-id="${report.id}"
                                    data-report-type="${reportType}"
                                >
                                    Delete Report
                                </button>
                            </div>
                        </div>
                    `;
                    
                    // Add event listeners to modal buttons
                    const modalResolveBtn = reportModalContent.querySelector('.modal-resolve-btn');
                    if (modalResolveBtn) {
                        modalResolveBtn.addEventListener('click', () => {
                            resolveReport(reportId, reportType);
                        });
                    }
                    
                    const modalDeleteBtn = reportModalContent.querySelector('.modal-delete-btn');
                    if (modalDeleteBtn) {
                        modalDeleteBtn.addEventListener('click', () => {
                            deleteReport(reportId, reportType);
                            reportModal.close();
                        });
                    }
                } catch (error) {
                    console.error('Error fetching report details:', error);
                    
                    if (reportModalContent) {
                        reportModalContent.innerHTML = `
                            <div class="alert alert-error">
                                <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                                <span>${error instanceof Error ? error.message : 'Error loading report details'}</span>
                            </div>
                        `;
                    }
                }
            });
        });
        
        // Modal Elements
        const notificationModal = document.getElementById('notification-modal') as HTMLDialogElement;
        const confirmDeleteModal = document.getElementById('confirm-delete-modal') as HTMLDialogElement;
        const notificationTitle = document.getElementById('notification-title');
        const notificationMessage = document.getElementById('notification-message');
        const notificationOkBtn = document.getElementById('notification-ok-btn');
        const cancelDeleteBtn = document.getElementById('cancel-delete-btn');
        const confirmDeleteBtn = document.getElementById('confirm-delete-btn');
        
        // Variables to store current report info for delete operation
        let currentReportId = '';
        let currentReportType = '';
        
        // Helper function to show notification
        const showNotification = (title: string, message: string, isSuccess = true, reloadOnClose = false) => {
            if (notificationTitle) notificationTitle.textContent = title;
            if (notificationTitle) notificationTitle.className = `font-bold text-lg ${isSuccess ? 'text-success' : 'text-error'}`;
            if (notificationMessage) notificationMessage.textContent = message;
            
            if (reloadOnClose && notificationOkBtn) {
                notificationOkBtn.onclick = () => {
                    notificationModal.close();
                    window.location.reload();
                };
            } else if (notificationOkBtn) {
                notificationOkBtn.onclick = () => {
                    notificationModal.close();
                };
            }
            
            notificationModal.showModal();
        };
        
        // Add event listeners for resolve buttons
        const resolveButtons = document.querySelectorAll('.resolve-report-btn');
        resolveButtons.forEach(button => {
            button.addEventListener('click', async () => {
                const reportId = button.getAttribute('data-report-id');
                const reportType = button.getAttribute('data-report-type');
                
                if (reportId && reportType) {
                    await resolveReport(reportId, reportType);
                }
            });
        });
        
        // Add event listeners for delete buttons
        const deleteButtons = document.querySelectorAll('.delete-report-btn');
        deleteButtons.forEach(button => {
            button.addEventListener('click', () => {
                const reportId = button.getAttribute('data-report-id');
                const reportType = button.getAttribute('data-report-type');
                
                if (reportId && reportType) {
                    // Store report info for the delete operation
                    currentReportId = reportId;
                    currentReportType = reportType;
                    
                    // Show confirmation modal
                    confirmDeleteModal.showModal();
                }
            });
        });
        
        // Confirm delete button
        if (confirmDeleteBtn) {
            confirmDeleteBtn.addEventListener('click', async () => {
                confirmDeleteModal.close();
                await deleteReport(currentReportId, currentReportType);
            });
        }
        
        // Cancel delete button
        if (cancelDeleteBtn) {
            cancelDeleteBtn.addEventListener('click', () => {
                confirmDeleteModal.close();
            });
        }
        
        // Function to resolve a report
        async function resolveReport(reportId: string, reportType: string) {
            try {
                // Get Supabase client
                const supabase = await getSupabaseClient();
                
                // Update report status
                const table = reportType === 'piano' ? 'piano_reports' : 'event_reports';
                const { error } = await supabase
                    .from(table)
                    .update({ status: 'resolved' })
                    .eq('id', reportId);
                
                if (error) {
                    // Handle specific error types
                    if (error.code === '42501' || error.message?.includes('permission')) {
                        throw new Error('Permission denied: You may not have rights to modify this report');
                    }
                    throw error;
                }
                
                // Show success message
                showNotification('Success', 'Report marked as resolved successfully!', true, true);
            } catch (error) {
                console.error('Error resolving report:', error);
                
                // Show error message
                if (error instanceof Error) {
                    showNotification('Error', `Error: ${error.message}`, false);
                } else {
                    showNotification('Error', 'Failed to resolve report', false);
                }
            }
        }
        
        // Function to delete a report
        async function deleteReport(reportId: string, reportType: string) {
            try {
                // Get Supabase client
                const supabase = await getSupabaseClient();
                
                // Delete report
                const table = reportType === 'piano' ? 'piano_reports' : 'event_reports';
                const { error } = await supabase
                    .from(table)
                    .delete()
                    .eq('id', reportId);
                
                if (error) {
                    // Handle specific error types
                    if (error.code === '42501' || error.message?.includes('permission')) {
                        throw new Error('Permission denied: You may not have rights to delete this report');
                    } else if (error.code === '23503') {
                        throw new Error('Cannot delete: This report is referenced by other items');
                    }
                    throw error;
                }
                
                // Show success message
                showNotification('Success', 'Report deleted successfully!', true, true);
            } catch (error) {
                console.error('Error deleting report:', error);
                
                // Show error message
                if (error instanceof Error) {
                    showNotification('Error', `Error: ${error.message}`, false);
                } else {
                    showNotification('Error', 'Failed to delete report', false);
                }
            }
        }
    });
</script>