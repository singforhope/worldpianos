---
import AdminLayout from "../../../layouts/AdminLayout.astro";
import { supabase } from "../../../utils/supabaseClient";

// Fetch available pianos for dropdown
const { data: pianos, error: pianosError } = await supabase
    .from('pianos')
    .select('id, name, location')
    .order('name', { ascending: true });

// Get today's date for default value
const today = new Date().toISOString().split('T')[0];
---

<AdminLayout>
    <div class="text-sm breadcrumbs mb-6">
        <ul>
            <li><a href="/">Home</a></li>
            <li><a href="/admin/dashboard">Admin Dashboard</a></li>
            <li><a href="/admin/events">Manage Events</a></li>
            <li>Add New Event</li>
        </ul>
    </div>
    
    <div class="card bg-base-100 shadow-xl">
        <div class="card-body">
            <h1 class="card-title text-2xl mb-6">Add New Event</h1>
            
            <form id="event-form">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Event Name</span>
                            <span class="label-text-alt text-error">*</span>
                        </label>
                        <input type="text" name="name" class="input input-bordered" required />
                    </div>
                    
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Event Type</span>
                            <span class="label-text-alt text-error">*</span>
                        </label>
                        <select name="type" class="select select-bordered" required>
                            <option value="" disabled selected>Select event type</option>
                            <option value="Concert">Concert</option>
                            <option value="Recital">Recital</option>
                            <option value="Festival">Festival</option>
                            <option value="Workshop">Workshop</option>
                            <option value="Competition">Competition</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Date</span>
                            <span class="label-text-alt text-error">*</span>
                        </label>
                        <input type="date" name="date" class="input input-bordered" value={today} required />
                    </div>
                    
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Time</span>
                            <span class="label-text-alt text-error">*</span>
                        </label>
                        <input type="time" name="time" class="input input-bordered" value="18:00" required />
                    </div>
                </div>
                
                <div class="form-control mb-4">
                    <label class="label">
                        <span class="label-text">Location</span>
                        <span class="label-text-alt text-error">*</span>
                    </label>
                    <input type="text" name="location" class="input input-bordered" placeholder="Event location or venue" required />
                </div>
                
                <div class="form-control mb-4">
                    <label class="label">
                        <span class="label-text">Description</span>
                        <span class="label-text-alt text-error">*</span>
                    </label>
                    <textarea name="description" class="textarea textarea-bordered h-24" placeholder="Describe the event details..." required></textarea>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Status</span>
                            <span class="label-text-alt text-error">*</span>
                        </label>
                        <select name="status" class="select select-bordered" required>
                            <option value="upcoming" selected>Upcoming</option>
                            <option value="ongoing">Ongoing</option>
                            <option value="completed">Completed</option>
                            <option value="cancelled">Cancelled</option>
                        </select>
                    </div>
                    
                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Related Piano</span>
                            <span class="label-text-alt text-error">*</span>
                        </label>
                        <select name="piano_id" class="select select-bordered" required>
                            <option value="" disabled selected>Select a piano</option>
                            {pianosError ? (
                                <option disabled>Error loading pianos</option>
                            ) : (
                                pianos && pianos.map((piano) => (
                                    <option value={piano.id}>
                                        {piano.name} - {piano.location}
                                    </option>
                                ))
                            )}
                        </select>
                    </div>
                </div>
                
                <div class="form-control mb-4">
                    <label class="label">
                        <span class="label-text">Coordinates [longitude, latitude]</span>
                        <span class="label-text-alt text-error">*</span>
                    </label>
                    <div class="grid grid-cols-2 gap-4">
                        <input 
                            type="number" 
                            name="longitude" 
                            class="input input-bordered" 
                            placeholder="Longitude (e.g. -73.9857)"
                            step="0.000001"
                            required
                        />
                        <input 
                            type="number" 
                            name="latitude" 
                            class="input input-bordered" 
                            placeholder="Latitude (e.g. 40.7484)"
                            step="0.000001"
                            required
                        />
                    </div>
                    <label class="label">
                        <span class="label-text-alt">You can use <a href="https://www.latlong.net/" target="_blank" class="link link-primary">latlong.net</a> to find coordinates</span>
                    </label>
                </div>
                
                <div id="form-status" class="alert hidden">
                    <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                    <span></span>
                </div>
                
                <div class="card-actions justify-end mt-6">
                    <a href="/admin/events" class="btn btn-ghost">Cancel</a>
                    <button type="submit" class="btn btn-primary">Create Event</button>
                </div>
            </form>
        </div>
    </div>
</AdminLayout>

<script>
    // Add Supabase global type declaration
    declare global {
        interface Window {
            supabase: any;
        }
    }
    
    document.addEventListener('DOMContentLoaded', () => {
        const eventForm = document.getElementById('event-form');
        const formStatus = document.getElementById('form-status');
        
        // Helper function to show form status
        const showStatus = (message: string, type: 'success' | 'error' | 'info') => {
            if (!formStatus) return;
            
            formStatus.classList.remove('hidden', 'alert-success', 'alert-error', 'alert-info');
            formStatus.classList.add(`alert-${type}`);
            
            const messageEl = formStatus.querySelector('span');
            if (messageEl) {
                messageEl.textContent = message;
            }
            
            // Scroll to status message
            formStatus.scrollIntoView({ behavior: 'smooth', block: 'center' });
        };
        
        // Function to generate UUID
        const generateUUID = () => {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                const r = Math.random() * 16 | 0;
                const v = c === 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        };
        
        if (eventForm) {
            eventForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                // Show loading state
                const submitBtn = eventForm.querySelector('button[type="submit"]') as HTMLButtonElement;
                if (submitBtn) {
                    submitBtn.classList.add('loading');
                    submitBtn.disabled = true;
                }
                
                try {
                    // Get form data
                    const formData = new FormData(eventForm as HTMLFormElement);
                    
                    // Generate event ID
                    const eventId = generateUUID();
                    
                    // Build event data object
                    const eventData = {
                        id: eventId,
                        name: formData.get('name'),
                        type: formData.get('type'),
                        date: formData.get('date'),
                        time: formData.get('time'),
                        location: formData.get('location'),
                        description: formData.get('description'),
                        status: formData.get('status'),
                        piano_id: formData.get('piano_id'),
                        coordinates: [
                            parseFloat(formData.get('longitude') as string),
                            parseFloat(formData.get('latitude') as string)
                        ],
                        verified: true, // Admin-created events are verified by default
                        created_at: new Date().toISOString(),
                        updated_at: new Date().toISOString()
                    };
                    
                    // Create event via Supabase
                    const { data, error } = await window.supabase
                        .from('events')
                        .insert(eventData)
                        .select();
                    
                    if (error) {
                        throw error;
                    }
                    
                    // Show success message and prepare for redirect
                    showStatus('Event created successfully! Redirecting...', 'success');
                    
                    // Redirect after a short delay
                    setTimeout(() => {
                        window.location.href = `/admin/events/${eventId}`;
                    }, 2000);
                } catch (error) {
                    console.error('Error creating event:', error);
                    
                    // Reset button state
                    if (submitBtn) {
                        submitBtn.classList.remove('loading');
                        submitBtn.disabled = false;
                    }
                    
                    // Show error message
                    let errorMessage = 'An error occurred while creating the event.';
                    if (error instanceof Error) {
                        errorMessage = `Error: ${error.message}`;
                    }
                    showStatus(errorMessage, 'error');
                }
            });
        }
    });
</script> 