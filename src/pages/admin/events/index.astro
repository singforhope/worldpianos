---
import AdminLayout from "../../../layouts/AdminLayout.astro";
import { supabase } from "../../../utils/supabase";

// Get query parameters
const { searchParams } = Astro.url;
const page = parseInt(searchParams.get('page') || '1');
const limit = 10;
const offset = (page - 1) * limit;
const search = searchParams.get('search') || '';
const filter = searchParams.get('filter') || 'all';

// Build query
let query = supabase
    .from('events')
    .select('*, created_by, piano_id', { count: 'exact' });

// Apply search if provided
if (search) {
    query = query.or(`name.ilike.%${search}%,location.ilike.%${search}%`);
}

// Apply filter if provided
if (filter === 'upcoming') {
    query = query.eq('status', 'upcoming');
} else if (filter === 'ongoing') {
    query = query.eq('status', 'ongoing');
} else if (filter === 'completed') {
    query = query.eq('status', 'completed');
}

// Get paginated results
const { data: events, count, error } = await query
    .order('date', { ascending: true })
    .range(offset, offset + limit - 1);

// If we have events, fetch the piano names in a separate query
let pianoNames: Record<string, string> = {};
if (events && events.length > 0) {
    const pianoIds = events
        .map(event => event.piano_id)
        .filter(id => id !== null && id !== undefined);
    
    if (pianoIds.length > 0) {
        const { data: pianos } = await supabase
            .from('pianos')
            .select('id, name')
            .in('id', pianoIds);
        
        if (pianos) {
            pianoNames = pianos.reduce((acc: Record<string, string>, piano) => {
                acc[piano.id] = piano.name;
                return acc;
            }, {});
        }
    }
    
    // Optionally fetch user names if needed
    // Uncomment this section if you want to display created_by user names
    /*
    const userIds = events
        .map(event => event.created_by)
        .filter(id => id !== null && id !== undefined);
    
    if (userIds.length > 0) {
        const { data: users } = await supabase
            .from('user_profiles')
            .select('id, display_name')
            .in('id', userIds);
        
        if (users) {
            const userNames = users.reduce((acc: Record<string, string>, user) => {
                acc[user.id] = user.display_name;
                return acc;
            }, {});
            
            // Add a user_name property to each event
            events = events.map(event => ({
                ...event,
                user_name: event.created_by && userNames[event.created_by] 
                    ? userNames[event.created_by]
                    : 'Unknown User'
            }));
        }
    }
    */
}

// Calculate pagination
const totalPages = count ? Math.ceil(count / limit) : 0;
const showPagination = totalPages > 1;
const prevPage = page > 1 ? page - 1 : null;
const nextPage = page < totalPages ? page + 1 : null;

// Build pagination URLs
const buildUrl = (newPage: number) => {
    const params = new URLSearchParams(searchParams);
    params.set('page', newPage.toString());
    return `?${params.toString()}`;
};

// Format date for display
const formatDate = (dateString: string) => {
    try {
        const date = new Date(dateString);
        
        // Check if date is valid
        if (isNaN(date.getTime())) {
            return 'Invalid date';
        }
        
        return date.toLocaleDateString(undefined, {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    } catch (err) {
        console.error(`Error formatting date: ${dateString}`, err);
        return dateString || 'Unknown date';
    }
};
---

<AdminLayout>
    <div class="text-sm breadcrumbs mb-6">
        <ul>
            <li><a href="/">Home</a></li>
            <li><a href="/admin/dashboard">Admin Dashboard</a></li>
            <li>Manage Events</li>
        </ul>
    </div>
    
    <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
        <h1 class="text-3xl font-bold">Manage Events</h1>
        <a href="/admin/events/add" class="btn btn-primary mt-4 md:mt-0">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
            </svg>
            Add Event
        </a>
    </div>
    
    <!-- Search and Filter -->
    <div class="bg-base-100 shadow-lg rounded-lg p-4 mb-8">
        <form class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <!-- Search -->
            <div class="form-control">
                <div class="input-group">
                    <input 
                        type="text" 
                        name="search" 
                        placeholder="Search events..." 
                        class="input input-bordered w-full" 
                        value={search}
                    />
                    <button type="submit" class="btn btn-square">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                        </svg>
                    </button>
                </div>
            </div>
            
            <!-- Filter -->
            <div class="form-control">
                <select name="filter" class="select select-bordered w-full" onchange="this.form.submit()">
                    <option value="all" selected={filter === 'all'}>All Events</option>
                    <option value="upcoming" selected={filter === 'upcoming'}>Upcoming</option>
                    <option value="ongoing" selected={filter === 'ongoing'}>Ongoing</option>
                    <option value="completed" selected={filter === 'completed'}>Completed</option>
                </select>
            </div>
            
            <!-- Reset -->
            <div class="form-control">
                <a href="/admin/events" class="btn btn-outline w-full">Reset Filters</a>
            </div>
        </form>
    </div>
    
    <!-- Events Table -->
    <div class="bg-base-100 shadow-lg rounded-lg overflow-hidden">
        {error && (
            <div class="alert alert-error">
                <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                <span>Error loading events: {error.message}</span>
            </div>
        )}
        
        {!error && events && events.length === 0 && (
            <div class="alert">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                <span>No events found matching your criteria.</span>
            </div>
        )}
        
        {!error && events && events.length > 0 && (
            <div class="overflow-x-auto">
                <table class="table table-zebra w-full">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Date</th>
                            <th>Location</th>
                            <th>Piano</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {events.map((event) => {
                            const pianoName = event.piano_id && pianoNames.hasOwnProperty(event.piano_id) 
                                ? pianoNames[event.piano_id] 
                                : 'Unknown Piano';
                            
                            return (
                                <tr>
                                    <td>{event.name || 'Unnamed Event'}</td>
                                    <td>
                                        <div>{formatDate(event.date)}</div>
                                        <div class="text-xs opacity-70">{event.time || 'No time specified'}</div>
                                    </td>
                                    <td>{event.location || 'No location'}</td>
                                    <td>{pianoName}</td>
                                    <td>
                                        <span class={`badge ${
                                            event.status === 'upcoming' ? 'badge-primary' : 
                                            event.status === 'ongoing' ? 'badge-success' : 
                                            'badge-secondary'
                                        }`}>
                                            {event.status || 'unknown'}
                                        </span>
                                    </td>
                                    <td class="flex gap-2">
                                        <a href={`/admin/events/${event.id}`} class="btn btn-xs btn-primary">Edit</a>
                                        <button 
                                            class="btn btn-xs btn-outline btn-error delete-event-btn"
                                            data-event-id={event.id}
                                        >
                                            Delete
                                        </button>
                                    </td>
                                </tr>
                            );
                        })}
                    </tbody>
                </table>
            </div>
        )}
        
        <!-- Pagination -->
        {showPagination && (
            <div class="flex justify-center py-4">
                <div class="join">
                    {prevPage && (
                        <a href={buildUrl(prevPage)} class="join-item btn">«</a>
                    )}
                    
                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((pageNum) => (
                        <a 
                            href={buildUrl(pageNum)} 
                            class={`join-item btn ${pageNum === page ? 'btn-active' : ''}`}
                        >
                            {pageNum}
                        </a>
                    ))}
                    
                    {nextPage && (
                        <a href={buildUrl(nextPage)} class="join-item btn">»</a>
                    )}
                </div>
            </div>
        )}
    </div>
</AdminLayout>

<!-- Notification Modal -->
<dialog id="notification-modal" class="modal">
    <div class="modal-box">
        <h3 id="notification-title" class="font-bold text-lg"></h3>
        <p id="notification-message" class="py-4"></p>
        <div class="modal-action">
            <button id="notification-ok-btn" class="btn">OK</button>
        </div>
    </div>
</dialog>

<!-- Confirm Delete Modal -->
<dialog id="confirm-delete-modal" class="modal">
    <div class="modal-box">
        <h3 class="font-bold text-lg text-error">Delete Event</h3>
        <p class="py-4">Are you sure you want to delete this event? This action cannot be undone.</p>
        <div class="modal-action">
            <button class="btn" onclick="this.closest('dialog').close()">Cancel</button>
            <button id="confirm-delete-btn" class="btn btn-error">Delete Event</button>
        </div>
    </div>
</dialog>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Modal Elements
        const notificationModal = document.getElementById('notification-modal') as HTMLDialogElement;
        const confirmDeleteModal = document.getElementById('confirm-delete-modal') as HTMLDialogElement;
        const notificationTitle = document.getElementById('notification-title');
        const notificationMessage = document.getElementById('notification-message');
        const notificationOkBtn = document.getElementById('notification-ok-btn');
        const confirmDeleteBtn = document.getElementById('confirm-delete-btn');
        
        // Helper function to show notification
        const showNotification = (title: string, message: string, isSuccess = true, redirectOnClose: string | null = null) => {
            if (notificationTitle) notificationTitle.textContent = title;
            if (notificationTitle) notificationTitle.className = `font-bold text-lg ${isSuccess ? 'text-success' : 'text-error'}`;
            if (notificationMessage) notificationMessage.textContent = message;
            
            if (redirectOnClose && notificationOkBtn) {
                notificationOkBtn.onclick = () => {
                    notificationModal.close();
                    window.location.href = redirectOnClose;
                };
            } else if (notificationOkBtn) {
                notificationOkBtn.onclick = () => {
                    notificationModal.close();
                };
            }
            
            notificationModal.showModal();
        };
        
        // Handle delete button clicks
        const deleteButtons = document.querySelectorAll('.delete-event-btn');
        deleteButtons.forEach(button => {
            button.addEventListener('click', async () => {
                const eventId = button.getAttribute('data-event-id');
                if (!eventId) {
                    return;
                }
                
                // Set up confirmation action
                if (confirmDeleteBtn) {
                    confirmDeleteBtn.onclick = async () => {
                        confirmDeleteModal.close();
                        
                        try {
                            // Import supabase client safely
                            let supabase;
                            try {
                                const supabaseModule = await import('../../../utils/supabase');
                                supabase = supabaseModule.supabase;
                                
                                if (!supabase) {
                                    throw new Error('Supabase client not initialized');
                                }
                            } catch (importError) {
                                console.error('Error importing Supabase client:', importError);
                                throw new Error('Could not connect to database. Please try again later.');
                            }
                            
                            // Delete event
                            const { error } = await supabase
                                .from('events')
                                .delete()
                                .eq('id', eventId);
                            
                            if (error) {
                                // Handle specific error types
                                if (error.code === '42501' || error.message?.includes('permission')) {
                                    throw new Error('Permission denied: You may not have rights to delete this event');
                                } else if (error.code === '23503') {
                                    throw new Error('Cannot delete: This event is referenced by other items');
                                } else {
                                    throw error;
                                }
                            }
                            
                            // Remove row from table
                            const row = button.closest('tr');
                            if (row) {
                                row.remove();
                            }
                            
                            // Show success message
                            showNotification('Success', 'Event deleted successfully!', true);
                        } catch (error) {
                            console.error('Error deleting event:', error);
                            
                            // Show error message
                            if (error instanceof Error) {
                                showNotification('Error', `Error: ${error.message}`, false);
                            } else {
                                showNotification('Error', 'Failed to delete event', false);
                            }
                        }
                    };
                }
                
                confirmDeleteModal.showModal();
            });
        });
    });
</script>