---
import AdminLayout from "../../../layouts/AdminLayout.astro";
import { supabase } from "../../../utils/supabase";

// Get query parameters
const { searchParams } = Astro.url;
const page = parseInt(searchParams.get('page') || '1');
const limit = 10;
const offset = (page - 1) * limit;
const search = searchParams.get('search') || '';
const filter = searchParams.get('filter') || 'all';

// Build query
let query = supabase
    .from('pianos')
    .select('*', { count: 'exact' });

// Apply search if provided
if (search) {
    query = query.or(`name.ilike.%${search}%,location.ilike.%${search}%,city.ilike.%${search}%,country.ilike.%${search}%`);
}

// Apply filter if provided
if (filter === 'verified') {
    query = query.eq('verified', true);
} else if (filter === 'unverified') {
    query = query.eq('verified', false);
}

// Get paginated results
const { data: pianos, count, error } = await query
    .order('created_at', { ascending: false })
    .range(offset, offset + limit - 1);

// Calculate pagination
const totalPages = count ? Math.ceil(count / limit) : 0;
const showPagination = totalPages > 1;
const prevPage = page > 1 ? page - 1 : null;
const nextPage = page < totalPages ? page + 1 : null;

// Build pagination URLs
const buildUrl = (newPage: number) => {
    const params = new URLSearchParams(searchParams);
    params.set('page', newPage.toString());
    return `?${params.toString()}`;
};
---

<AdminLayout>
    <div class="text-sm breadcrumbs mb-6">
        <ul>
            <li><a href="/">Home</a></li>
            <li><a href="/admin/dashboard">Admin Dashboard</a></li>
            <li>Manage Pianos</li>
        </ul>
    </div>
    
    <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-8">
        <h1 class="text-3xl font-bold">Manage Pianos</h1>
        <a href="/admin/pianos/add" class="btn btn-primary mt-4 md:mt-0">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
            </svg>
            Add Piano
        </a>
    </div>
    
    <!-- Search and Filter -->
    <div class="bg-base-100 shadow-lg rounded-lg p-4 mb-8">
        <form class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <!-- Search -->
            <div class="form-control">
                <div class="input-group">
                    <input 
                        type="text" 
                        name="search" 
                        placeholder="Search pianos..." 
                        class="input input-bordered w-full" 
                        value={search}
                    />
                    <button type="submit" class="btn btn-square">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                        </svg>
                    </button>
                </div>
            </div>
            
            <!-- Filter -->
            <div class="form-control">
                <select name="filter" class="select select-bordered w-full" onchange="this.form.submit()">
                    <option value="all" selected={filter === 'all'}>All Pianos</option>
                    <option value="verified" selected={filter === 'verified'}>Verified Only</option>
                    <option value="unverified" selected={filter === 'unverified'}>Unverified Only</option>
                </select>
            </div>
            
            <!-- Reset -->
            <div class="form-control">
                <a href="/admin/pianos" class="btn btn-outline w-full">Reset Filters</a>
            </div>
        </form>
    </div>
    
    <!-- Pianos Table -->
    <div class="bg-base-100 shadow-lg rounded-lg overflow-hidden">
        {error && (
            <div class="alert alert-error">
                <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                <span>Error loading pianos: {error.message}</span>
            </div>
        )}
        
        {!error && pianos && pianos.length === 0 && (
            <div class="alert">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                <span>No pianos found matching your criteria.</span>
            </div>
        )}
        
        {!error && pianos && pianos.length > 0 && (
            <div class="overflow-x-auto">
                <table class="table table-zebra w-full">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Location</th>
                            <th>Created By</th>
                            <th>Verified</th>
                            <th>Status</th>
                            <th>Created</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {pianos.map((piano) => (
                            <tr>
                                <td>{piano.name}</td>
                                <td>
                                    <div>{piano.location}</div>
                                    <div class="text-xs opacity-70">{piano.city}, {piano.country}</div>
                                </td>
                                <td>{piano.created_by ? piano.created_by.substring(0, 8) + '...' : 'Unknown'}</td>
                                <td>
                                    {piano.verified ? (
                                        <span class="badge badge-success">Yes</span>
                                    ) : (
                                        <span class="badge badge-warning">No</span>
                                    )}
                                </td>
                                <td>
                                    {piano.status === 'archived' ? (
                                        <span class="badge badge-error">Archived</span>
                                    ) : (
                                        <span class="badge badge-success">Active</span>
                                    )}
                                </td>
                                <td>{new Date(piano.created_at).toLocaleDateString()}</td>
                                <td class="flex gap-2">
                                    <a href={`/admin/pianos/${piano.id}`} class="btn btn-xs btn-primary">Edit</a>
                                    <button 
                                        class="btn btn-xs btn-outline btn-error verify-btn"
                                        data-piano-id={piano.id}
                                        data-verified={piano.verified ? 'true' : 'false'}
                                    >
                                        {piano.verified ? 'Unverify' : 'Verify'}
                                    </button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        )}
        
        <!-- Pagination -->
        {showPagination && (
            <div class="flex justify-center py-4">
                <div class="join">
                    {prevPage && (
                        <a href={buildUrl(prevPage)} class="join-item btn">«</a>
                    )}
                    
                    {Array.from({ length: totalPages }, (_, i) => i + 1).map((pageNum) => (
                        <a 
                            href={buildUrl(pageNum)} 
                            class={`join-item btn ${pageNum === page ? 'btn-active' : ''}`}
                        >
                            {pageNum}
                        </a>
                    ))}
                    
                    {nextPage && (
                        <a href={buildUrl(nextPage)} class="join-item btn">»</a>
                    )}
                </div>
            </div>
        )}
    </div>
</AdminLayout>

<!-- Notification Modal -->
<dialog id="notification-modal" class="modal">
    <div class="modal-box">
        <h3 id="notification-title" class="font-bold text-lg"></h3>
        <p id="notification-message" class="py-4"></p>
        <div class="modal-action">
            <button id="notification-ok-btn" class="btn">OK</button>
        </div>
    </div>
</dialog>

<!-- Confirm Verification Modal -->
<dialog id="confirm-verification-modal" class="modal">
    <div class="modal-box">
        <h3 id="verification-title" class="font-bold text-lg"></h3>
        <p id="verification-message" class="py-4"></p>
        <div class="modal-action">
            <button id="cancel-verification-btn" class="btn">Cancel</button>
            <button id="confirm-verification-btn" class="btn"></button>
        </div>
    </div>
</dialog>

<script>
    // Handle verify/unverify buttons
    document.addEventListener('DOMContentLoaded', () => {
        // Modal Elements
        const notificationModal = document.getElementById('notification-modal') as HTMLDialogElement;
        const confirmVerificationModal = document.getElementById('confirm-verification-modal') as HTMLDialogElement;
        const notificationTitle = document.getElementById('notification-title');
        const notificationMessage = document.getElementById('notification-message');
        const notificationOkBtn = document.getElementById('notification-ok-btn');
        const verificationTitle = document.getElementById('verification-title');
        const verificationMessage = document.getElementById('verification-message');
        const confirmVerificationBtn = document.getElementById('confirm-verification-btn');
        const cancelVerificationBtn = document.getElementById('cancel-verification-btn');
        
        // Current piano info for verification
        let currentPianoId = '';
        let currentIsVerified = false;
        
        // Helper function to show notification
        const showNotification = (title: string, message: string, isSuccess = true, redirectOnClose: string | null = null) => {
            if (notificationTitle) notificationTitle.textContent = title;
            if (notificationTitle) notificationTitle.className = `font-bold text-lg ${isSuccess ? 'text-success' : 'text-error'}`;
            if (notificationMessage) notificationMessage.textContent = message;
            
            if (redirectOnClose && notificationOkBtn) {
                notificationOkBtn.onclick = () => {
                    notificationModal.close();
                    window.location.href = redirectOnClose;
                };
            } else if (notificationOkBtn) {
                notificationOkBtn.onclick = () => {
                    notificationModal.close();
                };
            }
            
            notificationModal.showModal();
        };
        
        const verifyButtons = document.querySelectorAll('.verify-btn');
        
        verifyButtons.forEach(button => {
            button.addEventListener('click', () => {
                const pianoId = button.getAttribute('data-piano-id');
                const isVerified = button.getAttribute('data-verified') === 'true';
                
                if (!pianoId) return;
                
                // Store piano info for the verification operation
                currentPianoId = pianoId;
                currentIsVerified = isVerified;
                
                // Setup confirmation dialog
                if (verificationTitle) {
                    verificationTitle.textContent = isVerified ? 'Unverify Piano' : 'Verify Piano';
                    verificationTitle.className = `font-bold text-lg ${isVerified ? 'text-warning' : 'text-success'}`;
                }
                
                if (verificationMessage) {
                    verificationMessage.textContent = `Are you sure you want to ${isVerified ? 'unverify' : 'verify'} this piano?`;
                }
                
                if (confirmVerificationBtn) {
                    confirmVerificationBtn.textContent = isVerified ? 'Unverify' : 'Verify';
                    confirmVerificationBtn.className = `btn ${isVerified ? 'btn-warning' : 'btn-success'}`;
                }
                
                // Show confirmation modal
                confirmVerificationModal.showModal();
            });
        });
        
        // Confirm verification button
        if (confirmVerificationBtn) {
            confirmVerificationBtn.addEventListener('click', async () => {
                confirmVerificationModal.close();
                
                try {
                    // Import supabase client
                    const { supabase } = await import('../../../utils/supabase');
                    
                    // Update piano verification status
                    const { error } = await supabase
                        .from('pianos')
                        .update({ 
                            verified: !currentIsVerified,
                            verification_count: currentIsVerified ? 0 : 1
                        })
                        .eq('id', currentPianoId);
                    
                    if (error) {
                        throw error;
                    }
                    
                    // Show success notification and reload page
                    showNotification('Success', `Piano ${currentIsVerified ? 'unverified' : 'verified'} successfully!`, true, window.location.href);
                } catch (error) {
                    console.error('Error updating piano verification:', error);
                    // Handle error with proper type checking
                    if (error instanceof Error) {
                        showNotification('Error', `Error: ${error.message}`, false);
                    } else {
                        showNotification('Error', 'Failed to update piano verification status', false);
                    }
                }
            });
        }
        
        // Cancel verification button
        if (cancelVerificationBtn) {
            cancelVerificationBtn.addEventListener('click', () => {
                confirmVerificationModal.close();
            });
        }
    });
</script>