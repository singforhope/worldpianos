---
import AdminLayout from "../../../layouts/AdminLayout.astro";
import { supabase } from "../../../utils/supabase";

// Get piano ID from URL
const { id } = Astro.params;

// Fetch piano data
const { data: piano, error: pianoError } = await supabase
    .from('pianos')
    .select('*')
    .eq('id', id)
    .single();

// If piano exists, fetch creator info
let creatorInfo = null;
if (piano && piano.created_by) {
    const { data: creator } = await supabase
        .from('user_profiles')
        .select('display_name, email')
        .eq('id', piano.created_by)
        .single();
    
    creatorInfo = creator;
}

// Fetch piano media
const { data: pianoMedia, error: mediaError } = await supabase
    .from('piano_media')
    .select('*')
    .eq('piano_id', id)
    .order('created_at', { ascending: false });

// Fetch piano reports
const { data: pianoReports, error: reportsError } = await supabase
    .from('piano_reports')
    .select('*')
    .eq('piano_id', id)
    .order('created_at', { ascending: false });

// If reports exist, fetch reporter info for each
if (pianoReports && pianoReports.length > 0) {
    for (const report of pianoReports) {
        if (report.user_id) {
            const { data: reporter } = await supabase
                .from('user_profiles')
                .select('display_name, email')
                .eq('id', report.user_id)
                .single();
            
            report.reporter_info = reporter;
        }
    }
}

// Check if piano exists
const notFound = !piano || pianoError;

// Format date for display
const formatDate = (dateString: string | null | undefined) => {
    if (!dateString) return 'N/A';
    return new Date(dateString).toLocaleDateString(undefined, {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
};
---

<AdminLayout>
    <div class="text-sm breadcrumbs mb-6">
        <ul>
            <li><a href="/">Home</a></li>
            <li><a href="/admin/dashboard">Admin Dashboard</a></li>
            <li><a href="/admin/pianos">Manage Pianos</a></li>
            <li>{notFound ? 'Piano Not Found' : piano.name}</li>
        </ul>
    </div>
    
    {notFound ? (
        <div class="alert alert-error">
            <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
            <span>Piano not found or you don't have permission to view it.</span>
        </div>
    ) : (
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Main Piano Information -->
            <div class="lg:col-span-2">
                <div class="card bg-base-100 shadow-xl">
                    <div class="card-body">
                        <div class="flex justify-between items-center">
                            <h1 class="card-title text-2xl">{piano.name}</h1>
                            <div class="flex gap-2">
                                <a href={`/pianos/${id}`} class="btn btn-sm btn-outline" target="_blank">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                    </svg>
                                    View
                                </a>
                                <button id="delete-piano-btn" class="btn btn-sm btn-error">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                    </svg>
                                    Delete
                                </button>
                            </div>
                        </div>
                        
                        <div class="divider"></div>
                        
                        <form id="piano-form">
                            <input type="hidden" name="id" value={piano.id} />
                            
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                <div class="form-control">
                                    <label class="label">
                                        <span class="label-text">Piano Name</span>
                                    </label>
                                    <input type="text" name="name" class="input input-bordered" value={piano.name} required />
                                </div>
                                
                                <div class="form-control">
                                    <label class="label">
                                        <span class="label-text">Piano Type</span>
                                    </label>
                                    <select name="type" class="select select-bordered" required>
                                        <option value="grand" selected={piano.type === 'grand'}>Grand Piano</option>
                                        <option value="upright" selected={piano.type === 'upright'}>Upright Piano</option>
                                        <option value="digital" selected={piano.type === 'digital'}>Digital Piano</option>
                                        <option value="other" selected={piano.type === 'other'}>Other</option>
                                    </select>
                                </div>
                            </div>
                            
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                <div class="form-control">
                                    <label class="label">
                                        <span class="label-text">Location</span>
                                    </label>
                                    <input type="text" name="location" class="input input-bordered" value={piano.location} required />
                                </div>
                                
                                <div class="form-control">
                                    <label class="label">
                                        <span class="label-text">Access</span>
                                    </label>
                                    <select name="access" class="select select-bordered" required>
                                        <option value="public" selected={piano.access === 'public'}>Public</option>
                                        <option value="limited" selected={piano.access === 'limited'}>Limited</option>
                                        <option value="private" selected={piano.access === 'private'}>Private</option>
                                    </select>
                                </div>
                            </div>
                            
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                                <div class="form-control">
                                    <label class="label">
                                        <span class="label-text">City</span>
                                    </label>
                                    <input type="text" name="city" class="input input-bordered" value={piano.city} required />
                                </div>
                                
                                <div class="form-control">
                                    <label class="label">
                                        <span class="label-text">Country</span>
                                    </label>
                                    <input type="text" name="country" class="input input-bordered" value={piano.country} required />
                                </div>
                                
                                <div class="form-control">
                                    <label class="label">
                                        <span class="label-text">Airport Code (if applicable)</span>
                                    </label>
                                    <input type="text" name="airport_code" class="input input-bordered" value={piano.airport_code || ''} />
                                </div>
                            </div>
                            
                            <div class="form-control mb-4">
                                <label class="label">
                                    <span class="label-text">Description</span>
                                </label>
                                <textarea name="description" class="textarea textarea-bordered h-24" required>{piano.description}</textarea>
                            </div>
                            
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                <div class="form-control">
                                    <label class="label">
                                        <span class="label-text">Condition</span>
                                    </label>
                                    <select name="condition" class="select select-bordered" required>
                                        <option value="excellent" selected={piano.condition === 'excellent'}>Excellent</option>
                                        <option value="good" selected={piano.condition === 'good'}>Good</option>
                                        <option value="fair" selected={piano.condition === 'fair'}>Fair</option>
                                        <option value="poor" selected={piano.condition === 'poor'}>Poor</option>
                                    </select>
                                </div>
                                
                                <div class="form-control">
                                    <label class="label">
                                        <span class="label-text">Category</span>
                                    </label>
                                    <select name="category" class="select select-bordered" required>
                                        <option value="street" selected={piano.category === 'street'}>Street Piano</option>
                                        <option value="station" selected={piano.category === 'station'}>Station Piano</option>
                                        <option value="airport" selected={piano.category === 'airport'}>Airport Piano</option>
                                        <option value="mall" selected={piano.category === 'mall'}>Mall Piano</option>
                                        <option value="hotel" selected={piano.category === 'hotel'}>Hotel Piano</option>
                                        <option value="school" selected={piano.category === 'school'}>School Piano</option>
                                        <option value="other" selected={piano.category === 'other'}>Other</option>
                                    </select>
                                </div>
                            </div>
                            
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                <div class="form-control">
                                    <label class="label">
                                        <span class="label-text">Last Maintained</span>
                                    </label>
                                    <input type="date" name="last_maintained" class="input input-bordered" value={piano.last_maintained ? new Date(piano.last_maintained).toISOString().split('T')[0] : ''} />
                                </div>
                                
                                <div class="form-control">
                                    <label class="label">
                                        <span class="label-text">Verification Status</span>
                                    </label>
                                    <div class="flex items-center gap-4 h-12">
                                        <label class="label cursor-pointer">
                                            <input type="checkbox" name="verified" class="toggle toggle-primary" checked={piano.verified} />
                                            <span class="label-text ml-2">{piano.verified ? 'Verified' : 'Unverified'}</span>
                                        </label>
                                        <span class="text-sm opacity-70">Verification Count: {piano.verification_count || 0}</span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="form-control">
                                <label class="label">
                                    <span class="label-text">Coordinates [longitude, latitude]</span>
                                </label>
                                <div class="grid grid-cols-2 gap-4">
                                    <input 
                                        type="number" 
                                        name="longitude" 
                                        class="input input-bordered" 
                                        value={piano.coordinates ? piano.coordinates[0] : ''} 
                                        step="0.000001"
                                        required
                                    />
                                    <input 
                                        type="number" 
                                        name="latitude" 
                                        class="input input-bordered" 
                                        value={piano.coordinates ? piano.coordinates[1] : ''} 
                                        step="0.000001"
                                        required
                                    />
                                </div>
                            </div>
                            
                            <div class="card-actions justify-end mt-6">
                                <button type="submit" class="btn btn-primary">Save Changes</button>
                            </div>
                        </form>
                    </div>
                </div>
                
                <!-- Piano Media -->
                <div class="card bg-base-100 shadow-xl mt-8">
                    <div class="card-body">
                        <h2 class="card-title">Piano Media</h2>
                        
                        {mediaError && (
                            <div class="alert alert-error">
                                <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                                <span>Error loading media: {mediaError.message}</span>
                            </div>
                        )}
                        
                        {!mediaError && (!pianoMedia || pianoMedia.length === 0) && (
                            <div class="alert">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                                <span>No media found for this piano.</span>
                            </div>
                        )}
                        
                        {!mediaError && pianoMedia && pianoMedia.length > 0 && (
                            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mt-4">
                                {pianoMedia.map((media) => (
                                    <div class="card bg-base-200">
                                        <figure class="h-48 overflow-hidden">
                                            {media.media_type.startsWith('image/') ? (
                                                <img src={media.url} alt={media.description || 'Piano image'} class="object-cover w-full h-full" />
                                            ) : media.media_type.startsWith('video/') ? (
                                                <video src={media.url} controls class="object-cover w-full h-full">
                                                    Your browser does not support the video tag.
                                                </video>
                                            ) : (
                                                <div class="flex items-center justify-center w-full h-full bg-base-300">
                                                    <span>Unsupported media type</span>
                                                </div>
                                            )}
                                        </figure>
                                        <div class="card-body p-4">
                                            <p class="text-sm">{media.description || 'No description'}</p>
                                            <div class="card-actions justify-end mt-2">
                                                <button 
                                                    class="btn btn-xs btn-error delete-media-btn" 
                                                    data-media-id={media.id}
                                                >
                                                    Delete
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
            </div>
            
            <!-- Sidebar Information -->
            <div class="lg:col-span-1">
                <!-- Piano Details -->
                <div class="card bg-base-100 shadow-xl mb-8">
                    <div class="card-body">
                        <h2 class="card-title">Piano Details</h2>
                        
                        <div class="divider my-2"></div>
                        
                        <div class="grid grid-cols-2 gap-2">
                            <div class="text-sm opacity-70">Created By:</div>
                            <div>{creatorInfo?.display_name || 'Unknown'}</div>
                            
                            <div class="text-sm opacity-70">Created On:</div>
                            <div>{formatDate(piano.created_at)}</div>
                            
                            <div class="text-sm opacity-70">Last Updated:</div>
                            <div>{formatDate(piano.updated_at)}</div>
                            
                            <div class="text-sm opacity-70">Status:</div>
                            <div>
                                {piano.verified ? (
                                    <span class="badge badge-success">Verified</span>
                                ) : (
                                    <span class="badge badge-warning">Unverified</span>
                                )}
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Piano Reports -->
                <div class="card bg-base-100 shadow-xl">
                    <div class="card-body">
                        <h2 class="card-title">Reports</h2>
                        
                        {reportsError && (
                            <div class="alert alert-error">
                                <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                                <span>Error loading reports: {reportsError.message}</span>
                            </div>
                        )}
                        
                        {!reportsError && (!pianoReports || pianoReports.length === 0) && (
                            <div class="alert alert-success">
                                <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                                <span>No reports for this piano.</span>
                            </div>
                        )}
                        
                        {!reportsError && pianoReports && pianoReports.length > 0 && (
                            <div class="space-y-4 mt-4">
                                {pianoReports.map((report) => (
                                    <div class={`card ${report.status === 'pending' ? 'bg-warning/10' : report.status === 'resolved' ? 'bg-success/10' : 'bg-base-200'}`}>
                                        <div class="card-body p-4">
                                            <div class="flex justify-between items-start">
                                                <h3 class="font-bold">{report.issue_type}</h3>
                                                <span class={`badge ${report.status === 'pending' ? 'badge-warning' : report.status === 'resolved' ? 'badge-success' : 'badge-info'}`}>
                                                    {report.status}
                                                </span>
                                            </div>
                                            <p class="text-sm mt-2">{report.description}</p>
                                            <div class="text-xs opacity-70 mt-2">
                                                Reported by {report.reporter_info?.display_name || 'Anonymous'} on {formatDate(report.created_at)}
                                            </div>
                                            
                                            <div class="card-actions justify-end mt-2">
                                                {report.status === 'pending' && (
                                                    <button 
                                                        class="btn btn-xs btn-success resolve-report-btn" 
                                                        data-report-id={report.id}
                                                    >
                                                        Mark Resolved
                                                    </button>
                                                )}
                                                <button 
                                                    class="btn btn-xs btn-error delete-report-btn" 
                                                    data-report-id={report.id}
                                                >
                                                    Delete
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
            </div>
        </div>
    )}
</AdminLayout>

<script>
    import { supabase } from '../../../utils/supabase';
    
    document.addEventListener('DOMContentLoaded', () => {
        // Piano form submission
        const pianoForm = document.getElementById('piano-form');
        if (pianoForm) {
            pianoForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                
                // Show loading state
                const submitBtn = pianoForm.querySelector('button[type="submit"]') as HTMLButtonElement;
                if (submitBtn) {
                    submitBtn.classList.add('loading');
                    submitBtn.disabled = true;
                }
                
                try {
                    // Get form data
                    const formData = new FormData(pianoForm as HTMLFormElement);
                    const pianoId = formData.get('id');
                    
                    // Build piano data object
                    const pianoData = {
                        name: formData.get('name'),
                        location: formData.get('location'),
                        description: formData.get('description'),
                        type: formData.get('type'),
                        condition: formData.get('condition'),
                        access: formData.get('access'),
                        category: formData.get('category'),
                        city: formData.get('city'),
                        country: formData.get('country'),
                        airport_code: formData.get('airport_code') || null,
                        verified: formData.get('verified') === 'on',
                        coordinates: [
                            parseFloat(formData.get('longitude') as string),
                            parseFloat(formData.get('latitude') as string)
                        ]
                    } as any; // Use any to avoid TypeScript errors with dynamic properties
                    
                    // Add last_maintained if provided
                    const lastMaintained = formData.get('last_maintained') as string;
                    if (lastMaintained) {
                        pianoData.last_maintained = new Date(lastMaintained).toISOString();
                    }
                    
                    // Update piano
                    const { error } = await supabase
                        .from('pianos')
                        .update(pianoData)
                        .eq('id', pianoId);
                    
                    if (error) {
                        throw error;
                    }
                    
                    // Show success message
                    alert('Piano updated successfully!');
                    
                    // Reload page to show updated data
                    window.location.reload();
                } catch (error) {
                    console.error('Error updating piano:', error);
                    
                    // Show error message
                    if (error instanceof Error) {
                        alert(`Error: ${error.message}`);
                    } else {
                        alert('An error occurred while updating the piano.');
                    }
                } finally {
                    // Reset button state
                    if (submitBtn) {
                        submitBtn.classList.remove('loading');
                        submitBtn.disabled = false;
                    }
                }
            });
        }
        
        // Delete piano button
        const deletePianoBtn = document.getElementById('delete-piano-btn');
        if (deletePianoBtn) {
            deletePianoBtn.addEventListener('click', async () => {
                // Confirm deletion
                if (!confirm('Are you sure you want to delete this piano? This action cannot be undone.')) {
                    return;
                }
                
                try {
                    const pianoId = new URLSearchParams(window.location.search).get('id') ||
                                   window.location.pathname.split('/').pop();
                    
                    // First, delete all related media entries to avoid foreign key constraint violations
                    console.log('Deleting related media entries for piano:', pianoId);
                    const { error: mediaDeleteError } = await supabase
                        .from('piano_media')
                        .delete()
                        .eq('piano_id', pianoId);
                    
                    if (mediaDeleteError) {
                        console.error('Error deleting related media:', mediaDeleteError);
                        throw mediaDeleteError;
                    }
                    
                    // Next, delete all related reports
                    console.log('Deleting related reports for piano:', pianoId);
                    const { error: reportsDeleteError } = await supabase
                        .from('piano_reports')
                        .delete()
                        .eq('piano_id', pianoId);
                    
                    if (reportsDeleteError) {
                        console.error('Error deleting related reports:', reportsDeleteError);
                        throw reportsDeleteError;
                    }
                    
                    // Finally, delete the piano itself
                    console.log('Deleting piano:', pianoId);
                    const { error } = await supabase
                        .from('pianos')
                        .delete()
                        .eq('id', pianoId);
                    
                    if (error) {
                        console.error('Error deleting piano:', error);
                        throw error;
                    }
                    
                    // Redirect to pianos list
                    alert('Piano and all related data deleted successfully!');
                    window.location.href = '/admin/pianos';
                } catch (error) {
                    console.error('Error deleting piano:', error);
                    
                    // Show error message
                    if (error instanceof Error) {
                        alert(`Error: ${error.message}`);
                    } else {
                        alert('An error occurred while deleting the piano.');
                    }
                }
            });
        }
        
        // Delete media buttons
        const deleteMediaBtns = document.querySelectorAll('.delete-media-btn');
        deleteMediaBtns.forEach(btn => {
            btn.addEventListener('click', async () => {
                const mediaId = btn.getAttribute('data-media-id');
                if (!mediaId) return;
                
                // Confirm deletion
                if (!confirm('Are you sure you want to delete this media? This action cannot be undone.')) {
                    return;
                }
                
                try {
                    // Delete media
                    const { error } = await supabase
                        .from('piano_media')
                        .delete()
                        .eq('id', mediaId);
                    
                    if (error) {
                        throw error;
                    }
                    
                    // Remove media from DOM
                    const mediaCard = btn.closest('.card');
                    if (mediaCard) {
                        mediaCard.remove();
                    }
                    
                    // Show success message
                    alert('Media deleted successfully!');
                } catch (error) {
                    console.error('Error deleting media:', error);
                    
                    // Show error message
                    if (error instanceof Error) {
                        alert(`Error: ${error.message}`);
                    } else {
                        alert('An error occurred while deleting the media.');
                    }
                }
            });
        });
        
        // Resolve report buttons
        const resolveReportBtns = document.querySelectorAll('.resolve-report-btn');
        resolveReportBtns.forEach(btn => {
            btn.addEventListener('click', async () => {
                const reportId = btn.getAttribute('data-report-id');
                if (!reportId) return;
                
                try {
                    // Update report status
                    const { error } = await supabase
                        .from('piano_reports')
                        .update({ status: 'resolved' })
                        .eq('id', reportId);
                    
                    if (error) {
                        throw error;
                    }
                    
                    // Update UI
                    const reportCard = btn.closest('.card');
                    if (reportCard) {
                        reportCard.classList.remove('bg-warning/10');
                        reportCard.classList.add('bg-success/10');
                        
                        const statusBadge = reportCard.querySelector('.badge');
                        if (statusBadge) {
                            statusBadge.classList.remove('badge-warning');
                            statusBadge.classList.add('badge-success');
                            statusBadge.textContent = 'resolved';
                        }
                        
                        // Remove resolve button
                        btn.remove();
                    }
                    
                    // Show success message
                    alert('Report marked as resolved!');
                } catch (error) {
                    console.error('Error resolving report:', error);
                    
                    // Show error message
                    if (error instanceof Error) {
                        alert(`Error: ${error.message}`);
                    } else {
                        alert('An error occurred while resolving the report.');
                    }
                }
            });
        });
        
        // Delete report buttons
        const deleteReportBtns = document.querySelectorAll('.delete-report-btn');
        deleteReportBtns.forEach(btn => {
            btn.addEventListener('click', async () => {
                const reportId = btn.getAttribute('data-report-id');
                if (!reportId) return;
                
                // Confirm deletion
                if (!confirm('Are you sure you want to delete this report? This action cannot be undone.')) {
                    return;
                }
                
                try {
                    // Delete report
                    const { error } = await supabase
                        .from('piano_reports')
                        .delete()
                        .eq('id', reportId);
                    
                    if (error) {
                        throw error;
                    }
                    
                    // Remove report from DOM
                    const reportCard = btn.closest('.card');
                    if (reportCard) {
                        reportCard.remove();
                    }
                    
                    // Show success message
                    alert('Report deleted successfully!');
                } catch (error) {
                    console.error('Error deleting report:', error);
                    
                    // Show error message
                    if (error instanceof Error) {
                        alert(`Error: ${error.message}`);
                    } else {
                        alert('An error occurred while deleting the report.');
                    }
                }
            });
        });
    });
</script>