---
import MainLayout from "../../layouts/MainLayout.astro";
import { getAllEvents } from "../../utils/dataService";
import type { Event, CalendarEvent } from "../../utils/eventTypes";
import { formatEventsForCalendar } from "../../utils/eventUtils";
import EnhancedCalendarView from "../../components/calendar/EnhancedCalendarView.astro";
import EventForm from "../../components/community/EventForm.astro";

// Fetch events from the database
let events: Event[] = [];
let error: string | null = null;

try {
  console.log("Fetching events from Supabase...");
  events = await getAllEvents();
  console.log("Events fetched from Supabase:", events);
  
  if (events.length === 0) {
    console.warn("No events returned from Supabase");
  } else {
    console.log("Sample event from Supabase:", events[0]);
  }
} catch (err) {
  console.error("Error fetching events:", err);
  error = err instanceof Error ? err.message : "Failed to load events data";
}

// Format events for the calendar
console.log("Formatting events for calendar...");
const formattedEvents = formatEventsForCalendar(events);
console.log("Formatted events:", formattedEvents);

// Filter events for initial display
const now = new Date();
// For testing purposes, consider events in 2024 as upcoming (since we're in 2025)
const upcomingEvents = formattedEvents.filter(event => {
  const eventDate = new Date(event.start);
  // If the event is in 2024, consider it upcoming for demo purposes
  return eventDate.getFullYear() === 2024;
});
const pastEvents = formattedEvents.filter(event => {
  const eventDate = new Date(event.start);
  // If the event is not in 2024, consider it past for demo purposes
  return eventDate.getFullYear() !== 2024;
});

// Serialize events data for client-side use
const serializedEvents = JSON.stringify(formattedEvents);
---

<MainLayout>
  <!-- Add event modal -->
  <dialog id="event-modal" class="modal">
    <div class="modal-box w-11/12 max-w-5xl">
      <form method="dialog">
        <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">âœ•</button>
      </form>
      <h3 class="font-bold text-lg mb-4">Add New Event</h3>
      <EventForm />
    </div>
  </dialog>

  <div class="container mx-auto p-4">
    <div class="card bg-base-100">
      <div class="card-body">
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4">
          <h1 class="card-title text-2xl">Events Calendar</h1>
          <button class="open-event-modal btn btn-primary btn-sm mt-2 sm:mt-0">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5 mr-1"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 4v16m8-8H4"></path>
            </svg>
            Add Event
          </button>
        </div>

        {
          error && (
            <div class="alert alert-error mb-4">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="stroke-current shrink-0 h-6 w-6"
                fill="none"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"
                />
              </svg>
              <span>{error}</span>
            </div>
          )
        }

        {
          !error && events.length === 0 && (
            <div class="alert alert-info mb-4">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-current shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
              <span>No events found. Be the first to add an event!</span>
            </div>
          )
        }

        <!-- Event Type Legend -->
        <div class="mb-4 flex flex-wrap gap-2">
          <span class="font-bold text-sm">Event Types:</span>
          <span class="badge" style="background-color: #FF5722; color: white;">Festival</span>
          <span class="badge" style="background-color: #9C27B0; color: white;">Recital</span>
          <span class="badge" style="background-color: #2196F3; color: white;">Concert</span>
          <span class="badge" style="background-color: #4CAF50; color: white;">Marathon</span>
          <span class="badge" style="background-color: #FFC107; color: white;">Showcase</span>
          <span class="badge" style="background-color: #E91E63; color: white;">Flash Mob</span>
          <span class="badge" style="background-color: #607D8B; color: white;">Other</span>
        </div>

        <!-- No mobile tabs needed anymore -->

        <!-- Split View Container -->
        <div class="flex flex-col lg:flex-row gap-4">
          <!-- Calendar View -->
          <div class="w-full lg:w-3/4 mb-8" id="calendar-view">
            <EnhancedCalendarView events={formattedEvents} />
          </div>
          
          <!-- Events Display with Tabs -->
          <div class="w-full lg:w-1/4" id="events-display">
            <div class="card bg-base-100 shadow-lg">
              <div class="card-body">
                <!-- Tab Navigation -->
                <div class="tabs tabs-boxed mb-4">
                  <a class="tab tab-active" id="upcoming-tab">Upcoming Events</a>
                  <a class="tab" id="past-tab">Past Events</a>
                </div>
                
                <!-- Upcoming Events Tab Content -->
                <div id="upcoming-events-content" class="h-[500px] overflow-y-auto pr-2">
                  {upcomingEvents.length === 0 ? (
                    <div class="alert alert-info">
                      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-current shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                      <span>No upcoming events found</span>
                    </div>
                  ) : (
                    <div class="grid grid-cols-1 gap-4">
                      {upcomingEvents.map(event => (
                        <div class="card bg-base-200 shadow-sm border-l-4" style={`border-color: ${event.color};`}>
                          <div class="card-body p-1.5">
                            <div class="flex justify-between items-start">
                              <div class="flex-1">
                                <div class="flex items-center gap-1.5">
                                  <h3 class="font-medium text-sm line-clamp-1">{event.title}</h3>
                                  <span class="badge badge-xs" style={`background-color: ${event.color}; color: white;`}>{event.type}</span>
                                </div>
                                
                                <div class="grid grid-cols-2 gap-x-1 mt-0.5">
                                  <div class="flex items-center text-xs opacity-70">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-2.5 w-2.5 mr-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                    </svg>
                                    <span class="whitespace-nowrap">
                                      {new Date(event.start).toLocaleDateString("en-US", {
                                        month: "short",
                                        day: "numeric"
                                      })}
                                    </span>
                                  </div>
                                  
                                  <div class="flex items-center text-xs opacity-70">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-2.5 w-2.5 mr-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                    <span class="whitespace-nowrap">
                                      {new Date(event.start).toLocaleTimeString("en-US", {
                                        hour: "2-digit",
                                        minute: "2-digit"
                                      })}
                                    </span>
                                  </div>
                                </div>
                                
                                <div class="flex items-center text-xs opacity-70 mt-0.5 line-clamp-1">
                                  <svg xmlns="http://www.w3.org/2000/svg" class="h-2.5 w-2.5 mr-0.5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                                  </svg>
                                  <span class="truncate">{event.location}</span>
                                </div>
                              </div>
                              
                              <a href={`/events/${event.id}`} class="btn btn-ghost btn-xs btn-circle ml-1" title="View Details">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                                </svg>
                              </a>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
                
                <!-- Past Events Tab Content (Hidden by default) -->
                <div id="past-events-content" class="hidden h-[500px] overflow-y-auto pr-2">
                  {pastEvents.length === 0 ? (
                    <div class="alert alert-info">
                      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-current shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                      <span>No past events found</span>
                    </div>
                  ) : (
                    <div class="grid grid-cols-1 gap-4">
                      {pastEvents.map(event => (
                        <div class="card bg-base-200 shadow-sm border-l-4 opacity-80" style={`border-color: ${event.color};`}>
                          <div class="card-body p-1.5">
                            <div class="flex justify-between items-start">
                              <div class="flex-1">
                                <div class="flex items-center gap-1.5">
                                  <h3 class="font-medium text-sm line-clamp-1">{event.title}</h3>
                                  <span class="badge badge-xs" style={`background-color: ${event.color}; color: white;`}>{event.type}</span>
                                </div>
                                
                                <div class="grid grid-cols-2 gap-x-1 mt-0.5">
                                  <div class="flex items-center text-xs opacity-70">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-2.5 w-2.5 mr-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                    </svg>
                                    <span class="whitespace-nowrap">
                                      {new Date(event.start).toLocaleDateString("en-US", {
                                        month: "short",
                                        day: "numeric"
                                      })}
                                    </span>
                                  </div>
                                  
                                  <div class="flex items-center text-xs opacity-70">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-2.5 w-2.5 mr-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                    <span class="whitespace-nowrap">
                                      {new Date(event.start).toLocaleTimeString("en-US", {
                                        hour: "2-digit",
                                        minute: "2-digit"
                                      })}
                                    </span>
                                  </div>
                                </div>
                                
                                <div class="flex items-center text-xs opacity-70 mt-0.5 line-clamp-1">
                                  <svg xmlns="http://www.w3.org/2000/svg" class="h-2.5 w-2.5 mr-0.5 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                                  </svg>
                                  <span class="truncate">{event.location}</span>
                                </div>
                              </div>
                              
                              <a href={`/events/${event.id}`} class="btn btn-ghost btn-xs btn-circle ml-1" title="View Details">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-3.5 w-3.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                                </svg>
                              </a>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Hidden element to pass event data to client-side JavaScript -->
  <script id="event-data" type="application/json">{serializedEvents}</script>

  <!-- Add Toastify CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css" />

  <!-- Add Toastify JS -->
  <script is:inline src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
</MainLayout>

<script>
  // TypeScript declarations
  declare global {
    interface Window {
      showToast?: (message: string, type: "success" | "error" | "warning" | "info") => void;
      Toastify: any;
    }
  }
  
  // Handle Add Event button click
  document.addEventListener('DOMContentLoaded', async () => {
    const addEventBtn = document.querySelector('.open-event-modal');
    const eventModal = document.getElementById('event-modal') as HTMLDialogElement;
    
    // Create a showToast function if it doesn't exist
    if (typeof window.showToast !== 'function') {
      window.showToast = function(message: string, type: "success" | "error" | "warning" | "info" = 'info') {
        // Check if Toastify is available
        if (typeof window.Toastify === 'function') {
          window.Toastify({
            text: message,
            duration: 3000,
            close: true,
            gravity: "top",
            position: "right",
            className: `toastify-${type}`,
            style: {
              background: type === "success" ? "#36d399" : 
                        type === "error" ? "#f87272" : 
                        type === "warning" ? "#fbbd23" : "#3abff8",
              borderRadius: "8px",
              boxShadow: "0 4px 6px rgba(0, 0, 0, 0.1)"
            }
          }).showToast();
        } else {
          // Fallback to alert if Toastify is not available
          console.log(`Toast (${type}): ${message}`);
        }
      };
    }
    
    // Function to handle the Add Event button click
    const handleAddEventClick = async (e: Event) => {
      e.preventDefault(); // Prevent default button behavior
      
      try {
        // Import auth from utils
        const { auth } = await import('../../utils/auth');
        
        // Check if user is authenticated
        const isAuthenticated = await auth.isAuthenticated();
        
        if (isAuthenticated) {
          // If authenticated, show the modal
          if (eventModal) {
            eventModal.showModal();
          }
        } else {
          // If not authenticated, redirect to the login page
          // Store the return URL so user can be redirected back after login
          localStorage.setItem('returnTo', '/events');
          window.location.href = '/auth?message=Please log in to add an event';
        }
      } catch (error) {
        console.error('Error checking authentication:', error);
        // Default to login page if there's an error
        localStorage.setItem('returnTo', '/events');
        window.location.href = '/auth?message=Please log in to add an event';
      }
    };
    
    // Add click event listener to the button
    if (addEventBtn) {
      addEventBtn.addEventListener('click', handleAddEventClick);
    }
    
    // Listen for messages from the iframe or modal
    window.addEventListener('message', (event) => {
      if (event.data && event.data.type === 'event-added') {
        console.log('Event added:', event.data);
        
        // Show success toast
        if (window.showToast) {
          window.showToast(`Event "${event.data.eventName}" added successfully!`, 'success');
        }
        
        // Redirect to the event details page instead of reloading
        if (event.data.eventId) {
          setTimeout(() => {
            window.location.href = `/events/${event.data.eventId}`;
          }, 1000);
        }
      }
    });
    
    // Tab switching for events
    const upcomingTab = document.getElementById("upcoming-tab");
    const pastTab = document.getElementById("past-tab");
    const upcomingEventsContent = document.getElementById("upcoming-events-content");
    const pastEventsContent = document.getElementById("past-events-content");

    // Function to handle tab switching
    function switchTab(activeTab: HTMLElement, inactiveTab: HTMLElement, activeContent: HTMLElement, inactiveContent: HTMLElement) {
      // Update tab classes
      activeTab.classList.add("tab-active");
      inactiveTab.classList.remove("tab-active");
      
      // Show/hide content
      activeContent.classList.remove("hidden");
      inactiveContent.classList.add("hidden");
    }

    // Add click event listeners to tabs
    if (upcomingTab && pastTab && upcomingEventsContent && pastEventsContent) {
      upcomingTab.addEventListener("click", () => {
        switchTab(upcomingTab, pastTab, upcomingEventsContent, pastEventsContent);
      });
      
      pastTab.addEventListener("click", () => {
        switchTab(pastTab, upcomingTab, pastEventsContent, upcomingEventsContent);
      });
    }
    
    // Listen for event tab changes
    document.addEventListener('event-tab-changed', (e: any) => {
      const type = e.detail.type;
      console.log(`Event tab changed to: ${type}`);
      
      // You could update the URL or perform other actions here
    });
  });
</script>
