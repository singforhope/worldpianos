---
import MainLayout from "../../layouts/MainLayout.astro";
import { getAllPianos } from "../../utils/dataService";
import type { Piano } from "../../utils/dataService";

let pianos: Piano[] = [];
let error: string | null = null;

try {
  pianos = await getAllPianos();
} catch (err) {
  console.error("Error fetching pianos:", err);
  error = err instanceof Error ? err.message : "Failed to load piano data";
}

// Group pianos by category
const airportPianos = pianos.filter(piano => piano.category === "airport");
const cityPianos = pianos.filter(piano => piano.category === "city");
const otherPianos = pianos.filter(piano => piano.category !== "airport" && piano.category !== "city");
---

<MainLayout>
    <div class="container mx-auto p-4">
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4">
            <h1 class="text-3xl font-bold mb-4">Pianos Directory</h1>
            <button class="open-piano-modal btn btn-primary">
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-5 w-5 mr-1"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M12 4v16m8-8H4"></path>
                </svg>
                Add Piano
            </button>
        </div>

        {
            error && (
                <div class="alert alert-error mb-4">
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="stroke-current shrink-0 h-6 w-6"
                        fill="none"
                        viewBox="0 0 24 24"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"
                        />
                    </svg>
                    <span>{error}</span>
                </div>
            )
        }

        {
            !error && pianos.length === 0 && (
                <div class="flex justify-center items-center h-64">
                    <div class="loading loading-spinner loading-lg"></div>
                </div>
            )
        }

        <div class="tabs tabs-boxed mb-4">
            <a class="tab tab-active" data-tab="all">All Pianos ({pianos.length})</a>
            <a class="tab" data-tab="airport">Airport Pianos ({airportPianos.length})</a>
            <a class="tab" data-tab="city">City Pianos ({cityPianos.length})</a>
            {otherPianos.length > 0 && <a class="tab" data-tab="other">Other ({otherPianos.length})</a>}
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4" id="pianos-container">
            {pianos.map(piano => (
                <div class="card bg-base-100 shadow-xl piano-card" data-category={piano.category}>
                    <div class="card-body">
                        <h2 class="card-title">{piano.name}</h2>
                        <p class="text-sm text-base-content/70">{piano.location}</p>
                        <div class="flex flex-wrap gap-2 mt-2">
                            <div class="badge badge-primary">
                                {piano.type}
                            </div>
                            <div class="badge badge-success">
                                {piano.condition}
                            </div>
                            <div class="badge badge-info">
                                {piano.category}
                            </div>
                            {piano.verified && (
                                <div class="badge badge-secondary">
                                    Verified
                                </div>
                            )}
                        </div>
                        <div class="card-actions justify-end mt-4">
                            <a href={`/pianos/${piano.id}`} class="btn btn-primary btn-sm">View Details</a>
                        </div>
                    </div>
                </div>
            ))}
        </div>
    </div>
    
    <!-- Add Toastify CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css" />

    <!-- Add Toastify JS -->
    <script is:inline src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
</MainLayout>

<script>
    // Type definitions for TypeScript
    declare global {
        interface Window {
            showToast?: (message: string, type?: string) => void;
            Toastify: any;
        }
    }

    // Tab switching functionality
    document.addEventListener('DOMContentLoaded', () => {
        const tabs = document.querySelectorAll('.tab');
        const pianoCards = document.querySelectorAll('.piano-card');
        const addPianoBtn = document.querySelector('.open-piano-modal');
        
        // Create a showToast function if it doesn't exist
        if (typeof window.showToast !== 'function') {
            window.showToast = function(message, type = 'info') {
                // Check if Toastify is available
                if (typeof window.Toastify === 'function') {
                    window.Toastify({
                        text: message,
                        duration: 3000,
                        close: true,
                        gravity: "top",
                        position: "right",
                        className: `toastify-${type}`,
                        style: {
                            background: type === "success" ? "#36d399" : 
                                       type === "error" ? "#f87272" : 
                                       type === "warning" ? "#fbbd23" : "#3abff8",
                            borderRadius: "8px",
                            boxShadow: "0 4px 6px rgba(0, 0, 0, 0.1)"
                        }
                    }).showToast();
                } else {
                    // Fallback to alert if Toastify is not available
                    console.log(`Toast (${type}): ${message}`);
                }
            };
        }
        
        // Handle authentication for add piano button
        if (addPianoBtn) {
            addPianoBtn.addEventListener('click', async (e) => {
                try {
                    // Prevent default button behavior
                    e.preventDefault();
                    
                    // Import auth from utils
                    const { auth } = await import('../../utils/auth');
                    
                    // Check if user is authenticated
                    const isAuthenticated = await auth.isAuthenticated();
                    
                    if (!isAuthenticated) {
                        // If not authenticated, redirect to the login page
                        // Store the return URL so user can be redirected back after login
                        localStorage.setItem('returnTo', '/pianos');
                        window.location.href = '/auth?message=Please log in to add a piano';
                    }
                    // If authenticated, the MainLayout script will handle the modal display
                    
                } catch (error) {
                    console.error('Error checking authentication:', error);
                    // Default to login page if there's an error
                    localStorage.setItem('returnTo', '/pianos');
                    window.location.href = '/auth?message=Please log in to add a piano';
                }
            });
        }
        
        // Listen for messages from the iframe or modal
        window.addEventListener('message', (event) => {
            if (event.data && event.data.type === 'piano-added') {
                console.log('Piano added:', event.data);
                
                // Show success toast
                if (window.showToast) {
                    window.showToast(`Piano "${event.data.pianoName}" added successfully!`, 'success');
                }
                
                // Reload the page to show the new piano
                window.location.reload();
            }
        });

        tabs.forEach(tab => {
            tab.addEventListener('click', () => {
                // Update active tab
                tabs.forEach(t => t.classList.remove('tab-active'));
                tab.classList.add('tab-active');

                // Filter pianos
                const category = tab.getAttribute('data-tab');
                
                pianoCards.forEach(card => {
                    if (category === 'all') {
                        (card as HTMLElement).style.display = 'block';
                    } else if (category === 'other') {
                        const cardCategory = card.getAttribute('data-category');
                        (card as HTMLElement).style.display = (cardCategory !== 'airport' && cardCategory !== 'city') ? 'block' : 'none';
                    } else {
                        (card as HTMLElement).style.display = card.getAttribute('data-category') === category ? 'block' : 'none';
                    }
                });
            });
        });
    });
</script>