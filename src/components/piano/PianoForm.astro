---
// PianoForm.astro
// Access environment variables via import.meta.env
const contactEmail = import.meta.env.PUBLIC_CONTACT_EMAIL || "it@singforhope.org";

interface Props {
  formTitle?: string;
}

const { formTitle = "Add a New Piano" } = Astro.props;
---

<!-- Load Mapbox GL JS and Geocoder from CDN -->
<link href="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.css" rel="stylesheet">
<script src="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.js"></script>
<script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.min.js"></script>
<link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.css">

<div class="card bg-base-100 shadow-xl">
  <div class="card-body">
    <h2 class="card-title text-2xl mb-6">{formTitle}</h2>
    
    <form id="piano-form" class="space-y-6" enctype="multipart/form-data">
      <!-- Piano Name -->
      <div class="form-control w-full">
        <label for="piano-name" class="label">
          <span class="label-text">Name of Piano</span>
          <span class="label-text-alt text-error">*</span>
        </label>
        <input type="text" id="piano-name" name="pianoName" placeholder="Enter piano name" class="input input-bordered w-full" required />
      </div>
      
      <!-- Location -->
      <div class="form-control w-full">
        <label for="location-container" class="label">
          <span class="label-text">Location</span>
          <span class="label-text-alt text-error">*</span>
        </label>
        <div id="location-geocoder-container"></div>
        <input type="hidden" id="location-lat" name="latitude" />
        <input type="hidden" id="location-lng" name="longitude" />
      </div>
      
      <!-- Last Maintained Date -->
      <div class="form-control w-full">
        <label for="maintained-date" class="label">
          <span class="label-text">Last Maintained Date</span>
        </label>
        <input type="date" id="maintained-date" name="maintainedDate" class="input input-bordered w-full" />
      </div>
      
      <!-- Picture Upload -->
      <div class="form-control w-full">
        <label for="piano-picture" class="label">
          <span class="label-text">Piano Picture</span>
        </label>
        <input type="file" id="piano-picture" name="pianoPicture" accept="image/*" class="file-input file-input-bordered w-full" />
        <div class="mt-2">
          <div id="image-preview" class="hidden mt-2">
            <img id="preview-img" src="" alt="Preview" class="max-h-48 rounded-lg" />
            <button type="button" id="remove-image" class="btn btn-sm btn-error mt-2">Remove</button>
          </div>
        </div>
      </div>
      
      <!-- Additional Notes -->
      <div class="form-control w-full">
        <label for="notes" class="label">
          <span class="label-text">Additional Notes</span>
        </label>
        <textarea id="notes" name="notes" placeholder="Any additional information about this piano" class="textarea textarea-bordered w-full h-24"></textarea>
      </div>
      
      <!-- Form Status Messages -->
      <div id="form-status" class="hidden alert mt-4"></div>
      
      <!-- Submit Button -->
      <div class="form-control mt-6">
        <button type="submit" id="submit-btn" class="btn btn-primary">
          <span id="submit-text">Submit</span>
          <span id="loading-spinner" class="loading loading-spinner hidden"></span>
        </button>
      </div>
    </form>
  </div>
</div>

<script is:inline define:vars={{ contactEmail }}>
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("piano-form");
    const fileInput = document.getElementById("piano-picture");
    const imagePreview = document.getElementById("image-preview");
    const previewImg = document.getElementById("preview-img");
    const removeImageBtn = document.getElementById("remove-image");
    const formStatus = document.getElementById("form-status");
    const submitBtn = document.getElementById("submit-btn");
    const submitText = document.getElementById("submit-text");
    const loadingSpinner = document.getElementById("loading-spinner");
    const geocoderContainer = document.getElementById("location-geocoder-container");
    const locationLat = document.getElementById("location-lat");
    const locationLng = document.getElementById("location-lng");
    
    // Initialize Mapbox Geocoder for location
    if (geocoderContainer && window.mapboxgl && window.MapboxGeocoder) {
      const geocoder = new MapboxGeocoder({
        accessToken: "pk.eyJ1Ijoic2ZoYWRtaW4iLCJhIjoiY2t6bWZnY2VhNWY0djJwdHZhZnpvY3prbSJ9.5vyd64pGtGwl9YfMNFH9eQ",
        countries: "us,ca,gb,fr,de,it,es,pt,au,nz,jp,kr,cn",
        language: "en",
        placeholder: "Search for a location...",
        types: "place,locality,neighborhood,address",
        bbox: [-180, -90, 180, 90],
        limit: 5,
        minLength: 2,
        flyTo: false,
        marker: false,
        mapboxgl: window.mapboxgl,
      });
      
      geocoderContainer.appendChild(geocoder.onAdd());
      
      // Handle geocoder result
      geocoder.on("result", (event) => {
        const result = event.result;
        const coordinates = result.center;
        
        // Set hidden input values for coordinates
        if (locationLat && locationLng) {
          locationLat.setAttribute('value', coordinates[1]); // latitude
          locationLng.setAttribute('value', coordinates[0]); // longitude
        }
      });
    }
    
    // Handle image preview
    if (fileInput) {
      fileInput.addEventListener("change", (e) => {
        const file = e.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = (e) => {
            if (previewImg && imagePreview) {
              previewImg.src = e.target.result;
              imagePreview.classList.remove("hidden");
            }
          };
          reader.readAsDataURL(file);
        }
      });
    }
    
    // Handle remove image button
    if (removeImageBtn) {
      removeImageBtn.addEventListener("click", () => {
        if (fileInput && imagePreview) {
          fileInput.value = "";
          imagePreview.classList.add("hidden");
        }
      });
    }
    
    // Form submission
    if (form) {
      form.addEventListener("submit", async (e) => {
        e.preventDefault();
        
        // Show loading state
        if (submitBtn && submitText && loadingSpinner) {
          submitBtn.disabled = true;
          submitText.textContent = "Sending...";
          loadingSpinner.classList.remove("hidden");
        }
        
        // Get form data
        const formData = new FormData(form);
        
        try {
          // In a real implementation, you would send this to your backend
          // For this example, we'll simulate sending an email
          await simulateSendEmail(formData, contactEmail);
          
          // Show success message
          showStatus("success", "Piano information submitted successfully! We will review your submission.");
          
          // Reset form
          form.reset();
          if (imagePreview) {
            imagePreview.classList.add("hidden");
          }
        } catch (error) {
          // Show error message
          showStatus("error", "There was an error submitting the form. Please try again.");
          console.error("Form submission error:", error);
        } finally {
          // Reset button state
          if (submitBtn && submitText && loadingSpinner) {
            submitBtn.disabled = false;
            submitText.textContent = "Submit";
            loadingSpinner.classList.add("hidden");
          }
        }
      });
    }
    
    // Helper function to show status messages
    function showStatus(type, message) {
      if (formStatus) {
        formStatus.textContent = message;
        formStatus.classList.remove("hidden", "alert-success", "alert-error");
        formStatus.classList.add(type === "success" ? "alert-success" : "alert-error");
        
        // Scroll to status message
        formStatus.scrollIntoView({ behavior: "smooth", block: "nearest" });
        
        // Hide message after 5 seconds if it's a success message
        if (type === "success") {
          setTimeout(() => {
            formStatus.classList.add("hidden");
          }, 5000);
        }
      }
    }
    
    // Simulate sending an email (in a real app, this would be a server endpoint)
    async function simulateSendEmail(formData, email) {
      // This is a simulation - in a real app, you would send this to your backend
      console.log("Sending form data to:", email);
      
      // Extract form data for logging
      const formDataObj = {};
      formData.forEach((value, key) => {
        formDataObj[key] = value instanceof File ? `File: ${value.name}` : value;
      });
      console.log("Form data:", formDataObj);
      
      // Simulate network delay
      return new Promise((resolve) => {
        setTimeout(resolve, 1500);
      });
    }
  });
</script>

<style>
  /* Mapbox Geocoder styles */
  .mapboxgl-ctrl-geocoder {
    box-shadow: none !important;
    border: 1px solid hsl(var(--bc) / 0.2) !important;
    border-radius: 0.5rem !important;
    background-color: hsl(var(--b1)) !important;
    color: hsl(var(--bc)) !important;
    font-family: inherit !important;
    width: 100% !important;
    min-height: 2.5rem !important;
  }

  .mapboxgl-ctrl-geocoder .suggestions {
    background-color: hsl(var(--b1)) !important;
    border: 1px solid hsl(var(--bc) / 0.2) !important;
    border-radius: 0.5rem !important;
    margin-top: 0.5rem !important;
  }

  .mapboxgl-ctrl-geocoder .suggestions .suggestion {
    padding: 0.5rem 1rem !important;
    color: hsl(var(--bc)) !important;
  }

  .mapboxgl-ctrl-geocoder .suggestions .suggestion.active {
    background-color: hsl(var(--b2)) !important;
  }

  .mapboxgl-ctrl-geocoder .suggestions .suggestion:hover {
    background-color: hsl(var(--b2)) !important;
  }

  .mapboxgl-ctrl-geocoder .suggestions .suggestion .address {
    color: hsl(var(--bc) / 0.7) !important;
  }
</style>