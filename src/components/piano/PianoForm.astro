---
// PianoForm.astro
// Import Supabase client for server-side use if needed
import { supabase } from '../../utils/supabase';
import LocationPicker from '../community/LocationPicker.astro';
import { auth, profile } from '../../utils/auth';

// Authentication is now properly implemented
const DEVELOPMENT_MODE = false; // No longer bypassing authentication
const SERVICE_ROLE_KEY = ''; // Not using service role key anymore

// Access environment variables via import.meta.env
const contactEmail = import.meta.env.PUBLIC_CONTACT_EMAIL || "it@singforhope.org";

// Check if the form is being displayed in a modal
const isModal = Astro.url.searchParams.get('modal') === 'true';

interface Props {
  formTitle?: string;
  isModal?: boolean;
}

const { formTitle = "Add a New Piano", isModal: propsIsModal = false } = Astro.props;

// Use either the URL parameter or the prop to determine if it's in a modal
const displayInModal = isModal || propsIsModal;
---

{DEVELOPMENT_MODE && (
  <div class="alert alert-warning mb-4">
    <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" /></svg>
    <div>
      <h3 class="font-bold">Development Mode</h3>
      <div class="text-xs">Authentication is bypassed. This should NOT be used in production!</div>
    </div>
  </div>
)}

<div class="card bg-base-100 shadow-xl">
  <div class="card-body">
    <form id="piano-form" class="space-y-6" enctype="multipart/form-data">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <!-- Piano Name -->
        <div class="form-control w-full">
          <label for="piano-name" class="label">
            <span class="label-text font-medium">Name of Piano</span>
            <span class="label-text-alt text-error">*</span>
          </label>
          <input type="text" id="piano-name" name="pianoName" placeholder="Enter piano name" class="input input-bordered w-full" required />
        </div>
        
        <!-- Piano Type -->
        <div class="form-control w-full">
          <label for="piano-type" class="label">
            <span class="label-text font-medium">Piano Type</span>
            <span class="label-text-alt text-error">*</span>
          </label>
          <select id="piano-type" name="pianoType" class="select select-bordered w-full" required>
            <option value="" disabled selected>Select piano type</option>
            <option value="Grand">Grand</option>
            <option value="Upright">Upright</option>
            <option value="Digital">Digital</option>
            <option value="Other">Other</option>
          </select>
        </div>
      </div>
      
      <!-- Location -->
      <LocationPicker id="piano-location" label="Location" required={true} />
      
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mt-4">
        <!-- Condition -->
        <div class="form-control w-full">
          <label for="condition" class="label">
            <span class="label-text font-medium">Condition</span>
            <span class="label-text-alt text-error">*</span>
          </label>
          <select id="condition" name="condition" class="select select-bordered w-full" required>
            <option value="" disabled selected>Select condition</option>
            <option value="Excellent">Excellent</option>
            <option value="Good">Good</option>
            <option value="Fair">Fair</option>
            <option value="Poor">Poor</option>
            <option value="Unknown">Unknown</option>
          </select>
        </div>
        
        <!-- Access -->
        <div class="form-control w-full">
          <label for="access" class="label">
            <span class="label-text font-medium">Access</span>
            <span class="label-text-alt text-error">*</span>
          </label>
          <select id="access" name="access" class="select select-bordered w-full" required>
            <option value="" disabled selected>Select access type</option>
            <option value="Public">Public</option>
            <option value="Limited">Limited</option>
            <option value="Private">Private</option>
          </select>
        </div>
        
        <!-- Category -->
        <div class="form-control w-full">
          <label for="category" class="label">
            <span class="label-text font-medium">Category</span>
            <span class="label-text-alt text-error">*</span>
          </label>
          <select id="category" name="category" class="select select-bordered w-full" required>
            <option value="" disabled selected>Select category</option>
            <option value="Street">Street</option>
            <option value="Airport">Airport</option>
            <option value="Station">Station</option>
            <option value="Park">Park</option>
            <option value="Mall">Mall</option>
            <option value="School">School</option>
            <option value="Other">Other</option>
          </select>
        </div>
      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4">
        <!-- Last Maintained Date -->
        <div class="form-control w-full">
          <label for="maintained-date" class="label">
            <span class="label-text font-medium">Last Maintained Date</span>
          </label>
          <input type="date" id="maintained-date" name="maintainedDate" class="input input-bordered w-full" />
        </div>
        
        <!-- Picture Upload -->
        <div class="form-control w-full">
          <label for="piano-picture" class="label">
            <span class="label-text font-medium">Piano Picture</span>
          </label>
          <input type="file" id="piano-picture" name="pianoPicture" accept="image/*" class="file-input file-input-bordered w-full" />
          <div class="mt-2">
            <div id="image-preview" class="hidden mt-2">
              <img id="preview-img" src="" alt="Preview" class="max-h-48 rounded-lg" />
              <button type="button" id="remove-image" class="btn btn-sm btn-error mt-2">Remove</button>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Additional Notes -->
      <div class="form-control w-full mt-4">
        <label for="notes" class="label">
          <span class="label-text font-medium">Additional Notes</span>
        </label>
        <textarea id="notes" name="notes" placeholder="Any additional information about this piano" class="textarea textarea-bordered w-full h-24"></textarea>
      </div>
      
      <!-- Form Status Messages -->
      <div id="form-status" class="hidden alert mt-4"></div>
      
      <!-- Submit Button -->
      <div class="form-control mt-8">
        <button type="submit" id="submit-btn" class="btn btn-primary btn-lg w-full md:w-1/3 mx-auto">
          <span id="submit-text">Submit Piano</span>
          <span id="loading-spinner" class="loading loading-spinner hidden"></span>
        </button>
      </div>
    </form>
  </div>
</div>

<!-- No need to load Supabase from CDN as it's already imported -->

<!-- Add Toastify CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css" />

<!-- Add Toastify JS -->
<script is:inline src="https://cdn.jsdelivr.net/npm/toastify-js"></script>

<!-- Auth utilities script -->
<script>
  // Import auth and profile directly (not dynamically)
  import { auth, profile } from '../../utils/auth';
  
  // Add TypeScript declaration to extend window interface
  interface WindowWithAuth extends Window {
    worldPianosAuth?: {
      auth: typeof auth;
      profile: typeof profile;
    }
  }
  
  // Expose auth utilities to the window for use in the inline script
  (window as WindowWithAuth).worldPianosAuth = { auth, profile };
</script>

<script is:inline define:vars={{ contactEmail, displayInModal }}>
  // Use the global supabaseClient that's set by SupabaseClient.astro
  let supabase;
  
  // Make displayInModal available to the client-side script
  console.log('Display in modal:', displayInModal);
  
  // Create global static flags to prevent duplicate submissions across multiple form instances
  // Use window object to ensure they're shared across all instances
  if (typeof window !== 'undefined') {
    // Initialize global flags if they don't exist
    window.worldPianosGlobals = window.worldPianosGlobals || {};
    window.worldPianosGlobals.pianoFormState = window.worldPianosGlobals.pianoFormState || {
      isSubmitting: false,
      formSubmitted: false,
      pianoCreated: false,
      submittedPianoId: null,
      lastSubmissionTime: 0
    };
    
    // Create a global toast manager to avoid duplicate toast notifications
    window.worldPianosGlobals.toastManager = window.worldPianosGlobals.toastManager || {
      activeToasts: {},
      showToast: function(message, type = "success") {
        // Make sure Toastify is available
        if (typeof Toastify !== 'function') {
          console.error('Toastify not loaded');
          return;
        }
        
        // Generate a hash for the message to use as ID
        const messageId = message.split(' ').join('_').toLowerCase();
        
        // Check if a toast with this ID is already active
        if (this.activeToasts[messageId]) {
          console.log('Toast already visible, not showing duplicate:', message);
          return;
        }
        
        // Mark this toast as active
        this.activeToasts[messageId] = true;
        
        Toastify({
          text: message,
          duration: 3000,
          close: true,
          gravity: "top",
          position: "right",
          className: `toastify-${type}`,
          style: {
            background: type === "success" ? "#36d399" : "#f87272",
            borderRadius: "8px",
            boxShadow: "0 4px 6px rgba(0, 0, 0, 0.1)",
            fontSize: "14px",
            fontWeight: "500"
          },
          // Cleanup when toast is removed
          callback: function() {
            setTimeout(() => {
              window.worldPianosGlobals.toastManager.activeToasts[messageId] = false;
            }, 500);
          }
        }).showToast();
      }
    };
    
    console.log('PianoForm global state initialized:', window.worldPianosGlobals.pianoFormState);
  }

  // Function to initialize the form when Supabase is ready
  function initPianoForm() {
    if (window.supabaseClient) {
      console.log('PianoForm: Supabase client found');
      supabase = window.supabaseClient;
    } else {
      console.log('PianoForm: Waiting for Supabase client...');
      // Wait for the supabase-ready event
      window.addEventListener('supabase-ready', function() {
        console.log('PianoForm: Supabase client is now ready');
        supabase = window.supabaseClient;
      });
    }
  }
  
  // Initialize the form
  initPianoForm();
  
  // Function to ensure auth utilities are available
  function ensureAuthUtilities(maxAttempts = 10, interval = 300) {
    return new Promise((resolve, reject) => {
      let attempts = 0;
      
      const checkAuth = () => {
        if (window.worldPianosAuth && window.worldPianosAuth.auth && window.worldPianosAuth.profile) {
          console.log('Auth utilities found on window');
          resolve(window.worldPianosAuth);
        } else {
          attempts++;
          if (attempts >= maxAttempts) {
            console.error('Auth utilities not found after', maxAttempts, 'attempts');
            reject(new Error('Auth utilities not found on window after multiple attempts'));
          } else {
            console.log(`Auth utilities not found, retrying (${attempts}/${maxAttempts})...`);
            setTimeout(checkAuth, interval);
          }
        }
      };
      
      checkAuth();
    });
  }
  
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("piano-form");
    const fileInput = document.getElementById("piano-picture");
    const imagePreview = document.getElementById("image-preview");
    const previewImg = document.getElementById("preview-img");
    const removeImageBtn = document.getElementById("remove-image");
    const formStatus = document.getElementById("form-status");
    const submitBtn = document.getElementById("submit-btn");
    const submitText = document.getElementById("submit-text");
    const loadingSpinner = document.getElementById("loading-spinner");
    // We're now using the LocationPicker component, so we don't need to initialize the geocoder here
    
    // Handle image preview
    if (fileInput) {
      fileInput.addEventListener("change", (e) => {
        const file = e.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = (e) => {
            if (previewImg && imagePreview) {
              previewImg.src = e.target.result;
              imagePreview.classList.remove("hidden");
            }
          };
          reader.readAsDataURL(file);
        }
      });
    }
    
    // Handle remove image button
    if (removeImageBtn) {
      removeImageBtn.addEventListener("click", () => {
        if (fileInput && imagePreview) {
          fileInput.value = "";
          imagePreview.classList.add("hidden");
        }
      });
    }
    
    // Form submission
    if (form) {
      form.addEventListener("submit", async (e) => {
        e.preventDefault();
        
        // Show loading state
        if (submitBtn && submitText && loadingSpinner) {
          submitBtn.disabled = true;
          submitText.textContent = "Sending...";
          loadingSpinner.classList.remove("hidden");
        }
        
        // Get form data
        const formData = new FormData(form);
        
        try {
          // Check if location is selected
          const lat = document.getElementById("piano-location-lat")?.value ||
                      document.getElementById("piano-location-lat")?.getAttribute('value');
          const lng = document.getElementById("piano-location-lng")?.value ||
                      document.getElementById("piano-location-lng")?.getAttribute('value');
          
          if (!lat || !lng) {
            console.error('Location not selected');
            window.worldPianosGlobals.toastManager.showToast("Please select a location using the map.", "error");
            throw new Error('Location not selected');
          }
          
          console.log('Location coordinates:', { lat, lng });
          
          // Create piano object from form data
          // Generate a unique ID for the piano
          const uniqueId = `piano_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;
          console.log('Generated unique ID:', uniqueId);
          
          const pianoData = {
            id: uniqueId, // Add unique ID for the primary key
            name: formData.get('pianoName'),
            location: document.getElementById("piano-location-address")?.value || 'Unknown location',
            coordinates: [
              parseFloat(lng),
              parseFloat(lat)
            ],
            description: formData.get('notes') || '',
            type: formData.get('pianoType'),
            condition: formData.get('condition'),
            access: formData.get('access'),
            last_maintained: formData.get('maintainedDate') || null,
            category: formData.get('category'),
            country: document.getElementById("piano-location-country")?.value || 'Unknown',
            city: document.getElementById("piano-location-city")?.value || 'Unknown',
            verified: false,
            created_by: null // Will be set in the authentication check
          };
          
          // Log all form data for debugging
          console.log('Form submission started');
          logFormData(formData);
          
          // Check for authentication using the exposed auth utilities
          try {
            // Use the auth utilities exposed on the window with our helper function
            const { auth, profile } = await ensureAuthUtilities();
            
            // Get the current session
            const session = await auth.getSession();
            
            if (!session) {
              window.worldPianosGlobals.toastManager.showToast("You must be logged in to add a piano.", "error");
              throw new Error('Authentication required');
            }
            
            // Get user ID for tracking who created the piano
            const userId = session.user.id;
            
            // Set the user ID on the pianoData object
            pianoData.created_by = userId;
            
            // Check if admin for certain operations
            const isAdmin = await profile.isAdmin(userId);
            
            // Additional admin-only fields
            if (isAdmin) {
              pianoData.verified = formData.get('verified') === 'true';
            }
          } catch (error) {
            console.error('Authentication error:', error);
            window.worldPianosGlobals.toastManager.showToast("Authentication error. Please try logging in again. You may need to refresh the page.", "error");
            throw new Error('Authentication error');
          }
          
          // Validate all required fields are present
          const requiredFields = ['id', 'name', 'location', 'type', 'condition', 'access', 'category', 'country', 'city'];
          const missingFields = [];
          
          for (const field of requiredFields) {
            if (!pianoData[field]) {
              missingFields.push(field);
            }
          }
          
          if (missingFields.length > 0) {
            console.error('Missing required fields:', missingFields);
            window.worldPianosGlobals.toastManager.showToast("Missing required fields: " + missingFields.join(', '), "error");
            throw new Error(`Missing required fields: ${missingFields.join(', ')}`);
          }
          
          // Validate coordinates
          if (!Array.isArray(pianoData.coordinates) ||
              pianoData.coordinates.length !== 2 ||
              isNaN(pianoData.coordinates[0]) ||
              isNaN(pianoData.coordinates[1])) {
            console.error('Invalid coordinates:', pianoData.coordinates);
            window.worldPianosGlobals.toastManager.showToast("Invalid coordinates. Please select a location using the map.", "error");
            throw new Error('Invalid coordinates');
          }
          
          console.log('Submitting piano data:', pianoData);
          
          // Handle image upload if present
          const imageFile = formData.get('pianoPicture');
          let imageUrl = null;
          
          if (imageFile && imageFile.size > 0) {
            console.log('Uploading image:', imageFile.name);
            
            // Generate a unique file name
            const fileName = `${Date.now()}-${imageFile.name.replace(/[^a-zA-Z0-9.]/g, '_')}`;
            
            try {
              // Upload to Supabase Storage
              const { data: uploadData, error: uploadError } = await supabase.storage
                .from('piano-images')
                .upload(fileName, imageFile);
                
              if (uploadError) {
                console.error('Error uploading image:', uploadError);
                throw uploadError;
              }
              
              // Get public URL
              const { data: urlData } = supabase.storage
                .from('piano-images')
                .getPublicUrl(fileName);
                
              imageUrl = urlData.publicUrl;
              console.log('Image uploaded successfully:', imageUrl);
            } catch (error) {
              console.error('Error handling image upload:', error);
              // Continue with piano creation even if image upload fails
            }
          }
          
          // Insert the piano data into the database
          const { data: insertedPiano, error } = await supabase
            .from('pianos')
            .insert([
              {
                name: pianoData.name,
                type: pianoData.type,
                location: pianoData.location,
                coordinates: pianoData.coordinates,
                condition: pianoData.condition,
                access: pianoData.access,
                category: pianoData.category.toLowerCase(),
                last_maintained: pianoData.last_maintained,
                notes: pianoData.description,
                created_by: pianoData.created_by,
                verified: pianoData.verified
              }
            ])
            .select();
          
          if (error) throw error;
          
          console.log('Piano created successfully:', insertedPiano);
          
          // If we have an image and piano data, store it
          if (imageUrl && insertedPiano && insertedPiano.length > 0) {
            try {
              // Create a piano_media entry
              const { data: mediaData, error: mediaError } = await supabase
                .from('piano_media')
                .insert({
                  piano_id: insertedPiano[0].id,
                  media_type: 'image',
                  url: imageUrl,
                  description: `Primary image for ${insertedPiano[0].name}`
                });
                
              if (mediaError) {
                console.error('Error creating piano media entry:', mediaError);
              } else {
                console.log('Piano media entry created:', mediaData);
              }
            } catch (mediaError) {
              console.error('Error creating piano media entry:', mediaError);
              // Continue even if media creation fails
            }
          }
          
          // Show success toast
          showToast("Piano added successfully!", "success");
          
          // Reset form
          form.reset();
          
          // Reset the image preview
          if (imagePreview) {
            imagePreview.classList.add('hidden');
          }
          
          // Close modals if they exist
          if (displayInModal) {
            console.log('Closing piano modal after successful submission');
            
            // Find the closest parent modal
            const pianoModal = document.getElementById('piano-modal');
            if (pianoModal && 'close' in pianoModal) {
              // Close the modal
              pianoModal.close();
            }
            
            // Notify the parent window if in a modal
            if (window.parent && window.parent !== window) {
              window.parent.postMessage({
                type: 'piano-added',
                pianoId: insertedPiano[0].id,
                pianoName: insertedPiano[0].name
              }, '*');
            }
            
            // Refresh the page to show the new piano
            setTimeout(() => {
              window.location.reload();
            }, 1000);
          } else {
            // Redirect to piano details page after a short delay
            setTimeout(() => {
              window.location.href = `/pianos/${insertedPiano[0].id}`;
            }, 1500);
          }
        } catch (error) {
          // Show detailed error message
          console.error("Form submission error:", error);
          
          let errorMessage = "There was an error submitting the form. Please try again.";
          
          // Provide more specific error messages based on the error type
          if (error.message) {
            if (error.message.includes('Location not selected')) {
              errorMessage = "Please select a location using the map.";
            } else if (error.message.includes('permission') || error.message.includes('access')) {
              errorMessage = "Permission denied. You may need to log in or check your access rights.";
            } else if (error.message.includes('network') || error.message.includes('connection')) {
              errorMessage = "Network error. Please check your internet connection.";
            } else if (error.message.includes('validation')) {
              errorMessage = "Validation error. Please check your form inputs.";
            } else if (error.message.includes('bucket')) {
              errorMessage = "Error with image storage. Please try again or skip adding an image.";
            } else if (error.message.includes('already created')) {
              errorMessage = "A piano was already submitted in this session.";
            }
          }
          
          // Show the error message as a toast
          window.worldPianosGlobals.toastManager.showToast(errorMessage, "error");
          
          // Log detailed error information to console
          console.error("Detailed error:", {
            message: error.message,
            stack: error.stack,
            code: error.code,
            details: error.details
          });
        } finally {
          // Reset button state
          if (submitBtn && submitText && loadingSpinner) {
            submitBtn.disabled = false;
            submitText.textContent = "Submit";
            loadingSpinner.classList.add("hidden");
          }
        }
      });
    }
    
    // Helper function to log form data (for debugging)
    function logFormData(formData) {
      const formDataObj = {};
      formData.forEach((value, key) => {
        formDataObj[key] = value instanceof File ? `File: ${value.name}` : value;
      });
      console.log("Form data:", formDataObj);
    }
  });
</script>