---
// ReportForm.astro
import SupabaseClient from '../community/SupabaseClient.astro';
import { reportPianoIssue } from '../../utils/dataService';
import { showToast } from '../../utils/formUtils';

interface Props {
  pianoName?: string;
  pianoId?: string;
}

const { pianoName = "", pianoId = "" } = Astro.props;
---

<!-- Include the Supabase client -->
<SupabaseClient />

<!-- Add Toastify CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css" />

<!-- Add Toastify JS -->
<script is:inline src="https://cdn.jsdelivr.net/npm/toastify-js"></script>

<div class="card bg-base-100">
  <div class="card-body p-0">
    <form id="report-form" class="space-y-4">
      <!-- Hidden Piano Info -->
      <input type="hidden" id="piano-id" name="piano_id" value={pianoId} />
      
      <!-- Piano Name (Read-only) -->
      <div class="form-control w-full">
        <label for="piano-name" class="label">
          <span class="label-text">Piano Name</span>
        </label>
        <input 
          type="text" 
          id="piano-name" 
          name="pianoName" 
          value={pianoName}
          class="input input-bordered w-full" 
          readonly 
        />
      </div>
      
      <!-- Report Type -->
      <div class="form-control w-full">
        <label for="issue-type" class="label">
          <span class="label-text">Issue Type</span>
          <span class="label-text-alt text-error">*</span>
        </label>
        <select id="issue-type" name="issue_type" class="select select-bordered w-full" required>
          <option value="" disabled selected>Select a reason</option>
          <option value="Incorrect Information">Incorrect Information</option>
          <option value="Piano No Longer Available">Piano No Longer Available</option>
          <option value="Piano Needs Maintenance">Piano Needs Maintenance</option>
          <option value="Inappropriate Content">Inappropriate Content</option>
          <option value="Other">Other</option>
        </select>
      </div>
      
      <!-- Report Details -->
      <div class="form-control w-full">
        <label for="description" class="label">
          <span class="label-text">Description</span>
          <span class="label-text-alt text-error">*</span>
        </label>
        <textarea 
          id="description" 
          name="description" 
          placeholder="Please provide details about the issue..." 
          class="textarea textarea-bordered w-full h-32" 
          required
        ></textarea>
      </div>
      
      <!-- Contact Email (Optional) - This is not in the database schema but we'll keep it for user communication -->
      <div class="form-control w-full">
        <label for="contact-email" class="label">
          <span class="label-text">Your Email (Optional)</span>
          <span class="label-text-alt">If you'd like to be contacted about this report</span>
        </label>
        <input 
          type="email" 
          id="contact-email" 
          name="contactEmail" 
          placeholder="your.email@example.com" 
          class="input input-bordered w-full" 
        />
      </div>
      
      <!-- Submit Button -->
      <div class="form-control mt-6">
        <button type="submit" id="submit-report-btn" class="btn btn-primary">
          Submit Report
        </button>
      </div>
    </form>
  </div>
</div>

<script is:inline>
  // Create a showToastMessage function that uses Toastify
  function showToastMessage(message, type) {
    if (typeof Toastify === 'function') {
      Toastify({
        text: message,
        duration: 3000,
        close: true,
        gravity: 'top',
        position: 'right',
        style: {
          background: type === 'success' ? '#36d399' : 
                      type === 'error' ? '#f87272' : 
                      type === 'warning' ? '#fbbd23' : '#3abff8',
          borderRadius: '8px',
          boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'
        }
      }).showToast();
    } else {
      // Fallback to alert if Toastify is not available
      alert(message);
    }
  }
  
  // Make the function available globally
  window.showToastMessage = showToastMessage;
</script>

<script>
  // Import the reportPianoIssue function from dataService
  import { reportPianoIssue } from '../../utils/dataService';
  
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('report-form') as HTMLFormElement;
    const submitBtn = document.getElementById('submit-report-btn') as HTMLButtonElement;
    
    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // Show loading state
        if (submitBtn) {
          submitBtn.disabled = true;
          submitBtn.innerHTML = '<span class="loading loading-spinner"></span> Sending...';
        }
        
        try {
          // Get form data
          const formData = new FormData(form);
          
          // Get current user ID if available
          let userId = null;
          if (window.supabaseClient) {
            try {
              const { data } = await window.supabaseClient.auth.getUser();
              if (data && data.user) {
                userId = data.user.id;
                console.log('User is authenticated:', userId);
              }
            } catch (authError) {
              console.error('Error getting user:', authError);
            }
          }
          
          // Use the dataService function directly
          const insertedReport = await reportPianoIssue({
            piano_id: formData.get('piano_id') as string,
            issue_type: formData.get('issue_type') as string,
            description: formData.get('description') as string,
            reported_by: userId // Use reported_by instead of user_id
          });
          
          console.log('Report submitted successfully:', insertedReport);
          
          // Handle contact email if provided
          const contactEmail = formData.get('contactEmail');
          if (contactEmail) {
            console.log(`Contact email provided: ${contactEmail} for report ID: ${insertedReport.id}`);
            // In a real implementation, you would send an email notification
            // or store the contact email for follow-up
          }
          
          // Show success message using Toastify
          if (window.showToastMessage) {
            window.showToastMessage('Report submitted successfully!', 'success');
          } else {
            alert('Report submitted successfully!');
          }
          
          const reportModal = document.getElementById('report-modal') as HTMLDialogElement;
          if (reportModal) {
            reportModal.close();
          }
          
          // Reset form
          form.reset();
        } catch (error) {
          // Show error message using Toastify
          if (window.showToastMessage) {
            window.showToastMessage('There was an error submitting the report. Please try again.', 'error');
          } else {
            alert('There was an error submitting the report. Please try again.');
          }
          console.error('Form submission error:', error);
        } finally {
          // Reset button state
          if (submitBtn) {
            submitBtn.disabled = false;
            submitBtn.textContent = 'Submit Report';
          }
        }
      });
    }
  });
</script>

<script>
  // Add TypeScript interface for the global window object
  declare global {
    interface Window {
      supabaseClient: any;
      showToastMessage: (message: string, type: string) => void;
    }
  }
</script>