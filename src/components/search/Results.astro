---
import mockData from "../../data/mockData.json";

interface Props {
    isVisible: boolean;
    searchQuery?: string;
    searchType?: string;
}

const { isVisible, searchQuery = "", searchType = "pianos" } = Astro.props;

// Get the current search type from URL or props
const urlParams = new URLSearchParams(Astro.url.search);
const currentType = urlParams.get("type") || searchType;

// Filter pianos based on search query
const filteredPianos = currentType === "pianos" ? mockData.pianos.filter(
    (piano) =>
        piano.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        piano.location.toLowerCase().includes(searchQuery.toLowerCase()),
) : [];

// Filter events based on search query
const filteredEvents = currentType === "events" ? mockData.events.filter(
    (event) =>
        event.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        event.location.toLowerCase().includes(searchQuery.toLowerCase()),
) : [];

// Check if there are more results
const hasMorePianos = filteredPianos.length > 3;
const hasMoreEvents = filteredEvents.length > 3;
---

<div
    class={`search-results absolute top-full left-0 right-0 bg-base-100 shadow-lg rounded-b-lg border-t border-base-300 z-50 transition-all duration-200 ease-out ${isVisible ? "opacity-100 translate-y-0" : "opacity-0 -translate-y-2 pointer-events-none"}`}
>
    <!-- Pianos Section -->
    {
        currentType === "pianos" && filteredPianos.length > 0 && (
            <div class="p-4">
                <h3 class="text-lg font-semibold mb-3">Pianos</h3>
                <div id="pianos-container" class="space-y-2">
                    {filteredPianos.map((piano, index) => (
                        <a
                            href={`/pianos/${piano.id}`}
                            class={`piano-item flex items-center gap-3 p-2 hover:bg-base-200 rounded-lg transition-colors ${index >= 3 ? 'hidden' : ''}`}
                            data-index={index}
                        >
                            <div class="w-12 h-12 bg-base-200 rounded-lg flex items-center justify-center">
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    class="h-6 w-6 text-primary"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke="currentColor"
                                >
                                    <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        stroke-width="2"
                                        d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3"
                                    />
                                </svg>
                            </div>
                            <div>
                                <div class="font-medium">{piano.name}</div>
                                <div class="text-sm text-base-content/70">
                                    {piano.location}
                                </div>
                            </div>
                        </a>
                    ))}
                </div>
                
                <!-- Load More Button for Pianos -->
                {hasMorePianos && (
                    <div class="mt-3 text-center">
                        <button id="load-more-pianos" class="btn btn-sm btn-outline">
                            Load More ({filteredPianos.length - 3} more)
                        </button>
                    </div>
                )}
            </div>
        )
    }

    <!-- Events Section -->
    {
        currentType === "events" && filteredEvents.length > 0 && (
            <div class="p-4">
                <h3 class="text-lg font-semibold mb-3">Events</h3>
                <div id="events-container" class="space-y-2">
                    {filteredEvents.map((event, index) => (
                        <a
                            href={`/events/${event.id}`}
                            class={`event-item flex items-center gap-3 p-2 hover:bg-base-200 rounded-lg transition-colors ${index >= 3 ? 'hidden' : ''}`}
                            data-index={index}
                        >
                            <div class="w-12 h-12 bg-base-200 rounded-lg flex items-center justify-center">
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    class="h-6 w-6 text-primary"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke="currentColor"
                                >
                                    <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        stroke-width="2"
                                        d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                                    />
                                </svg>
                            </div>
                            <div>
                                <div class="font-medium">{event.name}</div>
                                <div class="text-sm text-base-content/70">
                                    {event.location} â€¢ {event.date} {event.time}
                                </div>
                            </div>
                        </a>
                    ))}
                </div>
                
                <!-- Load More Button for Events -->
                {hasMoreEvents && (
                    <div class="mt-3 text-center">
                        <button id="load-more-events" class="btn btn-sm btn-outline">
                            Load More ({filteredEvents.length - 3} more)
                        </button>
                    </div>
                )}
            </div>
        )
    }

    {
        (currentType === "pianos" && filteredPianos.length === 0) ||
        (currentType === "events" && filteredEvents.length === 0) ? (
            <div class="p-4 text-center text-base-content/70">
                No results found
            </div>
        ) : null
    }
</div>

<script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
        console.log('Search results script loaded');
        
        // Load more pianos
        const loadMorePianosBtn = document.getElementById('load-more-pianos');
        
        if (loadMorePianosBtn) {
            loadMorePianosBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                
                console.log('Load more pianos clicked');
                
                // Show all hidden piano items
                const hiddenItems = document.querySelectorAll('.piano-item.hidden');
                hiddenItems.forEach(item => {
                    item.classList.remove('hidden');
                });
                
                // Hide the button
                loadMorePianosBtn.style.display = 'none';
                
                // Make container scrollable if needed
                const container = document.getElementById('pianos-container');
                if (container && container.scrollHeight > 300) {
                    container.style.maxHeight = '300px';
                    container.style.overflowY = 'auto';
                    container.style.paddingRight = '10px';
                }
            });
        }
        
        // Load more events
        const loadMoreEventsBtn = document.getElementById('load-more-events');
        
        if (loadMoreEventsBtn) {
            loadMoreEventsBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                
                console.log('Load more events clicked');
                
                // Show all hidden event items
                const hiddenItems = document.querySelectorAll('.event-item.hidden');
                hiddenItems.forEach(item => {
                    item.classList.remove('hidden');
                });
                
                // Hide the button
                loadMoreEventsBtn.style.display = 'none';
                
                // Make container scrollable if needed
                const container = document.getElementById('events-container');
                if (container && container.scrollHeight > 300) {
                    container.style.maxHeight = '300px';
                    container.style.overflowY = 'auto';
                    container.style.paddingRight = '10px';
                }
            });
        }
    });
</script>
