---
// EventService component provides client-side event management functions
---

<script is:inline>
  // Use a self-executing function to avoid polluting the global scope
  (function() {
    // We can't use import statements in inline scripts
    // Instead, we'll use the global supabaseClient that's set by SupabaseClient.astro
    let supabase;
    
    // Function to initialize the service when Supabase is ready
    function initEventService() {
      if (window.supabaseClient) {
        supabase = window.supabaseClient;
      } else {
        // Wait for the supabase-ready event
        window.addEventListener('supabase-ready', function() {
          supabase = window.supabaseClient;
        }, { once: true }); // Use once: true to automatically remove the listener after it's triggered
      }
    }
    
    // Initialize the service
    initEventService();
  
  // Client-side implementation of createEvent function
  async function createEvent(eventData) {
    if (!supabase) {
      throw new Error('Supabase client not initialized');
    }
    
    try {
      
      // Insert the event data
      const { data, error } = await supabase
        .from('events')
        .insert(eventData)
        .select();
      
      if (error) {
        
        // Check for specific error types
        if (error.code === '42501' || error.message?.includes('permission')) {
          throw new Error('Permission denied: You may need to log in to add an event');
        } else if (error.code === '23505') {
          throw new Error('An event with this information already exists');
        } else if (error.code === '23502') {
          throw new Error('Missing required fields: ' + error.details);
        } else if (error.code === '400') {
          throw new Error('Bad request: ' + (error.message || 'Check your data format'));
        } else {
          // Try to provide a more helpful error message
          const errorMsg = error.message || 'Unknown error';
          throw new Error(`Database error (${error.code}): ${errorMsg}`);
        }
      }
      
      if (!data || data.length === 0) {
        throw new Error('No data returned after insert');
      }
      
      return data[0];
    } catch (error) {
      throw error;
    }
  }
  
  // No longer need the getSupabaseClient helper function as we're importing the client directly

  // Function to upload an image to Supabase storage
  async function uploadEventImage(imageFile, eventName) {
    if (!imageFile || imageFile.size === 0) {
      return null;
    }
    
    // Generate a unique file name
    const fileName = `${Date.now()}-${imageFile.name.replace(/[^a-zA-Z0-9.]/g, '_')}`;
    
    try {
      // METHOD 1: Direct fetch to Supabase Storage API
      try {
        // Get the JWT token
        const { data: { session } } = await supabase.auth.getSession();
        if (!session) throw new Error('No active session');
        
        const token = session.access_token;
        
        // Create FormData
        const formData = new FormData();
        formData.append('file', imageFile);
        
        // Set proper URL for upload
        const storageUrl = 'https://epdkmtgrcqreqewpnzaf.supabase.co/storage/v1/object/event-images/' + fileName;
        
        console.log('Uploading event image to:', storageUrl);
        
        // Upload with fetch
        const uploadResponse = await fetch(storageUrl, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`
          },
          body: formData
        });
        
        if (!uploadResponse.ok) {
          const errorData = await uploadResponse.json();
          throw new Error(`Upload failed: ${JSON.stringify(errorData)}`);
        }
        
        console.log('Event image upload successful with direct fetch');
        
        // Get public URL
        const { data: urlData } = supabase.storage
          .from('event-images')
          .getPublicUrl(fileName);
          
        return urlData.publicUrl;
      } catch (fetchError) {
        console.error('Direct fetch upload failed:', fetchError);
        
        // METHOD 2: Fallback to Supabase client
        console.log('Trying fallback upload with supabase client...');
        
        // Create a clean Blob with the correct MIME type
        const fileExt = imageFile.name.split('.').pop();
        const arrayBuffer = await imageFile.arrayBuffer();
        const blob = new Blob([arrayBuffer], { 
          type: imageFile.type || `image/${fileExt}` 
        });
        
        // Upload to Supabase Storage
        const { data: uploadData, error: uploadError } = await supabase.storage
          .from('event-images')
          .upload(fileName, blob, {
            contentType: imageFile.type || `image/${fileExt}`,
            cacheControl: '3600',
            upsert: true
          });
          
        if (uploadError) {
          throw uploadError;
        }
        
        // Get public URL
        const { data: urlData } = supabase.storage
          .from('event-images')
          .getPublicUrl(fileName);
          
        console.log('Fallback upload successful');
        return urlData.publicUrl;
      }
    } catch (error) {
      console.error('All event image upload methods failed:', error);
      return null;
    }
  }
  
  // Function to create an event media entry
  async function createEventMedia(eventId, imageUrl, description) {
    if (!eventId || !imageUrl) {
      return null;
    }
    
    try {
      const { data, error } = await supabase
        .from('event_media')
        .insert({
          event_id: eventId,
          media_type: 'image',
          url: imageUrl,
          description: description || `Image for event ${eventId}`
        });
        
      if (error) {
        throw error;
      }
      
      return data;
    } catch (error) {
      return null;
    }
  }
  
  // Helper function to log form data (for debugging)
  function logFormData(formData) {
    if (process.env.NODE_ENV === 'development') {
      const formDataObj = {};
      formData.forEach((value, key) => {
        formDataObj[key] = value instanceof File ? `File: ${value.name}` : String(value);
      });
      console.log("Form data:", formDataObj);
    }
  }
  
    // Make functions available globally
    window.eventService = {
      createEvent,
      uploadEventImage,
      createEventMedia,
      logFormData
    };
  })(); // End of self-executing function
</script>