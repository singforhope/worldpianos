---
// This component is a simple wrapper around the Supabase client
// It doesn't need to load Supabase from a CDN because it's already
// imported and initialized in src/utils/auth.ts

// Import the already initialized Supabase client
import { supabase } from '../../utils/supabase';

// Props for the component (kept for backward compatibility)
interface Props {
  developmentMode?: boolean;
  serviceRoleKey?: string;
}

// Destructure props (not used but kept for backward compatibility)
const {
  developmentMode = false,
  serviceRoleKey = ''
} = Astro.props;

// Get the Supabase URL and key from environment variables
const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
---

<!-- Make the Supabase client available globally -->
<script is:inline define:vars={{ supabaseUrl, supabaseAnonKey }}>
  // Log the environment variables for debugging
  console.log('Supabase URL:', supabaseUrl);
  console.log('Supabase Anon Key:', supabaseAnonKey ? 'Present' : 'Missing');
  
  // Create Supabase client directly in the browser
  // This ensures we don't have any module loading issues
  if (typeof window !== 'undefined') {
    // Store the Supabase URL and keys globally for direct access if needed
    window.supabaseUrl = supabaseUrl;
    window.supabaseAnonKey = supabaseAnonKey;
    
    // Load the Supabase library from CDN
    const script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/dist/umd/supabase.min.js';
    script.async = true;
    script.onload = function() {
      // Initialize the Supabase client
      if (window.supabase && supabaseUrl && supabaseAnonKey) {
        console.log('Creating Supabase client from CDN');
        window.supabaseClient = window.supabase.createClient(supabaseUrl, supabaseAnonKey, {
          auth: {
            persistSession: true,
            autoRefreshToken: true,
            storageKey: 'worldpianos-auth',
            flowType: 'implicit'
          }
        });
        console.log('Supabase client created successfully');
        
        // Dispatch an event to notify other components that Supabase is ready
        const event = new CustomEvent('supabase-ready');
        window.dispatchEvent(event);
      } else {
        console.error('Failed to create Supabase client: missing dependencies');
      }
    };
    script.onerror = function() {
      console.error('Failed to load Supabase library from CDN');
    };
    document.head.appendChild(script);
  }
</script>