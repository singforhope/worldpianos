---
// This component is a simple wrapper around the Supabase client
// It doesn't need to load Supabase from a CDN because it's already
// imported and initialized in src/utils/auth.ts

// Import the already initialized Supabase client
import { supabase } from '../../utils/supabase';

// Props for the component (kept for backward compatibility)
interface Props {
  developmentMode?: boolean;
  serviceRoleKey?: string;
}

// Destructure props (not used but kept for backward compatibility)
const {
  developmentMode = false,
  serviceRoleKey = ''
} = Astro.props;

// Get the Supabase URL and key from environment variables
const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
---

<!-- Make the Supabase client available globally -->
<script is:inline define:vars={{ supabaseUrl, supabaseAnonKey }}>
  // Log the environment variables for debugging
  console.log('Supabase URL:', supabaseUrl);
  console.log('Supabase Anon Key:', supabaseAnonKey ? 'Present' : 'Missing');
  
  // Create Supabase client directly in the browser
  // This ensures we don't have any module loading issues
  if (typeof window !== 'undefined') {
    // Store the Supabase URL and keys globally for direct access if needed
    window.supabaseUrl = supabaseUrl;
    window.supabaseAnonKey = supabaseAnonKey;
    
    // Function to initialize Supabase client
    function initSupabaseClient() {
      // Check if Supabase is already loaded
      if (window.supabase && supabaseUrl && supabaseAnonKey) {
        console.log('Creating Supabase client from CDN');
        try {
          // Initialize the Supabase client
          window.supabaseClient = window.supabase.createClient(supabaseUrl, supabaseAnonKey, {
            auth: {
              persistSession: true,
              autoRefreshToken: true,
              storageKey: 'worldpianos-auth',
              flowType: 'implicit'
            }
          });
          console.log('Supabase client created successfully');
          
          // Check if the client is working by getting the current session
          window.supabaseClient.auth.getSession()
            .then(({ data, error }) => {
              if (error) {
                console.error('Error getting session:', error);
              } else {
                console.log('Session check successful:', data.session ? 'User is logged in' : 'No active session');
              }
              
              // Dispatch an event to notify other components that Supabase is ready
              const event = new CustomEvent('supabase-ready');
              window.dispatchEvent(event);
            })
            .catch(err => {
              console.error('Error checking session:', err);
              // Still dispatch the event so components can handle the error
              const event = new CustomEvent('supabase-ready');
              window.dispatchEvent(event);
            });
        } catch (err) {
          console.error('Error creating Supabase client:', err);
        }
      } else {
        console.error('Failed to create Supabase client: missing dependencies');
      }
    }
    
    // Load the Supabase library from CDN
    const script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2/dist/umd/supabase.min.js';
    script.async = true;
    script.onload = initSupabaseClient;
    script.onerror = function() {
      console.error('Failed to load Supabase library from CDN');
    };
    document.head.appendChild(script);
    
    // Set a timeout to check if Supabase was loaded
    setTimeout(() => {
      if (!window.supabaseClient) {
        console.warn('Supabase client not initialized after 5 seconds, retrying...');
        initSupabaseClient();
      }
    }, 5000);
  }
</script>