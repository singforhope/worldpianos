---
// EventForm.astro - Simplified version
// Import mock data to get pianos for the dropdown
import mockData from "../../data/mockData.json";

interface Props {
  formTitle?: string;
}

const { formTitle = "Add a New Event" } = Astro.props;

// Get pianos for the dropdown
const pianos = mockData.pianos || [];
---

<!-- Load Mapbox GL JS and Geocoder from CDN -->
<link href="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.css" rel="stylesheet">
<script src="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.js"></script>
<script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.min.js"></script>
<link rel="stylesheet" href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.css">

<div class="card bg-base-100 shadow-xl">
  <div class="card-body">
    <h2 class="card-title text-2xl mb-6">{formTitle}</h2>
    
    <form action="#" method="POST" class="space-y-6" enctype="multipart/form-data">
      <!-- Event Name -->
      <div class="form-control w-full">
        <label for="event-name" class="label">
          <span class="label-text">Name of Event</span>
          <span class="label-text-alt text-error">*</span>
        </label>
        <input type="text" id="event-name" name="eventName" placeholder="Enter event name" class="input input-bordered w-full" required />
      </div>
      
      <!-- Location -->
      <div class="form-control w-full">
        <label for="location-container" class="label">
          <span class="label-text">Location</span>
          <span class="label-text-alt text-error">*</span>
        </label>
        <div id="event-location-geocoder-container"></div>
        <input type="hidden" id="event-location-lat" name="latitude" />
        <input type="hidden" id="event-location-lng" name="longitude" />
      </div>
      
      <!-- Event Date and Time -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div class="form-control w-full">
          <label for="event-date" class="label">
            <span class="label-text">Event Date</span>
            <span class="label-text-alt text-error">*</span>
          </label>
          <input type="date" id="event-date" name="eventDate" class="input input-bordered w-full" required />
        </div>
        
        <div class="form-control w-full">
          <label for="event-time" class="label">
            <span class="label-text">Event Time</span>
            <span class="label-text-alt text-error">*</span>
          </label>
          <input type="time" id="event-time" name="eventTime" class="input input-bordered w-full" required />
        </div>
      </div>
      
      <!-- Related Piano -->
      <div class="form-control w-full">
        <label for="related-piano" class="label">
          <span class="label-text">Related Piano</span>
          <span class="label-text-alt text-error">*</span>
        </label>
        <select id="related-piano" name="relatedPiano" class="select select-bordered w-full" required>
          <option value="" disabled selected>Select a piano</option>
          {pianos.map((piano) => (
            <option value={piano.id}>{piano.name} - {piano.location}</option>
          ))}
        </select>
      </div>
      
      <!-- Description -->
      <div class="form-control w-full">
        <label for="description" class="label">
          <span class="label-text">Description</span>
          <span class="label-text-alt text-error">*</span>
        </label>
        <textarea id="description" name="description" placeholder="Describe the event" class="textarea textarea-bordered w-full h-32" required></textarea>
      </div>
      
      <!-- Picture Upload -->
      <div class="form-control w-full">
        <label for="event-picture" class="label">
          <span class="label-text">Event Picture</span>
        </label>
        <input type="file" id="event-picture" name="eventPicture" accept="image/*" class="file-input file-input-bordered w-full" />
      </div>
      
      <!-- Event Type -->
      <div class="form-control w-full">
        <label for="event-type" class="label">
          <span class="label-text">Event Type</span>
        </label>
        <select id="event-type" name="eventType" class="select select-bordered w-full">
          <option value="Concert">Concert</option>
          <option value="Recital">Recital</option>
          <option value="Festival">Festival</option>
          <option value="Workshop">Workshop</option>
          <option value="Competition">Competition</option>
          <option value="Other">Other</option>
        </select>
      </div>
      
      <script is:inline>
        document.addEventListener("DOMContentLoaded", () => {
          const geocoderContainer = document.getElementById("event-location-geocoder-container");
          const locationLat = document.getElementById("event-location-lat");
          const locationLng = document.getElementById("event-location-lng");
          
          // Initialize Mapbox Geocoder for location
          if (geocoderContainer && mapboxgl && MapboxGeocoder) {
            const geocoder = new MapboxGeocoder({
              accessToken: "pk.eyJ1Ijoic2ZoYWRtaW4iLCJhIjoiY2t6bWZnY2VhNWY0djJwdHZhZnpvY3prbSJ9.5vyd64pGtGwl9YfMNFH9eQ",
              countries: "us,ca,gb,fr,de,it,es,pt,au,nz,jp,kr,cn",
              language: "en",
              placeholder: "Search for a location...",
              types: "place,locality,neighborhood,address",
              bbox: [-180, -90, 180, 90],
              limit: 5,
              minLength: 2,
              flyTo: false,
              marker: false,
              mapboxgl: mapboxgl,
            });
            
            geocoderContainer.appendChild(geocoder.onAdd());
            
            // Handle geocoder result
            geocoder.on("result", (event) => {
              const result = event.result;
              const coordinates = result.center;
              
              // Set hidden input values for coordinates
              if (locationLat && locationLng) {
                locationLat.setAttribute('value', coordinates[1]); // latitude
                locationLng.setAttribute('value', coordinates[0]); // longitude
              }
            });
          }
        });
      </script>
      
      <style>
        /* Mapbox Geocoder styles */
        .mapboxgl-ctrl-geocoder {
          box-shadow: none !important;
          border: 1px solid hsl(var(--bc) / 0.2) !important;
          border-radius: 0.5rem !important;
          background-color: hsl(var(--b1)) !important;
          color: hsl(var(--bc)) !important;
          font-family: inherit !important;
          width: 100% !important;
          min-height: 2.5rem !important;
        }
      
        .mapboxgl-ctrl-geocoder .suggestions {
          background-color: hsl(var(--b1)) !important;
          border: 1px solid hsl(var(--bc) / 0.2) !important;
          border-radius: 0.5rem !important;
          margin-top: 0.5rem !important;
        }
      
        .mapboxgl-ctrl-geocoder .suggestions .suggestion {
          padding: 0.5rem 1rem !important;
          color: hsl(var(--bc)) !important;
        }
      
        .mapboxgl-ctrl-geocoder .suggestions .suggestion.active {
          background-color: hsl(var(--b2)) !important;
        }
      
        .mapboxgl-ctrl-geocoder .suggestions .suggestion:hover {
          background-color: hsl(var(--b2)) !important;
        }
      
        .mapboxgl-ctrl-geocoder .suggestions .suggestion .address {
          color: hsl(var(--bc) / 0.7) !important;
        }
      </style>
      
      <!-- Submit Button -->
      <div class="form-control mt-6">
        <button type="submit" class="btn btn-primary">Submit</button>
      </div>
    </form>
  </div>
</div>