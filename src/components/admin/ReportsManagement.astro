---
import { supabase } from "../../utils/supabase";

// Fetch recent reports using a more reliable approach
let recentReports = [];
let reportsError = null;

try {
    // Get basic report data
    const { data, error } = await supabase
        .from('piano_reports')
        .select('*, piano_id, user_id')
        .eq('status', 'pending')
        .order('created_at', { ascending: false })
        .limit(10);
    
    if (error) throw error;
    recentReports = data || [];
    
    // If we have reports, fetch related data
    if (recentReports.length > 0) {
        // Get unique piano IDs
        const pianoIds = [...new Set(recentReports
            .map(report => report.piano_id)
            .filter(Boolean))];
        
        // Get unique user IDs
        const userIds = [...new Set(recentReports
            .map(report => report.user_id)
            .filter(Boolean))];
        
        // Fetch piano data
        if (pianoIds.length > 0) {
            const { data: pianos } = await supabase
                .from('pianos')
                .select('id, name')
                .in('id', pianoIds);
            
            if (pianos) {
                // Create lookup map for piano names
                const pianoMap: Record<string, string> = pianos.reduce((acc: Record<string, string>, piano) => {
                    acc[piano.id] = piano.name;
                    return acc;
                }, {});
                
                // Add piano names to reports
                recentReports = recentReports.map(report => ({
                    ...report,
                    piano_name: report.piano_id && pianoMap.hasOwnProperty(report.piano_id)
                        ? pianoMap[report.piano_id]
                        : 'Unknown Piano'
                }));
            }
        }
        
        // Fetch user data
        if (userIds.length > 0) {
            const { data: users } = await supabase
                .from('user_profiles')
                .select('id, display_name')
                .in('id', userIds);
            
            if (users) {
                // Create lookup map for user display names
                const userMap: Record<string, string> = users.reduce((acc: Record<string, string>, user) => {
                    acc[user.id] = user.display_name;
                    return acc;
                }, {});
                
                // Add user display names to reports
                recentReports = recentReports.map(report => ({
                    ...report,
                    user_display_name: report.user_id && userMap.hasOwnProperty(report.user_id)
                        ? userMap[report.user_id]
                        : 'Anonymous'
                }));
            }
        }
    }
} catch (err) {
    console.error('Error fetching reports:', err);
    reportsError = err instanceof Error ? err : new Error('An unexpected error occurred');
}

// Format date for display
const formatDate = (dateString: string) => {
    try {
        const date = new Date(dateString);
        
        // Check if date is valid
        if (isNaN(date.getTime())) {
            return 'Invalid date';
        }
        
        return date.toLocaleDateString(undefined, {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    } catch (err) {
        console.error(`Error formatting date: ${dateString}`, err);
        return dateString || 'Unknown date';
    }
};
---

<div class="card bg-base-100 shadow-xl">
    <div class="card-body">
        <h2 class="card-title">Recent Reports</h2>
        
        {reportsError && (
            <div class="alert alert-error">
                <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                <span>Error loading reports: {reportsError.message}</span>
            </div>
        )}
        
        {!reportsError && (!recentReports || recentReports.length === 0) && (
            <div class="alert alert-success">
                <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                <span>No pending reports found.</span>
            </div>
        )}
        
        {!reportsError && recentReports && recentReports.length > 0 && (
            <div class="space-y-4 mt-4">
                {recentReports.map((report) => (
                    <div class="card bg-base-200">
                        <div class="card-body p-4">
                            <div class="flex justify-between items-start">
                                <h3 class="font-bold">{report.piano_name}</h3>
                                <span class="badge badge-warning">
                                    {report.status}
                                </span>
                            </div>
                            <p class="text-sm mt-2"><span class="font-semibold">Issue:</span> {report.issue_type}</p>
                            <p class="text-sm mt-2">{report.description}</p>
                            <div class="text-xs opacity-70 mt-2">
                                Reported by {report.user_display_name} on {formatDate(report.created_at)}
                            </div>
                            
                            <div class="card-actions justify-end mt-2">
                                <a href={`/admin/reports/${report.id}`} class="btn btn-xs btn-primary">Review</a>
                                <button 
                                    class="btn btn-xs btn-success resolve-btn"
                                    data-id={report.id}
                                    data-type="report"
                                >
                                    Resolve
                                </button>
                                <button 
                                    class="btn btn-xs btn-error delete-btn"
                                    data-id={report.id}
                                    data-type="report"
                                >
                                    Delete
                                </button>
                            </div>
                        </div>
                    </div>
                ))}
            </div>
        )}
        
        <div class="card-actions justify-end mt-4">
            <a href="/admin/reports" class="btn btn-primary">View All Reports</a>
        </div>
    </div>
</div>

<script>
    // Import types
    import type { SupabaseClient } from '@supabase/supabase-js';
    
    // Safer import pattern
    let supabaseClient: SupabaseClient | null = null;
    
    // Safe import function
    async function getSupabaseClient(): Promise<SupabaseClient> {
        if (supabaseClient) return supabaseClient;
        
        try {
            const { supabase } = await import('../../utils/supabase');
            if (!supabase) {
                throw new Error('Failed to initialize Supabase client');
            }
            supabaseClient = supabase;
            return supabaseClient;
        } catch (error) {
            console.error('Error importing Supabase client:', error);
            throw new Error('Database connection failed. Please try again later.');
        }
    }
    
    document.addEventListener('DOMContentLoaded', () => {
        // Create modal for notifications instead of using alert
        const showNotification = (title: string, message: string, isSuccess = true) => {
            // Create modal if it doesn't exist yet
            let modal = document.getElementById('notification-modal') as HTMLDialogElement;
            
            if (!modal) {
                // Create modal element
                modal = document.createElement('dialog');
                modal.id = 'notification-modal';
                modal.className = 'modal';
                
                // Create modal content
                modal.innerHTML = `
                    <div class="modal-box">
                        <h3 id="notification-title" class="font-bold text-lg"></h3>
                        <p id="notification-message" class="py-4"></p>
                        <div class="modal-action">
                            <button id="notification-ok-btn" class="btn">OK</button>
                        </div>
                    </div>
                `;
                
                // Add modal to body
                document.body.appendChild(modal);
                
                // Add event listener to OK button
                const okButton = modal.querySelector('#notification-ok-btn');
                if (okButton) {
                    okButton.addEventListener('click', () => {
                        modal.close();
                    });
                }
            }
            
            // Set modal content
            const titleElement = modal.querySelector('#notification-title');
            const messageElement = modal.querySelector('#notification-message');
            
            if (titleElement) {
                titleElement.textContent = title;
                titleElement.className = `font-bold text-lg ${isSuccess ? 'text-success' : 'text-error'}`;
            }
            
            if (messageElement) {
                messageElement.textContent = message;
            }
            
            // Show modal
            modal.showModal();
        };
        
        // Create confirmation modal for delete actions
        const showConfirmation = (title: string, message: string, onConfirm: () => void) => {
            // Create modal if it doesn't exist yet
            let modal = document.getElementById('confirm-modal') as HTMLDialogElement;
            
            if (!modal) {
                // Create modal element
                modal = document.createElement('dialog');
                modal.id = 'confirm-modal';
                modal.className = 'modal';
                
                // Create modal content
                modal.innerHTML = `
                    <div class="modal-box">
                        <h3 id="confirm-title" class="font-bold text-lg text-error"></h3>
                        <p id="confirm-message" class="py-4"></p>
                        <div class="modal-action">
                            <button id="confirm-cancel-btn" class="btn">Cancel</button>
                            <button id="confirm-ok-btn" class="btn btn-error">Confirm</button>
                        </div>
                    </div>
                `;
                
                // Add modal to body
                document.body.appendChild(modal);
                
                // Add event listener to Cancel button
                const cancelButton = modal.querySelector('#confirm-cancel-btn');
                if (cancelButton) {
                    cancelButton.addEventListener('click', () => {
                        modal.close();
                    });
                }
            }
            
            // Set modal content
            const titleElement = modal.querySelector('#confirm-title');
            const messageElement = modal.querySelector('#confirm-message');
            const confirmButton = modal.querySelector('#confirm-ok-btn');
            
            if (titleElement) {
                titleElement.textContent = title;
            }
            
            if (messageElement) {
                messageElement.textContent = message;
            }
            
            // Set up confirm action
            if (confirmButton) {
                // Remove any existing event listeners
                const newConfirmButton = confirmButton.cloneNode(true);
                confirmButton.parentNode?.replaceChild(newConfirmButton, confirmButton);
                
                // Add new event listener
                newConfirmButton.addEventListener('click', () => {
                    modal.close();
                    onConfirm();
                });
            }
            
            // Show modal
            modal.showModal();
        };
        
        // Resolve buttons
        const resolveButtons = document.querySelectorAll('.resolve-btn');
        resolveButtons.forEach(btn => {
            btn.addEventListener('click', async () => {
                const id = btn.getAttribute('data-id');
                
                if (!id) return;
                
                try {
                    // Get Supabase client
                    const supabase = await getSupabaseClient();
                    
                    // Update report status
                    const { error } = await supabase
                        .from('piano_reports')
                        .update({ status: 'resolved' })
                        .eq('id', id);
                    
                    if (error) {
                        // Handle specific error types
                        if (error.code === '42501' || error.message?.includes('permission')) {
                            throw new Error('Permission denied: You may not have rights to modify this report');
                        }
                        throw error;
                    }
                    
                    // Update UI
                    const card = btn.closest('.card');
                    if (card) {
                        const statusBadge = card.querySelector('.badge');
                        if (statusBadge) {
                            statusBadge.classList.remove('badge-warning');
                            statusBadge.classList.add('badge-success');
                            statusBadge.textContent = 'resolved';
                        }
                        
                        // Remove resolve button
                        btn.remove();
                    }
                    
                    // Show success message
                    showNotification('Success', 'Report resolved successfully!', true);
                } catch (error) {
                    console.error('Error resolving report:', error);
                    
                    // Show error message
                    if (error instanceof Error) {
                        showNotification('Error', `Error: ${error.message}`, false);
                    } else {
                        showNotification('Error', 'Failed to resolve report', false);
                    }
                }
            });
        });
        
        // Delete buttons
        const deleteButtons = document.querySelectorAll('.delete-btn');
        deleteButtons.forEach(btn => {
            btn.addEventListener('click', async () => {
                const id = btn.getAttribute('data-id');
                const type = btn.getAttribute('data-type');
                
                if (!id || !type) return;
                
                // Confirm deletion
                showConfirmation(
                    'Delete Report',
                    'Are you sure you want to delete this report? This action cannot be undone.',
                    async () => {
                        try {
                            // Get Supabase client
                            const supabase = await getSupabaseClient();
                            
                            // Delete report
                            const { error } = await supabase
                                .from('piano_reports')
                                .delete()
                                .eq('id', id);
                            
                            if (error) {
                                // Handle specific error types
                                if (error.code === '42501' || error.message?.includes('permission')) {
                                    throw new Error('Permission denied: You may not have rights to delete this report');
                                } else if (error.code === '23503') {
                                    throw new Error('Cannot delete: This report is referenced by other items');
                                }
                                throw error;
                            }
                            
                            // Remove card from DOM
                            const card = btn.closest('.card');
                            if (card) {
                                card.remove();
                            }
                            
                            // Show success message
                            showNotification('Success', 'Report deleted successfully!', true);
                        } catch (error) {
                            console.error('Error deleting report:', error);
                            
                            // Show error message
                            if (error instanceof Error) {
                                showNotification('Error', `Error: ${error.message}`, false);
                            } else {
                                showNotification('Error', 'Failed to delete report', false);
                            }
                        }
                    }
                );
            });
        });
    });
</script>