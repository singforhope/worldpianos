---
// Header.astro
import Location from "../search/Location.astro";
import { Image } from "astro:assets";
import logo from "../../assets/logo.png";
import { auth, profile } from "../../utils/auth";

// Check if we're in a browser environment
const isBrowser = typeof window !== 'undefined';

// Authentication check
const authenticated = await auth.isAuthenticated();
const user = await auth.getCurrentUser();

// Get user profile if authenticated
let userProfile = null;
if (user) {
  console.log('Header: Getting user profile for ID:', user.id);
  userProfile = await profile.getUserProfile(user.id);
  console.log('Header: Profile retrieved:', userProfile ? 'Success' : 'Not found');
}

// Add classes to help client-side JS identify auth state
const bodyClasses = [];
if (authenticated) bodyClasses.push('server-authenticated');
else bodyClasses.push('server-not-authenticated');
const currentPath = Astro.url.pathname;
const searchQuery = Astro.url.searchParams.get("q") || "";

// Helper function to check if a link is active
const isActive = (path: string) => currentPath.startsWith(path);
---

<header class="navbar bg-base-100 shadow-lg sticky top-0 z-50">
    <!-- Left Section: Logo and Navigation -->
    <div class="navbar-start flex-1">
        <!-- Mobile Menu -->
        <div class="dropdown lg:hidden">
            <label tabindex="0" class="btn btn-ghost">
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-5 w-5"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M4 6h16M4 12h8m-8 6h16"></path>
                </svg>
            </label>
            <ul
                tabindex="0"
                class="menu menu-sm dropdown-content mt-3 z-[1] p-2 shadow bg-base-100 rounded-box w-52 animate-fadeInDown"
            >
                <li>
                    <a
                        href="/map"
                        class={`${isActive("/map") ? "bg-primary text-primary-content font-semibold" : ""} hover:bg-primary hover:text-primary-content`}
                        >Map</a
                    >
                </li>
                <li>
                    <a
                        href="/pianos"
                        class={`${isActive("/pianos") ? "bg-primary text-primary-content font-semibold" : ""} hover:bg-primary hover:text-primary-content`}
                        >Pianos</a
                    >
                </li>
                <li>
                    <a
                        href="/events"
                        class={`${isActive("/events") ? "bg-primary text-primary-content font-semibold" : ""} hover:bg-primary hover:text-primary-content`}
                        >Events</a
                    >
                </li>
                <li>
                    <a
                        href="/about"
                        class={`${isActive("/about") ? "font-semibold bg-base-100" : ""}`}
                        >About</a
                    >
                </li>
                <li class="menu-title pt-2">
                    <span>Actions</span>
                </li>
                {authenticated && (
                    <li>
                        <button class="open-piano-modal">
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                class="h-5 w-5"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                            >
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M12 4v16m8-8H4"></path>
                            </svg>
                            Add Piano
                        </button>
                    </li>
                )}
                
                <!-- Location Button in Mobile Menu -->
                <li>
                    <button id="mobile-location-button" class="flex items-center">
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-5 w-5"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
                            ></path>
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        </svg>
                        Set a Location
                    </button>
                </li>
                
                <!-- Mobile Search Toggle -->
                <li class="lg:hidden mt-2">
                    <button id="mobile-search-toggle" class="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                        Search
                    </button>
                </li>
            </ul>
        </div>
        <!-- Logo -->
        <a
            href="/"
            class="btn btn-ghost normal-case text-xl md:text-2xl flex items-center gap-1 px-1 md:px-3"
        >
            <div class="w-7 h-7 md:w-9 md:h-9">
                <Image
                    src={logo}
                    alt="Worldpianos Logo"
                   
                />
            </div>
            <span class="text-primary -mr-1">World</span><span>Pianos</span>
        </a>
        <!-- Desktop Menu -->
        <ul class="menu menu-horizontal px-1 hidden lg:flex">
            <li>
                <a
                    href="/map"
                    class={`${isActive("/map") ? "bg-primary text-primary-content font-semibold" : ""} hover:bg-primary hover:text-primary-content`}
                    >Map</a
                >
            </li>
            <li>
                <a
                    href="/pianos"
                    class={`${isActive("/pianos") ? "bg-primary text-primary-content font-semibold" : ""} hover:bg-primary hover:text-primary-content`}
                    >Pianos</a
                >
            </li>
            <li>
                <a
                    href="/events"
                    class={`${isActive("/events") ? "bg-primary text-primary-content font-semibold" : ""} hover:bg-primary hover:text-primary-content`}
                    >Events</a
                >
            </li>
            <li>
                <a
                    href="/about"
                    class={`${isActive("/about") ? "bg-primary text-primary-content font-semibold" : ""} hover:bg-primary hover:text-primary-content`}
                    >About</a
                >
            </li>
        </ul>
    </div>

    <!-- Middle Section: Search -->
    <div class="navbar-center flex-1 justify-center relative">
        <!-- Desktop Search -->
        <form class="form-control w-full max-w-xl hidden md:block" id="search-form" autocomplete="off">
            <div class="flex flex-col sm:flex-row w-full max-w-xl">
                <div class="join w-full">
                    <div class="dropdown join-item">
                        <div tabindex="0" role="button" class="btn btn-bordered join-item" id="search-type-btn">
                            <span id="search-type-text">Pianos</span>
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                            </svg>
                        </div>
                        <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
                            <li><a class="search-type-option" data-value="pianos">Pianos</a></li>
                            <li><a class="search-type-option" data-value="events">Events</a></li>
                        </ul>
                    </div>
                    <input
                        type="text"
                        id="search-input"
                        name="q"
                        value={searchQuery}
                        placeholder="Search pianos..."
                        class="input input-bordered join-item flex-grow"
                        autocomplete="off"
                    />
                    <input type="hidden" id="search-type-input" name="type" value="pianos" />
                    <button type="submit" class="btn btn-primary join-item">
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-5 w-5"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                            ></path>
                        </svg>
                    </button>
                </div>
            </div>
        </form>
        
        <!-- Mobile Search Button (always visible) -->
        <button id="mobile-search-btn" class="btn btn-circle btn-ghost md:hidden">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
        </button>
    </div>

    <!-- Right Section: User Controls -->
    <div class="navbar-end flex-1 justify-end mr-0 md:mr-2 gap-1">
        <!-- Location Button (hidden on mobile, visible on md screens and up) -->
        <Location className="hidden md:flex mr-1" />

        <div id="auth-container">
            {
                !authenticated ? (
                    <div class="flex items-center">
                        <a href="/auth" class="btn btn-primary btn-sm px-2 xs:px-4">
                            <span class="hidden xs:inline">Login or</span><span> Sign Up</span>
                        </a>
                    </div>
                ) : (
                    <div class="flex items-center gap-1">
                        <!-- Add Piano Button (Modal Trigger) - Only shown when authenticated -->
                        <button id="open-piano-modal" class="btn btn-primary btn-outline btn-sm mr-1 hidden sm:flex">
                            <svg
                                xmlns="http://www.w3.org/2000/svg"
                                class="h-5 w-5"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                            >
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    stroke-width="2"
                                    d="M12 4v16m8-8H4"></path>
                            </svg>
                            <span class="hidden md:inline">Add Piano</span>
                        </button>
                        <div class="dropdown dropdown-end">
                            <label tabindex="0" class="btn btn-ghost btn-circle avatar">
                                <div class="w-8 md:w-10 rounded-full">
                                    <img
                                        src={userProfile?.avatar_url || `https://ui-avatars.com/api/?name=${userProfile?.display_name || 'User'}`}
                                        alt="User avatar"
                                    />
                                </div>
                            </label>
                            <ul
                                tabindex="0"
                                class="menu menu-sm dropdown-content mt-3 z-[1] p-2 shadow bg-base-100 rounded-box w-52"
                            >
                                <li class="menu-title">
                                    <span>{userProfile?.display_name || user?.email?.split('@')[0] || 'User'}</span>
                                </li>
                                <li>
                                    <a href="/user/dashboard">
                                        <svg
                                            xmlns="http://www.w3.org/2000/svg"
                                            class="h-5 w-5"
                                            fill="none"
                                            viewBox="0 0 24 24"
                                            stroke="currentColor"
                                        >
                                            <path
                                                stroke-linecap="round"
                                                stroke-linejoin="round"
                                                stroke-width="2"
                                                d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                                            />
                                        </svg>
                                        User Dashboard
                                    </a>
                                </li>
                                <li>
                                    <a href="/user/settings">
                                        <svg
                                            xmlns="http://www.w3.org/2000/svg"
                                            class="h-5 w-5"
                                            fill="none"
                                            viewBox="0 0 24 24"
                                            stroke="currentColor"
                                        >
                                            <path
                                                stroke-linecap="round"
                                                stroke-linejoin="round"
                                                stroke-width="2"
                                                d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"
                                            />
                                            <path
                                                stroke-linecap="round"
                                                stroke-linejoin="round"
                                                stroke-width="2"
                                                d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                                            />
                                        </svg>
                                        Settings
                                    </a>
                                </li>
                                {userProfile?.role === 'admin' && (
                                    <li>
                                        <a href="/admin/dashboard">
                                            <svg
                                                xmlns="http://www.w3.org/2000/svg"
                                                class="h-5 w-5"
                                                fill="none"
                                                viewBox="0 0 24 24"
                                                stroke="currentColor"
                                            >
                                                <path
                                                    stroke-linecap="round"
                                                    stroke-linejoin="round"
                                                    stroke-width="2"
                                                    d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
                                                />
                                            </svg>
                                            Admin Dashboard
                                        </a>
                                    </li>
                                )}
                                <li>
                                    <a id="theme-toggle">
                                        <svg
                                            xmlns="http://www.w3.org/2000/svg"
                                            class="h-5 w-5"
                                            fill="none"
                                            viewBox="0 0 24 24"
                                            stroke="currentColor"
                                        >
                                            <path
                                                stroke-linecap="round"
                                                stroke-linejoin="round"
                                                stroke-width="2"
                                                d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
                                            />
                                        </svg>
                                        <span class="theme-text">Dark Mode</span>
                                    </a>
                                </li>
                                <li>
                                    <a href="#" id="logout-btn">
                                        <svg
                                            xmlns="http://www.w3.org/2000/svg"
                                            class="h-5 w-5"
                                            fill="none"
                                            viewBox="0 0 24 24"
                                            stroke="currentColor"
                                        >
                                            <path
                                                stroke-linecap="round"
                                                stroke-linejoin="round"
                                                stroke-width="2"
                                                d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"
                                            />
                                        </svg>
                                        Logout
                                    </a>
                                </li>
                            </ul>
                        </div>
                    </div>
                )
            }
        </div>
    </div>
    
    <!-- Mobile Search Panel (hidden by default) -->
    <div id="mobile-search-panel" class="fixed inset-x-0 top-16 z-40 hidden bg-base-100 shadow-lg p-4 animate-fadeInDown md:hidden">
        <form class="form-control w-full" id="mobile-search-form" autocomplete="off">
            <div class="flex flex-col w-full">
                <div class="join w-full">
                    <div class="dropdown join-item">
                        <div tabindex="0" role="button" class="btn btn-bordered join-item" id="mobile-search-type-btn">
                            <span id="mobile-search-type-text">Pianos</span>
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                            </svg>
                        </div>
                        <ul tabindex="0" class="dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
                            <li><a class="mobile-search-type-option" data-value="pianos">Pianos</a></li>
                            <li><a class="mobile-search-type-option" data-value="events">Events</a></li>
                        </ul>
                    </div>
                    <input
                        type="text"
                        id="mobile-search-input"
                        name="q"
                        value=""
                        placeholder="Search pianos..."
                        class="input input-bordered join-item flex-grow"
                        autocomplete="off"
                    />
                    <button type="submit" class="btn btn-primary join-item">
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-5 w-5"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                            ></path>
                        </svg>
                    </button>
                </div>
                <div class="mt-2 w-full">
                    <!-- Mobile search loading indicator -->
                    <div id="mobile-search-loading" class="py-4 justify-center" style="display: none;">
                        <div class="loading loading-spinner loading-sm"></div>
                    </div>
                    
                    <!-- Mobile search results container - separate from desktop -->
                    <div id="mobile-results-container" class="max-h-60 overflow-y-auto rounded-lg shadow-inner"></div>
                </div>
                <div class="flex justify-between mt-3">
                    <button type="submit" class="btn btn-sm btn-primary">Search</button>
                    <button id="close-mobile-search" class="btn btn-sm btn-ghost">Close</button>
                </div>
            </div>
        </form>
    </div>
</header>

<script>
    // Theme switcher functionality
    const themeToggle = document.getElementById("theme-toggle");
    const themeText = themeToggle?.querySelector(".theme-text");
    const html = document.documentElement;
    
    // Get mobile location button
    const mobileLocationButton = document.getElementById("mobile-location-button");
    const locationModal = document.getElementById("location-modal") as HTMLDialogElement;

    if (themeToggle && themeText) {
        // Toggle theme on click
        themeToggle.addEventListener("click", () => {
            const currentTheme = html.getAttribute("data-theme");
            const newTheme = currentTheme === "light" ? "dark" : "light";

            // Update theme
            html.setAttribute("data-theme", newTheme);
            localStorage.setItem("theme", newTheme);

            // Update text
            themeText.textContent =
                newTheme === "light" ? "Dark Mode" : "Light Mode";
        });

        // Update text based on current theme
        const currentTheme = localStorage.getItem("theme") || "light";
        html.setAttribute("data-theme", currentTheme);
        themeText.textContent =
            currentTheme === "light" ? "Dark Mode" : "Light Mode";
    }

    // Initial theme check
    const storedTheme = localStorage.getItem("theme");
    if (storedTheme) {
        html.setAttribute("data-theme", storedTheme);
        if (themeText) {
            themeText.textContent = storedTheme === "light" ? "Dark Mode" : "Light Mode";
        }
    } else {
        localStorage.setItem("theme", "light");
    }
    
    // Mobile location button click handler
    if (mobileLocationButton && locationModal) {
        mobileLocationButton.addEventListener("click", () => {
            locationModal.showModal();
        });
    }
    
    // Mobile menu functionality
    const mobileMenu = document.querySelector(".dropdown label[tabindex='0']");

    // Search functionality
    const searchInput = document.getElementById("search-input") as HTMLInputElement;
    const searchForm = document.getElementById("search-form");
    const searchTypeBtn = document.getElementById("search-type-btn");
    const searchTypeText = document.getElementById("search-type-text");
    const searchTypeInput = document.getElementById("search-type-input") as HTMLInputElement;
    const searchTypeOptions = document.querySelectorAll(".search-type-option");

    // Mobile search elements
    const mobileSearchBtn = document.getElementById("mobile-search-btn");
    const mobileSearchToggle = document.getElementById("mobile-search-toggle");
    const mobileSearchPanel = document.getElementById("mobile-search-panel");
    const closeMobileSearch = document.getElementById("close-mobile-search");
    const mobileSearchForm = document.getElementById("mobile-search-form");
    const mobileSearchInput = document.getElementById("mobile-search-input") as HTMLInputElement;
    const mobileSearchTypeBtn = document.getElementById("mobile-search-type-btn");
    const mobileSearchTypeText = document.getElementById("mobile-search-type-text");
    const mobileSearchTypeInput = document.getElementById("mobile-search-type-input") as HTMLInputElement;
    const mobileSearchTypeOptions = document.querySelectorAll(".mobile-search-type-option");
    const mobileSearchLoading = document.getElementById("mobile-search-loading");
    const mobileResultsContainer = document.getElementById("mobile-results-container");

    // Get the current search type from URL or default to "pianos"
    const urlParams = new URLSearchParams(window.location.search);
    const currentType = urlParams.get("type") || "pianos";
    
    // Set the initial search type based on URL parameter
    if (searchTypeText && searchTypeInput) {
        searchTypeText.textContent = currentType.charAt(0).toUpperCase() + currentType.slice(1);
        searchTypeInput.value = currentType;
    }
    
    // Also set for mobile
    if (mobileSearchTypeText && mobileSearchTypeInput) {
        mobileSearchTypeText.textContent = currentType.charAt(0).toUpperCase() + currentType.slice(1);
        mobileSearchTypeInput.value = currentType;
    }

    // Handle search type option clicks
    searchTypeOptions.forEach(option => {
        option.addEventListener("click", (e) => {
            e.preventDefault();
            const value = (e.currentTarget as HTMLElement).getAttribute("data-value") || "pianos";
            const text = (e.currentTarget as HTMLElement).textContent || "Pianos";
            
            if (searchTypeText && searchTypeInput) {
                searchTypeText.textContent = text;
                searchTypeInput.value = value;
                (searchInput as HTMLInputElement).placeholder = `Search ${value}...`;
                
                // Update URL with the new search type
                const urlParams = new URLSearchParams(window.location.search);
                urlParams.set("type", value);
                
                // If there's a search query, keep it
                const searchQuery = (searchInput as HTMLInputElement).value.trim();
                if (searchQuery) {
                    urlParams.set("q", searchQuery);
                } else {
                    urlParams.delete("q");
                }
                
                // Reload the page with the new search type
                window.location.href = `${window.location.pathname}?${urlParams.toString()}`;
            }
        });
    });
    
    // Handle mobile search type option clicks
    mobileSearchTypeOptions.forEach(option => {
        option.addEventListener("click", () => {
            const value = option.getAttribute("data-value") || "pianos";
            if (mobileSearchTypeText) {
                mobileSearchTypeText.textContent = value.charAt(0).toUpperCase() + value.slice(1);
            }
            if (mobileSearchInput) {
                mobileSearchInput.placeholder = `Search ${value}...`;
            }
            
            // Clear previous results when changing type
            if (mobileResultsContainer) {
                mobileResultsContainer.innerHTML = '';
            }
        });
    });

    // Mobile search toggle
    function showMobileSearch() {
        if (mobileSearchPanel) {
            mobileSearchPanel.classList.remove('hidden');
            // Focus the input for better UX
            if (mobileSearchInput) mobileSearchInput.focus();
            
            // Copy values from desktop search if available
            if (searchInput && mobileSearchInput) {
                mobileSearchInput.value = (searchInput as HTMLInputElement).value;
            }
        }
    }
    
    function hideMobileSearch() {
        if (mobileSearchPanel) {
            mobileSearchPanel.classList.add('hidden');
            // Hide mobile search results
            if (mobileResultsContainer) {
                mobileResultsContainer.classList.add("opacity-0", "-translate-y-2", "pointer-events-none");
                mobileResultsContainer.classList.remove("opacity-100", "translate-y-0");
            }
        }
    }
    
    // Mobile search button click
    if (mobileSearchBtn) {
        mobileSearchBtn.addEventListener('click', showMobileSearch);
    }
    
    // Mobile search toggle in menu
    if (mobileSearchToggle) {
        mobileSearchToggle.addEventListener('click', showMobileSearch);
    }
    
    // Close mobile search
    if (closeMobileSearch) {
        closeMobileSearch.addEventListener('click', (e) => {
            e.preventDefault();
            hideMobileSearch();
        });
    }
    
    // Mobile search input handler
    if (mobileSearchInput) {
        let mobileSearchTimeout: number | undefined;
        
        mobileSearchInput.addEventListener("input", () => {
            const query = mobileSearchInput.value.trim();
            const type = mobileSearchTypeText?.textContent?.toLowerCase() || "pianos";
            
            // Clear timeout if it exists
            if (mobileSearchTimeout) {
                clearTimeout(mobileSearchTimeout);
            }
            
            if (query.length >= 2) {
                // Show loading indicator
                if (mobileSearchLoading) {
                    mobileSearchLoading.classList.remove("hidden");
                }
                if (mobileResultsContainer) {
                    mobileResultsContainer.innerHTML = '';
                }
                
                // Set timeout to prevent too many requests
                mobileSearchTimeout = window.setTimeout(async () => {
                    try {
                        const response = await fetch(`/api/search?q=${encodeURIComponent(query)}&type=${type}&limit=5`);
                        
                        if (!response.ok) {
                            throw new Error('Search request failed');
                        }
                        
                        const data = await response.json();
                        
                        // Hide loading indicator
                        if (mobileSearchLoading) {
                            mobileSearchLoading.classList.add("hidden");
                        }
                        
                        // Display results
                        if (mobileResultsContainer) {
                            renderMobileResults(data, type);
                        }
                    } catch (error) {
                        console.error("Search error:", error);
                        if (mobileSearchLoading) {
                            mobileSearchLoading.classList.add("hidden");
                        }
                        if (mobileResultsContainer) {
                            mobileResultsContainer.innerHTML = '<div class="p-3 text-error">Error loading results</div>';
                        }
                    }
                }, 300);
            } else {
                // Hide loading and clear results if query is too short
                if (mobileSearchLoading) {
                    mobileSearchLoading.classList.add("hidden");
                }
                if (mobileResultsContainer) {
                    mobileResultsContainer.innerHTML = '';
                }
            }
        });
        
        // Function to render mobile results
        function renderMobileResults(results: any[], type: string) {
            if (!mobileResultsContainer) return;
            
            mobileResultsContainer.innerHTML = '';
            
            if (results.length === 0) {
                mobileResultsContainer.innerHTML = '<div class="p-3 text-sm text-base-content/70">No results found</div>';
                return;
            }
            
            const resultsList = document.createElement('ul');
            resultsList.className = 'menu bg-base-100 rounded-box w-full';
            
            results.forEach(item => {
                const listItem = document.createElement('li');
                
                const link = document.createElement('a');
                link.href = type === 'pianos' 
                    ? `/pianos/${item.id}` 
                    : `/events/${item.id}`;
                
                const title = document.createElement('span');
                title.className = 'font-medium';
                title.textContent = item.name || item.title || 'Untitled';
                
                const subtitle = document.createElement('span');
                subtitle.className = 'text-xs text-base-content/70';
                
                if (type === 'pianos') {
                    subtitle.textContent = item.location || 'No location specified';
                } else {
                    subtitle.textContent = item.location || 'No location specified';
                }
                
                link.appendChild(title);
                link.appendChild(document.createElement('br'));
                link.appendChild(subtitle);
                
                listItem.appendChild(link);
                resultsList.appendChild(listItem);
            });
            
            mobileResultsContainer.appendChild(resultsList);
            
            // Add "View all results" link
            const viewAllItem = document.createElement('li');
            viewAllItem.className = 'border-t border-base-300 mt-1 pt-1';
            
            const viewAllLink = document.createElement('a');
            viewAllLink.className = 'btn btn-ghost btn-sm justify-center text-primary';
            if (mobileSearchInput) {
                viewAllLink.href = `/search?q=${encodeURIComponent(mobileSearchInput.value)}&type=${type}`;
            }
            viewAllLink.textContent = 'View all results';
            
            viewAllItem.appendChild(viewAllLink);
            resultsList.appendChild(viewAllItem);
        }
    }
    
    // Form submission for mobile search
    if (mobileSearchForm && mobileSearchInput) {
        mobileSearchForm.addEventListener("submit", (e) => {
            e.preventDefault();
            const query = mobileSearchInput.value.trim();
            if (query.length > 0) {
                window.location.href = `/search?q=${encodeURIComponent(query)}&type=${mobileSearchTypeText?.textContent?.toLowerCase() || "pianos"}`;
            }
        });
    }
</script>

<script>
    import { auth, profile } from '../../utils/auth';
    
    document.addEventListener('DOMContentLoaded', async () => {
        // Check if user is authenticated on client-side
        const authenticated = await auth.isAuthenticated();
        const user = await auth.getCurrentUser();
        
        if (authenticated && user) {
            // Get user profile
            const userProfile = await profile.getUserProfile(user.id);
            
            // Replace the auth container content with the user dropdown
            const authContainer = document.getElementById('auth-container');
            
            if (authContainer) {
                
                // Create the user dropdown HTML
                const avatarUrl = userProfile?.avatar_url || `https://ui-avatars.com/api/?name=${userProfile?.display_name || 'User'}`;
                const displayName = userProfile?.display_name || user.email?.split('@')[0] || 'User';
                
                authContainer.innerHTML = `
                    <div class="dropdown dropdown-end ml-2">
                        <label tabindex="0" class="btn btn-ghost btn-circle avatar">
                            <div class="w-10 rounded-full">
                                <img src="${avatarUrl}" alt="User avatar" />
                            </div>
                        </label>
                        <ul tabindex="0" class="menu menu-sm dropdown-content mt-3 z-[1] p-2 shadow bg-base-100 rounded-box w-52">
                            <li>
                                <a href="/user/dashboard" class="justify-between">
                                    User Dashboard
                                    <span class="badge">${displayName}</span>
                                </a>
                            </li>
                            <li><a href="/user/settings">Settings</a></li>
                            ${userProfile?.role === 'admin' ?
                                `<li>
                                    <a href="/admin/dashboard">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                                        </svg>
                                        Admin Dashboard
                                    </a>
                                </li>`
                            : ''}
                            <li>
                                <a id="theme-toggle">
                                    <svg
                                        xmlns="http://www.w3.org/2000/svg"
                                        class="h-5 w-5"
                                        fill="none"
                                        viewBox="0 0 24 24"
                                        stroke="currentColor"
                                    >
                                        <path
                                            stroke-linecap="round"
                                            stroke-linejoin="round"
                                            stroke-width="2"
                                            d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
                                        />
                                    </svg>
                                    <span class="theme-text">Dark Mode</span>
                                </a>
                            </li>
                            <li>
                                <a href="#" id="logout-btn">
                                    <svg
                                        xmlns="http://www.w3.org/2000/svg"
                                        class="h-5 w-5"
                                        fill="none"
                                        viewBox="0 0 24 24"
                                        stroke="currentColor"
                                    >
                                        <path
                                            stroke-linecap="round"
                                            stroke-linejoin="round"
                                            stroke-width="2"
                                            d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"
                                        />
                                    </svg>
                                    Logout
                                </a>
                            </li>
                        </ul>
                    </div>
                `;
                
                console.log('Header (client): Auth container content replaced');
                
                // Setup logout button
                const logoutBtn = document.getElementById('logout-btn');
                if (logoutBtn) {
                    logoutBtn.addEventListener('click', async (e) => {
                        e.preventDefault();
                        const { error } = await auth.signOut();
                        if (error) {
                            console.error('Error signing out:', error);
                        }
                        window.location.href = '/';
                    });
                }
                
                // Setup theme toggle
                const themeToggle = document.getElementById("theme-toggle");
                const themeText = themeToggle?.querySelector(".theme-text");
                const html = document.documentElement;

                if (themeToggle && themeText) {
                    // Toggle theme on click
                    themeToggle.addEventListener("click", () => {
                        const currentTheme = html.getAttribute("data-theme");
                        const newTheme = currentTheme === "light" ? "dark" : "light";

                        // Update theme
                        html.setAttribute("data-theme", newTheme);
                        localStorage.setItem("theme", newTheme);

                        // Update text
                        themeText.textContent =
                            newTheme === "light" ? "Dark Mode" : "Light Mode";
                    });

                    // Update text based on current theme
                    const currentTheme = localStorage.getItem("theme") || "light";
                    html.setAttribute("data-theme", currentTheme);
                    themeText.textContent =
                        currentTheme === "light" ? "Dark Mode" : "Light Mode";
                }
            }
            
            // Setup logout button
            const logoutBtn = document.getElementById('logout-btn');
            if (logoutBtn) {
                logoutBtn.addEventListener('click', async (e) => {
                    e.preventDefault();
                    const { error } = await auth.signOut();
                    if (error) {
                        console.error('Error signing out:', error);
                    }
                    window.location.href = '/';
                });
            }
        }
    });
</script>

<script>
    // Initialize theme from localStorage for non-authenticated users
    document.addEventListener('DOMContentLoaded', () => {
        const html = document.documentElement;
        const currentTheme = localStorage.getItem("theme") || "light";
        html.setAttribute("data-theme", currentTheme);
        
        // Setup theme toggle for non-authenticated users
        const themeToggle = document.getElementById("theme-toggle");
        const themeText = themeToggle?.querySelector(".theme-text");
        
        if (themeToggle && themeText) {
            // Toggle theme on click
            themeToggle.addEventListener("click", () => {
                const currentTheme = html.getAttribute("data-theme");
                const newTheme = currentTheme === "light" ? "dark" : "light";
                
                // Update theme
                html.setAttribute("data-theme", newTheme);
                localStorage.setItem("theme", newTheme);
                
                // Update text
                themeText.textContent =
                    newTheme === "light" ? "Dark Mode" : "Light Mode";
            });
            
            // Update text based on current theme
            themeText.textContent =
                currentTheme === "light" ? "Dark Mode" : "Light Mode";
        }
    });
</script>

<style is:global>
    :root {
        color-scheme: light dark;
    }

    /* Ensure theme is applied immediately */
    html[data-theme="dark"] {
        color-scheme: dark;
    }

    html[data-theme="light"] {
        color-scheme: light;
    }

    @keyframes fadeInDown {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .animate-fadeInDown {
        animation: fadeInDown 0.2s ease-out forwards;
    }
</style>

<script>
    // Handle Add Piano button click
    document.addEventListener('DOMContentLoaded', async () => {
        const addPianoBtn = document.getElementById('open-piano-modal');
        const mobileAddPianoBtn = document.querySelector('.open-piano-modal');
        
        // Function to handle the Add Piano button click
        const handleAddPianoClick = async () => {
            try {
                // Import auth from utils
                const { auth } = await import('../../utils/auth');
                
                // Check if user is authenticated
                const isAuthenticated = await auth.isAuthenticated();
                
                if (isAuthenticated) {
                    // If authenticated, open the piano modal
                    const pianoModal = document.getElementById('piano-modal') as HTMLDialogElement;
                    if (pianoModal) {
                        pianoModal.showModal();
                    } else {
                        console.error('Piano modal element not found');
                    }
                } else {
                    // If not authenticated, redirect to the login page
                    // Store the current URL so user can be redirected back after login
                    localStorage.setItem('returnTo', window.location.pathname);
                    window.location.href = '/auth?message=Please log in to add a piano';
                }
            } catch (error) {
                console.error('Error checking authentication:', error);
                // Default to login page if there's an error
                window.location.href = '/auth?message=Please log in to add a piano';
            }
        };
        
        // Add click event listener to the desktop button
        if (addPianoBtn) {
            addPianoBtn.addEventListener('click', handleAddPianoClick);
        }
        
        // Add click event listener to the mobile button
        if (mobileAddPianoBtn) {
            mobileAddPianoBtn.addEventListener('click', handleAddPianoClick);
        }
    });
</script>

<script>
    // Mobile search panel toggle
    const mobileSearchBtn = document.getElementById("mobile-search-btn");
    const mobileSearchPanel = document.getElementById("mobile-search-panel");
    const closeMobileSearch = document.getElementById("close-mobile-search");
    const mobileSearchInput = document.getElementById("mobile-search-input") as HTMLInputElement;
    const mobileSearchTypeBtn = document.getElementById("mobile-search-type-btn");
    const mobileSearchTypeText = document.getElementById("mobile-search-type-text");
    const mobileSearchTypeOptions = document.querySelectorAll(".mobile-search-type-option");
    const mobileSearchLoading = document.getElementById("mobile-search-loading");
    const mobileResultsContainer = document.getElementById("mobile-results-container");
    const mobileSearchForm = document.getElementById("mobile-search-form");

    // Desktop search functionality
    const searchInput = document.getElementById("search-input") as HTMLInputElement;
    const searchForm = document.getElementById("search-form");
    const searchTypeBtn = document.getElementById("search-type-btn");
    const searchTypeText = document.getElementById("search-type-text");
    const searchTypeInput = document.getElementById("search-type-input") as HTMLInputElement;
    const searchTypeOptions = document.querySelectorAll(".search-type-option");
    const desktopSearchLoading = document.createElement("div");
    const desktopResultsContainer = document.createElement("div");
    
    // Set up desktop results containers
    if (searchForm) {
        // Create and append the loading indicator
        desktopSearchLoading.className = "hidden py-4 flex justify-center";
        desktopSearchLoading.innerHTML = '<div class="loading loading-spinner loading-sm"></div>';
        desktopSearchLoading.id = "desktop-search-loading";
        
        // Create and append the results container
        desktopResultsContainer.className = "max-h-60 overflow-y-auto rounded-lg shadow-inner absolute w-full bg-base-100 mt-2";
        desktopResultsContainer.id = "desktop-results-container";
        
        // Append the elements to the form
        const searchFormContainer = searchForm.closest('.form-control');
        if (searchFormContainer) {
            searchFormContainer.appendChild(desktopSearchLoading);
            searchFormContainer.appendChild(desktopResultsContainer);
            (searchFormContainer as HTMLElement).style.position = 'relative';
        }
    }
    
    // Handle desktop search type options
    searchTypeOptions.forEach(option => {
        option.addEventListener("click", () => {
            const value = option.getAttribute("data-value") || "pianos";
            if (searchTypeText && searchTypeInput) {
                searchTypeText.textContent = value.charAt(0).toUpperCase() + value.slice(1);
                searchTypeInput.value = value;
            }
            if (searchInput) {
                searchInput.placeholder = `Search ${value}...`;
            }
            // Clear previous results
            if (desktopResultsContainer) {
                desktopResultsContainer.innerHTML = '';
            }
        });
    });

    // Handle desktop search input
    let desktopSearchTimeout: number | undefined;
    if (searchInput) {
        searchInput.addEventListener("input", () => {
            const query = searchInput.value.trim();
            
            // Clear timeout if it exists
            if (desktopSearchTimeout) {
                clearTimeout(desktopSearchTimeout);
            }
            
            if (query.length >= 2) {
                // Show loading indicator
                desktopSearchLoading.classList.remove("hidden");
                desktopResultsContainer.innerHTML = '';
                
                // Set timeout to prevent too many requests
                desktopSearchTimeout = window.setTimeout(() => {
                    const selectedType = searchTypeInput ? searchTypeInput.value : "pianos";
                    fetchDesktopSearchResults(query, selectedType);
                }, 300);
            } else {
                // Hide loading and clear results if query is too short
                desktopSearchLoading.classList.add("hidden");
                desktopResultsContainer.innerHTML = '';
            }
        });
        
        // Handle click outside to close results
        document.addEventListener("click", (e) => {
            if (
                !searchInput.contains(e.target as Node) &&
                !desktopResultsContainer.contains(e.target as Node) &&
                !searchTypeBtn?.contains(e.target as Node)
            ) {
                desktopResultsContainer.innerHTML = '';
            }
        });
    }
    
    // Handle form submission
    if (searchForm && searchInput) {
        searchForm.addEventListener("submit", (e) => {
            e.preventDefault();
            const query = searchInput.value.trim();
            const selectedType = searchTypeInput ? searchTypeInput.value : "pianos";
            
            if (query) {
                window.location.href = `/search?q=${encodeURIComponent(query)}&type=${selectedType}`;
            }
        });
    }
    
    // Function to fetch desktop search results
    async function fetchDesktopSearchResults(query: string, type: string) {
        try {
            const response = await fetch(`/api/search?q=${encodeURIComponent(query)}&type=${type}&limit=5`);
            
            if (!response.ok) {
                throw new Error('Search request failed');
            }
            
            const data = await response.json();
            
            // Hide loading indicator
            desktopSearchLoading.classList.add("hidden");
            
            // Display results
            renderDesktopSearchResults(data, type);
        } catch (error) {
            console.error("Search error:", error);
            desktopSearchLoading.classList.add("hidden");
            desktopResultsContainer.innerHTML = '<div class="p-3 text-error">Error loading results</div>';
        }
    }
    
    // Function to render desktop search results
    function renderDesktopSearchResults(results: any[], type: string) {
        desktopResultsContainer.innerHTML = '';
        
        if (results.length === 0) {
            desktopResultsContainer.innerHTML = '<div class="p-3 text-sm text-base-content/70">No results found</div>';
            return;
        }
        
        const resultsList = document.createElement('ul');
        resultsList.className = 'menu bg-base-100 rounded-box w-full';
        
        results.forEach(item => {
            const listItem = document.createElement('li');
            
            const link = document.createElement('a');
            link.href = type === 'pianos' 
                ? `/pianos/${item.id}` 
                : `/events/${item.id}`;
            
            const title = document.createElement('span');
            title.className = 'font-medium';
            title.textContent = item.name || item.title || 'Untitled';
            
            const subtitle = document.createElement('span');
            subtitle.className = 'text-xs text-base-content/70';
            
            if (type === 'pianos') {
                subtitle.textContent = item.location || 'No location specified';
            } else {
                subtitle.textContent = item.location || 'No location specified';
            }
            
            link.appendChild(title);
            link.appendChild(document.createElement('br'));
            link.appendChild(subtitle);
            
            listItem.appendChild(link);
            resultsList.appendChild(listItem);
        });
        
        desktopResultsContainer.appendChild(resultsList);
        
        // Add "View all results" link
        const viewAllItem = document.createElement('li');
        viewAllItem.className = 'border-t border-base-300 mt-1 pt-1';
        
        const viewAllLink = document.createElement('a');
        viewAllLink.className = 'btn btn-ghost btn-sm justify-center text-primary';
        if (searchInput) {
            viewAllLink.href = `/search?q=${encodeURIComponent(searchInput.value)}&type=${type}`;
        }
        viewAllLink.textContent = 'View all results';
        
        viewAllItem.appendChild(viewAllLink);
        resultsList.appendChild(viewAllItem);
    }

    // Mobile Search Type Dropdown
    mobileSearchTypeOptions.forEach(option => {
        option.addEventListener("click", () => {
            const value = option.getAttribute("data-value") || "pianos";
            if (mobileSearchTypeText) {
                mobileSearchTypeText.textContent = value.charAt(0).toUpperCase() + value.slice(1);
            }
            if (mobileSearchInput) {
                mobileSearchInput.placeholder = `Search ${value}...`;
            }
            
            // Clear previous results when changing type
            if (mobileResultsContainer) {
                mobileResultsContainer.innerHTML = '';
            }
        });
    });

    if (mobileSearchBtn) {
        mobileSearchBtn.addEventListener("click", () => {
            if (mobileSearchPanel) {
                mobileSearchPanel.classList.toggle("hidden");
                if (!mobileSearchPanel.classList.contains("hidden") && mobileSearchInput) {
                    mobileSearchInput.focus();
                }
            }
        });
    }

    if (closeMobileSearch) {
        closeMobileSearch.addEventListener("click", (e) => {
            e.preventDefault();
            if (mobileSearchPanel) {
                mobileSearchPanel.classList.add("hidden");
            }
        });
    }

    // Form submission for mobile search
    if (mobileSearchForm && mobileSearchInput) {
        mobileSearchForm.addEventListener("submit", (e) => {
            e.preventDefault();
            const query = mobileSearchInput.value.trim();
            if (query.length > 0) {
                window.location.href = `/search?q=${encodeURIComponent(query)}&type=${mobileSearchTypeText?.textContent?.toLowerCase() || "pianos"}`;
            }
        });
    }
</script>
